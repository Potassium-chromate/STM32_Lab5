
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800ee0c  0800ee0c  0000fe0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f50c  0800f50c  000110b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f50c  0800f50c  0001050c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f514  0800f514  000110b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f514  0800f514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f518  0800f518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0800f51c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000110b4  2**0
                  CONTENTS
 10 .bss          00014bd0  200000b4  200000b4  000110b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014c84  20014c84  000110b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000110b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020d41  00000000  00000000  000110e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052e0  00000000  00000000  00031e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de8  00000000  00000000  00037108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174f  00000000  00000000  00038ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027186  00000000  00000000  0003a63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028986  00000000  00000000  000617c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcc61  00000000  00000000  0008a14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00166dac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000081e0  00000000  00000000  00166df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0016efd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800edf4 	.word	0x0800edf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0800edf4 	.word	0x0800edf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	603a      	str	r2, [r7, #0]
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	460b      	mov	r3, r1
 800057e:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000584:	2200      	movs	r2, #0
 8000586:	6839      	ldr	r1, [r7, #0]
 8000588:	481c      	ldr	r0, [pc, #112]	@ (80005fc <AUDIO_OUT_Init+0x8c>)
 800058a:	f000 f8f9 	bl	8000780 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <AUDIO_OUT_Init+0x8c>)
 8000590:	4a1b      	ldr	r2, [pc, #108]	@ (8000600 <AUDIO_OUT_Init+0x90>)
 8000592:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8000594:	4819      	ldr	r0, [pc, #100]	@ (80005fc <AUDIO_OUT_Init+0x8c>)
 8000596:	f004 ff8f 	bl	80054b8 <HAL_I2S_GetState>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80005a0:	2100      	movs	r1, #0
 80005a2:	4816      	ldr	r0, [pc, #88]	@ (80005fc <AUDIO_OUT_Init+0x8c>)
 80005a4:	f000 f946 	bl	8000834 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80005a8:	6838      	ldr	r0, [r7, #0]
 80005aa:	f000 fa0b 	bl	80009c4 <I2S3_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10e      	bne.n	80005dc <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <AUDIO_OUT_Init+0x94>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	2094      	movs	r0, #148	@ 0x94
 80005c4:	4798      	blx	r3
 80005c6:	4603      	mov	r3, r0
 80005c8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80005cc:	2be0      	cmp	r3, #224	@ 0xe0
 80005ce:	d103      	bne.n	80005d8 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <AUDIO_OUT_Init+0x98>)
 80005d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <AUDIO_OUT_Init+0x94>)
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	e001      	b.n	80005dc <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d107      	bne.n	80005f2 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <AUDIO_OUT_Init+0x98>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	797a      	ldrb	r2, [r7, #5]
 80005ea:	88f9      	ldrh	r1, [r7, #6]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2094      	movs	r0, #148	@ 0x94
 80005f0:	47a0      	blx	r4
  }
  
  return ret;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd90      	pop	{r4, r7, pc}
 80005fc:	200000d4 	.word	0x200000d4
 8000600:	40003c00 	.word	0x40003c00
 8000604:	20000004 	.word	0x20000004
 8000608:	200000d0 	.word	0x200000d0

0800060c <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <AUDIO_OUT_Play+0x4c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	b292      	uxth	r2, r2
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	2094      	movs	r0, #148	@ 0x94
 8000624:	4798      	blx	r3
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	e00f      	b.n	8000650 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000636:	d203      	bcs.n	8000640 <AUDIO_OUT_Play+0x34>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	e001      	b.n	8000644 <AUDIO_OUT_Play+0x38>
 8000640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000644:	461a      	mov	r2, r3
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <AUDIO_OUT_Play+0x50>)
 800064a:	f004 fbb7 	bl	8004dbc <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800064e:	2300      	movs	r3, #0
  }
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000d0 	.word	0x200000d0
 800065c:	200000d4 	.word	0x200000d4

08000660 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <AUDIO_OUT_Pause+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	2094      	movs	r0, #148	@ 0x94
 800066c:	4798      	blx	r3
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e003      	b.n	8000680 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <AUDIO_OUT_Pause+0x28>)
 800067a:	f004 fc43 	bl	8004f04 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800067e:	2300      	movs	r3, #0
  }
}
 8000680:	4618      	mov	r0, r3
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000d0 	.word	0x200000d0
 8000688:	200000d4 	.word	0x200000d4

0800068c <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <AUDIO_OUT_Resume+0x24>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	2094      	movs	r0, #148	@ 0x94
 8000698:	4798      	blx	r3
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e003      	b.n	80006ac <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <AUDIO_OUT_Resume+0x28>)
 80006a6:	f004 fc8f 	bl	8004fc8 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006aa:	2300      	movs	r3, #0
  }
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	200000d4 	.word	0x200000d4

080006b8 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80006c0:	480e      	ldr	r0, [pc, #56]	@ (80006fc <AUDIO_OUT_Stop+0x44>)
 80006c2:	f004 fd15 	bl	80050f0 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <AUDIO_OUT_Stop+0x48>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	2094      	movs	r0, #148	@ 0x94
 80006d0:	4798      	blx	r3
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	e00b      	b.n	80006f4 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d107      	bne.n	80006f2 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f002 f9a2 	bl	8002a2c <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <AUDIO_OUT_Stop+0x4c>)
 80006ee:	f003 f991 	bl	8003a14 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006f2:	2300      	movs	r3, #0
  }
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000d4 	.word	0x200000d4
 8000700:	200000d0 	.word	0x200000d0
 8000704:	40020c00 	.word	0x40020c00

08000708 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <AUDIO_OUT_SetVolume+0x2c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	4611      	mov	r1, r2
 800071c:	2094      	movs	r0, #148	@ 0x94
 800071e:	4798      	blx	r3
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800072a:	2300      	movs	r3, #0
  }
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000d0 	.word	0x200000d0

08000738 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <HAL_I2S_TxCpltCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800074a:	f002 f8db 	bl	8002904 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40003c00 	.word	0x40003c00

0800075c <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <HAL_I2S_TxHalfCpltCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 800076e:	f002 f8dd 	bl	800292c <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40003c00 	.word	0x40003c00

08000780 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000792:	23ff      	movs	r3, #255	@ 0xff
 8000794:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
  for(index = 0; index < 8; index++)
 8000798:	2300      	movs	r3, #0
 800079a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800079e:	e010      	b.n	80007c2 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80007a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007a4:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <AUDIO_OUT_ClockConfig+0xa8>)
 80007a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d103      	bne.n	80007b8 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80007b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  for(index = 0; index < 8; index++)
 80007b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007bc:	3301      	adds	r3, #1
 80007be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d9ea      	bls.n	80007a0 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 fffc 	bl	80067cc <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80007d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007d8:	f003 0307 	and.w	r3, r3, #7
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d113      	bne.n	8000808 <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007e0:	2301      	movs	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
    //rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80007e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007e8:	4a10      	ldr	r2, [pc, #64]	@ (800082c <AUDIO_OUT_ClockConfig+0xac>)
 80007ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ee:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80007f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <AUDIO_OUT_ClockConfig+0xb0>)
 80007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fa:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4618      	mov	r0, r3
 8000802:	f005 ff01 	bl	8006608 <HAL_RCCEx_PeriphCLKConfig>
    //rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000806:	e00b      	b.n	8000820 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000808:	2301      	movs	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800080c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000810:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000812:	2303      	movs	r3, #3
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4618      	mov	r0, r3
 800081c:	f005 fef4 	bl	8006608 <HAL_RCCEx_PeriphCLKConfig>
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	0800f3d0 	.word	0x0800f3d0
 800082c:	0800f3f0 	.word	0x0800f3f0
 8000830:	0800f410 	.word	0x0800f410

08000834 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	@ 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b56      	ldr	r3, [pc, #344]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	4a55      	ldr	r2, [pc, #340]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b4f      	ldr	r3, [pc, #316]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a4e      	ldr	r2, [pc, #312]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b4c      	ldr	r3, [pc, #304]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b48      	ldr	r3, [pc, #288]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a47      	ldr	r2, [pc, #284]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b45      	ldr	r3, [pc, #276]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8000892:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80008a0:	2302      	movs	r3, #2
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80008a4:	2306      	movs	r3, #6
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	483c      	ldr	r0, [pc, #240]	@ (80009a0 <AUDIO_OUT_MspInit+0x16c>)
 80008b0:	f002 fe00 	bl	80034b4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80008b4:	2310      	movs	r3, #16
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4839      	ldr	r0, [pc, #228]	@ (80009a4 <AUDIO_OUT_MspInit+0x170>)
 80008c0:	f002 fdf8 	bl	80034b4 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4b34      	ldr	r3, [pc, #208]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	4a33      	ldr	r2, [pc, #204]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d4:	4b31      	ldr	r3, [pc, #196]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	482d      	ldr	r0, [pc, #180]	@ (80009a0 <AUDIO_OUT_MspInit+0x16c>)
 80008ec:	f002 fde2 	bl	80034b4 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f8:	4a28      	ldr	r2, [pc, #160]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 80008fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000900:	4b26      	ldr	r3, [pc, #152]	@ (800099c <AUDIO_OUT_MspInit+0x168>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a25      	ldr	r2, [pc, #148]	@ (80009a8 <AUDIO_OUT_MspInit+0x174>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d136      	bne.n	8000984 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000916:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800091c:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 800091e:	2240      	movs	r2, #64	@ 0x40
 8000920:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000922:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 800092a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092e:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000936:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000938:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 800093a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800093e:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000948:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800094c:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000950:	2204      	movs	r2, #4
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000956:	2203      	movs	r2, #3
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000962:	2200      	movs	r2, #0
 8000964:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000968:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <AUDIO_OUT_MspInit+0x17c>)
 800096a:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000970:	639a      	str	r2, [r3, #56]	@ 0x38
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 800097a:	f002 fa0b 	bl	8002d94 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 800097e:	480b      	ldr	r0, [pc, #44]	@ (80009ac <AUDIO_OUT_MspInit+0x178>)
 8000980:	f002 f95a 	bl	8002c38 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	210e      	movs	r1, #14
 8000988:	202f      	movs	r0, #47	@ 0x2f
 800098a:	f002 f92b 	bl	8002be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 800098e:	202f      	movs	r0, #47	@ 0x2f
 8000990:	f002 f944 	bl	8002c1c <HAL_NVIC_EnableIRQ>
}
 8000994:	bf00      	nop
 8000996:	3730      	adds	r7, #48	@ 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40003c00 	.word	0x40003c00
 80009ac:	2000011c 	.word	0x2000011c
 80009b0:	400260b8 	.word	0x400260b8

080009b4 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <I2S3_Init+0x68>)
 80009ce:	4a18      	ldr	r2, [pc, #96]	@ (8000a30 <I2S3_Init+0x6c>)
 80009d0:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <I2S3_Init+0x68>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	69da      	ldr	r2, [r3, #28]
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <I2S3_Init+0x68>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80009e0:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80009e2:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <I2S3_Init+0x68>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80009e8:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <I2S3_Init+0x68>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <I2S3_Init+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <I2S3_Init+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <I2S3_Init+0x68>)
 80009fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a00:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <I2S3_Init+0x68>)
 8000a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a08:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <I2S3_Init+0x68>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000a10:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <I2S3_Init+0x68>)
 8000a12:	f004 f893 	bl	8004b3c <HAL_I2S_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000a20:	2300      	movs	r3, #0
  }
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000d4 	.word	0x200000d4
 8000a30:	40003c00 	.word	0x40003c00

08000a34 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <HAL_I2S_ErrorCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a46:	f7ff ffb5 	bl	80009b4 <AUDIO_OUT_Error_CallBack>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40003c00 	.word	0x40003c00

08000a58 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a5c:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a5e:	f003 fcab 	bl	80043b8 <HAL_I2C_GetState>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d121      	bne.n	8000aac <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <I2Cx_Init+0x5c>)
 8000a6c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a70:	2243      	movs	r2, #67	@ 0x43
 8000a72:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a76:	4a10      	ldr	r2, [pc, #64]	@ (8000ab8 <I2Cx_Init+0x60>)
 8000a78:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000aa0:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000aa2:	f000 f86b 	bl	8000b7c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000aa6:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <I2Cx_Init+0x58>)
 8000aa8:	f002 ffe6 	bl	8003a78 <HAL_I2C_Init>
  }
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000017c 	.word	0x2000017c
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	717b      	strb	r3, [r7, #5]
 8000aca:	4613      	mov	r3, r2
 8000acc:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000ad2:	797b      	ldrb	r3, [r7, #5]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <I2Cx_WriteData+0x48>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	88f9      	ldrh	r1, [r7, #6]
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <I2Cx_WriteData+0x4c>)
 8000aea:	f003 f939 	bl	8003d60 <HAL_I2C_Mem_Write>
 8000aee:	4603      	mov	r3, r0
 8000af0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000af8:	f000 f834 	bl	8000b64 <I2Cx_Error>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	2000017c 	.word	0x2000017c

08000b0c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000b24:	797b      	ldrb	r3, [r7, #5]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <I2Cx_ReadData+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	88f9      	ldrh	r1, [r7, #6]
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	2301      	movs	r3, #1
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	f107 030e 	add.w	r3, r7, #14
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4808      	ldr	r0, [pc, #32]	@ (8000b60 <I2Cx_ReadData+0x54>)
 8000b3e:	f003 fa09 	bl	8003f54 <HAL_I2C_Mem_Read>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b4c:	f000 f80a 	bl	8000b64 <I2Cx_Error>
  }
  return value;
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	2000017c 	.word	0x2000017c

08000b64 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <I2Cx_Error+0x14>)
 8000b6a:	f003 f8c9 	bl	8003d00 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b6e:	f7ff ff73 	bl	8000a58 <I2Cx_Init>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000017c 	.word	0x2000017c

08000b7c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	4a24      	ldr	r2, [pc, #144]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000bbc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000bc2:	2312      	movs	r3, #18
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4812      	ldr	r0, [pc, #72]	@ (8000c24 <I2Cx_MspInit+0xa8>)
 8000bda:	f002 fc6b 	bl	80034b4 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000be0:	6a1b      	ldr	r3, [r3, #32]
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be8:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000bec:	6a1b      	ldr	r3, [r3, #32]
 8000bee:	4a0c      	ldr	r2, [pc, #48]	@ (8000c20 <I2Cx_MspInit+0xa4>)
 8000bf0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	201f      	movs	r0, #31
 8000bfc:	f001 fff2 	bl	8002be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000c00:	201f      	movs	r0, #31
 8000c02:	f002 f80b 	bl	8002c1c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	210f      	movs	r1, #15
 8000c0a:	2020      	movs	r0, #32
 8000c0c:	f001 ffea 	bl	8002be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000c10:	2020      	movs	r0, #32
 8000c12:	f002 f803 	bl	8002c1c <HAL_NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400

08000c28 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <AUDIO_IO_Init+0x68>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a16      	ldr	r2, [pc, #88]	@ (8000c90 <AUDIO_IO_Init+0x68>)
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <AUDIO_IO_Init+0x68>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <AUDIO_IO_Init+0x6c>)
 8000c60:	f002 fc28 	bl	80034b4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c64:	f7ff fef8 	bl	8000a58 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <AUDIO_IO_Init+0x6c>)
 8000c6e:	f002 fed1 	bl	8003a14 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c72:	2005      	movs	r0, #5
 8000c74:	f001 feda 	bl	8002a2c <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <AUDIO_IO_Init+0x6c>)
 8000c7e:	f002 fec9 	bl	8003a14 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c82:	2005      	movs	r0, #5
 8000c84:	f001 fed2 	bl	8002a2c <HAL_Delay>
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	71bb      	strb	r3, [r7, #6]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	797a      	ldrb	r2, [r7, #5]
 8000cbe:	79b9      	ldrb	r1, [r7, #6]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fefb 	bl	8000abc <I2Cx_WriteData>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff10 	bl	8000b0c <I2Cx_ReadData>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <AUDIO_StorageParse>:

//USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	@ 0x50
 8000cfc:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  FILINFO fno;
  DIR dir;
  char *fn;

  myprintf("Parsing SD card for WAV files...\r\n");
 8000d04:	484a      	ldr	r0, [pc, #296]	@ (8000e30 <AUDIO_StorageParse+0x138>)
 8000d06:	f001 f96b 	bl	8001fe0 <myprintf>

  res = f_opendir(&dir, "");
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4949      	ldr	r1, [pc, #292]	@ (8000e34 <AUDIO_StorageParse+0x13c>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00d fa5b 	bl	800e1ca <f_opendir>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  if (res != FR_OK) {
 8000d1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d008      	beq.n	8000d34 <AUDIO_StorageParse+0x3c>
      myprintf("Failed to open root directory! Error: %d\r\n", res);
 8000d22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d26:	4619      	mov	r1, r3
 8000d28:	4843      	ldr	r0, [pc, #268]	@ (8000e38 <AUDIO_StorageParse+0x140>)
 8000d2a:	f001 f959 	bl	8001fe0 <myprintf>
      return res;
 8000d2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d32:	e078      	b.n	8000e26 <AUDIO_StorageParse+0x12e>
  }
  FileList.ptr = 0;
 8000d34:	4b41      	ldr	r3, [pc, #260]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000d3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d15f      	bne.n	8000e04 <AUDIO_StorageParse+0x10c>
  {
    while(1)
    {
      res = f_readdir(&dir, &fno);
 8000d44:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00d fad5 	bl	800e2fc <f_readdir>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      if(res != FR_OK || fno.fname[0] == 0)
 8000d58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d151      	bne.n	8000e04 <AUDIO_StorageParse+0x10c>
 8000d60:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d04d      	beq.n	8000e04 <AUDIO_StorageParse+0x10c>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000d68:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d6e:	d047      	beq.n	8000e00 <AUDIO_StorageParse+0x108>
      {
        continue;
      }

      fn = fno.fname;
 8000d70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d74:	3309      	adds	r3, #9
 8000d76:	64bb      	str	r3, [r7, #72]	@ 0x48

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d78:	4b30      	ldr	r3, [pc, #192]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000d7a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d7e:	2b17      	cmp	r3, #23
 8000d80:	d8e0      	bhi.n	8000d44 <AUDIO_StorageParse+0x4c>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d82:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1da      	bne.n	8000d44 <AUDIO_StorageParse+0x4c>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d8e:	492c      	ldr	r1, [pc, #176]	@ (8000e40 <AUDIO_StorageParse+0x148>)
 8000d90:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000d92:	f00d fba0 	bl	800e4d6 <strstr>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <AUDIO_StorageParse+0xb2>
 8000d9c:	4929      	ldr	r1, [pc, #164]	@ (8000e44 <AUDIO_StorageParse+0x14c>)
 8000d9e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000da0:	f00d fb99 	bl	800e4d6 <strstr>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0cc      	beq.n	8000d44 <AUDIO_StorageParse+0x4c>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000daa:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000dac:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000db0:	461a      	mov	r2, r3
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	2228      	movs	r2, #40	@ 0x28
 8000dc4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f00d fb72 	bl	800e4b0 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000dce:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4919      	ldr	r1, [pc, #100]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
            myprintf("Found WAV file: %s\r\n", fn);
 8000de6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000de8:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <AUDIO_StorageParse+0x150>)
 8000dea:	f001 f8f9 	bl	8001fe0 <myprintf>
            FileList.ptr++;
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000df0:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000df4:	3301      	adds	r3, #1
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000dfa:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000dfe:	e7a1      	b.n	8000d44 <AUDIO_StorageParse+0x4c>
        continue;
 8000e00:	bf00      	nop
      res = f_readdir(&dir, &fno);
 8000e02:	e79f      	b.n	8000d44 <AUDIO_StorageParse+0x4c>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <AUDIO_StorageParse+0x144>)
 8000e06:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <AUDIO_StorageParse+0x154>)
 8000e0c:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00d fa4d 	bl	800e2b0 <f_closedir>
  myprintf("Total WAV files found: %d\r\n", NumObs);
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <AUDIO_StorageParse+0x154>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <AUDIO_StorageParse+0x158>)
 8000e1e:	f001 f8df 	bl	8001fe0 <myprintf>
  return res;
 8000e22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3750      	adds	r7, #80	@ 0x50
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	0800ee0c 	.word	0x0800ee0c
 8000e34:	0800ee30 	.word	0x0800ee30
 8000e38:	0800ee34 	.word	0x0800ee34
 8000e3c:	20001718 	.word	0x20001718
 8000e40:	0800ee60 	.word	0x0800ee60
 8000e44:	0800ee64 	.word	0x0800ee64
 8000e48:	0800ee68 	.word	0x0800ee68
 8000e4c:	20000402 	.word	0x20000402
 8000e50:	0800ee80 	.word	0x0800ee80

08000e54 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000e58:	f7ff ff4e 	bl	8000cf8 <AUDIO_StorageParse>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <AUDIO_GetWavObjectNumber+0x14>
 8000e62:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <AUDIO_GetWavObjectNumber+0x1c>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	e001      	b.n	8000e6c <AUDIO_GetWavObjectNumber+0x18>
	else return -1;
 8000e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000402 	.word	0x20000402

08000e74 <Mount_SD>:

void Mount_SD (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "", 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	490c      	ldr	r1, [pc, #48]	@ (8000eac <Mount_SD+0x38>)
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <Mount_SD+0x3c>)
 8000e7e:	f00c fa3f 	bl	800d300 <f_mount>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <Mount_SD+0x40>)
 8000e88:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK) {
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <Mount_SD+0x40>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <Mount_SD+0x2c>
	    myprintf("SD card mount failed with error code: %d\r\n", fresult);
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <Mount_SD+0x40>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <Mount_SD+0x44>)
 8000e9a:	f001 f8a1 	bl	8001fe0 <myprintf>
	} else {
	    myprintf("SD card mounted Successfully.!\r\n");
	}
}
 8000e9e:	e002      	b.n	8000ea6 <Mount_SD+0x32>
	    myprintf("SD card mounted Successfully.!\r\n");
 8000ea0:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <Mount_SD+0x48>)
 8000ea2:	f001 f89d 	bl	8001fe0 <myprintf>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	0800ee30 	.word	0x0800ee30
 8000eb0:	200001d0 	.word	0x200001d0
 8000eb4:	20000400 	.word	0x20000400
 8000eb8:	0800ee9c 	.word	0x0800ee9c
 8000ebc:	0800eec8 	.word	0x0800eec8

08000ec0 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4603      	mov	r3, r0
 8000eca:	81fb      	strh	r3, [r7, #14]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	81bb      	strh	r3, [r7, #12]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000ed8:	f7ff fea6 	bl	8000c28 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000edc:	89fb      	ldrh	r3, [r7, #14]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fb01 	bl	80014ec <CODEC_IO_Write>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000ef4:	89bb      	ldrh	r3, [r7, #12]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d81b      	bhi.n	8000f34 <cs43l22_Init+0x74>
 8000efc:	a201      	add	r2, pc, #4	@ (adr r2, 8000f04 <cs43l22_Init+0x44>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f1d 	.word	0x08000f1d
 8000f0c:	08000f25 	.word	0x08000f25
 8000f10:	08000f2d 	.word	0x08000f2d
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000f14:	4b5b      	ldr	r3, [pc, #364]	@ (8001084 <cs43l22_Init+0x1c4>)
 8000f16:	22fa      	movs	r2, #250	@ 0xfa
 8000f18:	701a      	strb	r2, [r3, #0]
    break;
 8000f1a:	e00f      	b.n	8000f3c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000f1c:	4b59      	ldr	r3, [pc, #356]	@ (8001084 <cs43l22_Init+0x1c4>)
 8000f1e:	22af      	movs	r2, #175	@ 0xaf
 8000f20:	701a      	strb	r2, [r3, #0]
    break;
 8000f22:	e00b      	b.n	8000f3c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000f24:	4b57      	ldr	r3, [pc, #348]	@ (8001084 <cs43l22_Init+0x1c4>)
 8000f26:	22aa      	movs	r2, #170	@ 0xaa
 8000f28:	701a      	strb	r2, [r3, #0]
    break;
 8000f2a:	e007      	b.n	8000f3c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000f2c:	4b55      	ldr	r3, [pc, #340]	@ (8001084 <cs43l22_Init+0x1c4>)
 8000f2e:	2205      	movs	r2, #5
 8000f30:	701a      	strb	r2, [r3, #0]
    break;    
 8000f32:	e003      	b.n	8000f3c <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000f34:	4b53      	ldr	r3, [pc, #332]	@ (8001084 <cs43l22_Init+0x1c4>)
 8000f36:	2205      	movs	r2, #5
 8000f38:	701a      	strb	r2, [r3, #0]
    break;    
 8000f3a:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4a50      	ldr	r2, [pc, #320]	@ (8001084 <cs43l22_Init+0x1c4>)
 8000f42:	7812      	ldrb	r2, [r2, #0]
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	2104      	movs	r1, #4
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 facf 	bl	80014ec <CODEC_IO_Write>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4413      	add	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2281      	movs	r2, #129	@ 0x81
 8000f5e:	2105      	movs	r1, #5
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fac3 	bl	80014ec <CODEC_IO_Write>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2204      	movs	r2, #4
 8000f76:	2106      	movs	r1, #6
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fab7 	bl	80014ec <CODEC_IO_Write>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	4413      	add	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000f88:	7afa      	ldrb	r2, [r7, #11]
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f964 	bl	800125c <cs43l22_SetVolume>
 8000f94:	4602      	mov	r2, r0
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	4413      	add	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000f9c:	89bb      	ldrh	r3, [r7, #12]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d023      	beq.n	8000fea <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2206      	movs	r2, #6
 8000fa8:	210f      	movs	r1, #15
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fa9e 	bl	80014ec <CODEC_IO_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2124      	movs	r1, #36	@ 0x24
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fa92 	bl	80014ec <CODEC_IO_Write>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2125      	movs	r1, #37	@ 0x25
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fa86 	bl	80014ec <CODEC_IO_Write>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	210a      	movs	r1, #10
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fa7a 	bl	80014ec <CODEC_IO_Write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4413      	add	r3, r2
 8001000:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2204      	movs	r2, #4
 8001008:	210e      	movs	r1, #14
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fa6e 	bl	80014ec <CODEC_IO_Write>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	4413      	add	r3, r2
 8001018:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2200      	movs	r2, #0
 8001020:	2127      	movs	r1, #39	@ 0x27
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fa62 	bl	80014ec <CODEC_IO_Write>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	4413      	add	r3, r2
 8001030:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	220f      	movs	r2, #15
 8001038:	211f      	movs	r1, #31
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa56 	bl	80014ec <CODEC_IO_Write>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	220a      	movs	r2, #10
 8001050:	211a      	movs	r1, #26
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa4a 	bl	80014ec <CODEC_IO_Write>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	4413      	add	r3, r2
 8001060:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	220a      	movs	r2, #10
 8001068:	211b      	movs	r1, #27
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fa3e 	bl	80014ec <CODEC_IO_Write>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	4413      	add	r3, r2
 8001078:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800107a:	697b      	ldr	r3, [r7, #20]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000404 	.word	0x20000404

08001088 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800108c:	f7ff fe04 	bl	8000c98 <AUDIO_IO_DeInit>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 800109e:	f7ff fdc3 	bl	8000c28 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2101      	movs	r1, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe10 	bl	8000cce <AUDIO_IO_Read>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f023 0307 	bic.w	r3, r3, #7
 80010b8:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	80fb      	strh	r3, [r7, #6]
 80010d0:	4613      	mov	r3, r2
 80010d2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <cs43l22_Play+0x70>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d123      	bne.n	8001128 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2206      	movs	r2, #6
 80010e6:	210e      	movs	r1, #14
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f9ff 	bl	80014ec <CODEC_IO_Write>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f919 	bl	8001334 <cs43l22_SetMute>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	229e      	movs	r2, #158	@ 0x9e
 8001110:	2102      	movs	r1, #2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f9ea 	bl	80014ec <CODEC_IO_Write>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001122:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <cs43l22_Play+0x70>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001128:	68fb      	ldr	r3, [r7, #12]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000034 	.word	0x20000034

08001138 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f8f2 	bl	8001334 <cs43l22_SetMute>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2201      	movs	r2, #1
 800115e:	2102      	movs	r1, #2
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f9c3 	bl	80014ec <CODEC_IO_Write>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f8ce 	bl	8001334 <cs43l22_SetMute>
 8001198:	4602      	mov	r2, r0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	e002      	b.n	80011ac <cs43l22_Resume+0x30>
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3301      	adds	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80011b0:	d9f9      	bls.n	80011a6 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <cs43l22_Resume+0x74>)
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	2104      	movs	r1, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f994 	bl	80014ec <CODEC_IO_Write>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	229e      	movs	r2, #158	@ 0x9e
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f988 	bl	80014ec <CODEC_IO_Write>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000404 	.word	0x20000404

080011f4 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	2101      	movs	r1, #1
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f893 	bl	8001334 <cs43l22_SetMute>
 800120e:	4602      	mov	r2, r0
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2204      	movs	r2, #4
 800121c:	210e      	movs	r1, #14
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f964 	bl	80014ec <CODEC_IO_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	229f      	movs	r2, #159	@ 0x9f
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f958 	bl	80014ec <CODEC_IO_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <cs43l22_Stop+0x64>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
  return counter;    
 800124c:	68fb      	ldr	r3, [r7, #12]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000034 	.word	0x20000034

0800125c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	4613      	mov	r3, r2
 800126a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001270:	797b      	ldrb	r3, [r7, #5]
 8001272:	2b64      	cmp	r3, #100	@ 0x64
 8001274:	d80b      	bhi.n	800128e <cs43l22_SetVolume+0x32>
 8001276:	797a      	ldrb	r2, [r7, #5]
 8001278:	4613      	mov	r3, r2
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	4a25      	ldr	r2, [pc, #148]	@ (8001314 <cs43l22_SetVolume+0xb8>)
 8001280:	fb82 1203 	smull	r1, r2, r2, r3
 8001284:	1152      	asrs	r2, r2, #5
 8001286:	17db      	asrs	r3, r3, #31
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	e000      	b.n	8001290 <cs43l22_SetVolume+0x34>
 800128e:	23ff      	movs	r3, #255	@ 0xff
 8001290:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	2be6      	cmp	r3, #230	@ 0xe6
 8001296:	d91c      	bls.n	80012d2 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	b2d8      	uxtb	r0, r3
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	3319      	adds	r3, #25
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	2120      	movs	r1, #32
 80012a6:	f000 f921 	bl	80014ec <CODEC_IO_Write>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	b2d8      	uxtb	r0, r3
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	3319      	adds	r3, #25
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	2121      	movs	r1, #33	@ 0x21
 80012c2:	f000 f913 	bl	80014ec <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e01b      	b.n	800130a <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	b2d8      	uxtb	r0, r3
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	3319      	adds	r3, #25
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	2120      	movs	r1, #32
 80012e0:	f000 f904 	bl	80014ec <CODEC_IO_Write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	3319      	adds	r3, #25
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	2121      	movs	r1, #33	@ 0x21
 80012fc:	f000 f8f6 	bl	80014ec <CODEC_IO_Write>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	51eb851f 	.word	0x51eb851f

08001318 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d124      	bne.n	8001394 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	22ff      	movs	r2, #255	@ 0xff
 8001350:	2104      	movs	r1, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f8ca 	bl	80014ec <CODEC_IO_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2201      	movs	r2, #1
 8001368:	2122      	movs	r1, #34	@ 0x22
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f8be 	bl	80014ec <CODEC_IO_Write>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2201      	movs	r2, #1
 8001380:	2123      	movs	r1, #35	@ 0x23
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f8b2 	bl	80014ec <CODEC_IO_Write>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e025      	b.n	80013e0 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2200      	movs	r2, #0
 800139a:	2122      	movs	r1, #34	@ 0x22
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f8a5 	bl	80014ec <CODEC_IO_Write>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	2123      	movs	r1, #35	@ 0x23
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f899 	bl	80014ec <CODEC_IO_Write>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4a08      	ldr	r2, [pc, #32]	@ (80013ec <cs43l22_SetMute+0xb8>)
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	2104      	movs	r1, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f88b 	bl	80014ec <CODEC_IO_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000404 	.word	0x20000404

080013f0 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	80fb      	strh	r3, [r7, #6]
 80013fc:	4613      	mov	r3, r2
 80013fe:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001404:	797b      	ldrb	r3, [r7, #5]
 8001406:	3b01      	subs	r3, #1
 8001408:	2b03      	cmp	r3, #3
 800140a:	d84b      	bhi.n	80014a4 <cs43l22_SetOutputMode+0xb4>
 800140c:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <cs43l22_SetOutputMode+0x24>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	08001445 	.word	0x08001445
 800141c:	08001465 	.word	0x08001465
 8001420:	08001485 	.word	0x08001485
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	22fa      	movs	r2, #250	@ 0xfa
 800142a:	2104      	movs	r1, #4
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f85d 	bl	80014ec <CODEC_IO_Write>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <cs43l22_SetOutputMode+0xe0>)
 800143e:	22fa      	movs	r2, #250	@ 0xfa
 8001440:	701a      	strb	r2, [r3, #0]
      break;
 8001442:	e03f      	b.n	80014c4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	22af      	movs	r2, #175	@ 0xaf
 800144a:	2104      	movs	r1, #4
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f84d 	bl	80014ec <CODEC_IO_Write>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <cs43l22_SetOutputMode+0xe0>)
 800145e:	22af      	movs	r2, #175	@ 0xaf
 8001460:	701a      	strb	r2, [r3, #0]
      break;
 8001462:	e02f      	b.n	80014c4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	22aa      	movs	r2, #170	@ 0xaa
 800146a:	2104      	movs	r1, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f83d 	bl	80014ec <CODEC_IO_Write>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <cs43l22_SetOutputMode+0xe0>)
 800147e:	22aa      	movs	r2, #170	@ 0xaa
 8001480:	701a      	strb	r2, [r3, #0]
      break;
 8001482:	e01f      	b.n	80014c4 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2205      	movs	r2, #5
 800148a:	2104      	movs	r1, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f82d 	bl	80014ec <CODEC_IO_Write>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4413      	add	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <cs43l22_SetOutputMode+0xe0>)
 800149e:	2205      	movs	r2, #5
 80014a0:	701a      	strb	r2, [r3, #0]
      break;    
 80014a2:	e00f      	b.n	80014c4 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2205      	movs	r2, #5
 80014aa:	2104      	movs	r1, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f81d 	bl	80014ec <CODEC_IO_Write>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <cs43l22_SetOutputMode+0xe0>)
 80014be:	2205      	movs	r2, #5
 80014c0:	701a      	strb	r2, [r3, #0]
      break;
 80014c2:	bf00      	nop
  }  
  return counter;
 80014c4:	68fb      	ldr	r3, [r7, #12]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000404 	.word	0x20000404

080014d4 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	460b      	mov	r3, r1
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	4613      	mov	r3, r2
 80014fc:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001502:	797a      	ldrb	r2, [r7, #5]
 8001504:	79b9      	ldrb	r1, [r7, #6]
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fbcc 	bl	8000ca6 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	b2db      	uxtb	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <LogOperation>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LogOperation(const char *format, ...){
 800151c:	b40f      	push	{r0, r1, r2, r3}
 800151e:	b580      	push	{r7, lr}
 8001520:	b0a2      	sub	sp, #136	@ 0x88
 8001522:	af00      	add	r7, sp, #0
	LogMessage msg;
	va_list args;
	va_start(args, format);
 8001524:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001528:	607b      	str	r3, [r7, #4]
	vsnprintf(msg.message, sizeof(msg.message), format, args);
 800152a:	f107 0008 	add.w	r0, r7, #8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	f00c ffa5 	bl	800e484 <vsniprintf>
	va_end(args);
	if (xQueueSend(logQueue, &msg, pdMS_TO_TICKS(100)) != pdPASS){
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <LogOperation+0x48>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f107 0108 	add.w	r1, r7, #8
 8001542:	2300      	movs	r3, #0
 8001544:	2264      	movs	r2, #100	@ 0x64
 8001546:	f007 fbc7 	bl	8008cd8 <xQueueGenericSend>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <LogOperation+0x3a>
		myprintf("Failed to send log message!\r\n");
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <LogOperation+0x4c>)
 8001552:	f000 fd45 	bl	8001fe0 <myprintf>
	}
}
 8001556:	bf00      	nop
 8001558:	3788      	adds	r7, #136	@ 0x88
 800155a:	46bd      	mov	sp, r7
 800155c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001560:	b004      	add	sp, #16
 8001562:	4770      	bx	lr
 8001564:	200005b0 	.word	0x200005b0
 8001568:	0800ef40 	.word	0x0800ef40

0800156c <PrintLogFile>:

void PrintLogFile(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	f5ad 7d2e 	sub.w	sp, sp, #696	@ 0x2b8
 8001572:	af00      	add	r7, sp, #0
	FIL logFile;
	FRESULT fr;
	UINT br;
	char buffer[128];
	xSemaphoreTake(fatfsMutex, portMAX_DELAY);
 8001574:	4b31      	ldr	r3, [pc, #196]	@ (800163c <PrintLogFile+0xd0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	4618      	mov	r0, r3
 800157e:	f007 fe2b 	bl	80091d8 <xQueueSemaphoreTake>
	// Open log.txt for reading
	fr = f_open(&logFile, "log.txt", FA_READ);
 8001582:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001586:	2201      	movs	r2, #1
 8001588:	492d      	ldr	r1, [pc, #180]	@ (8001640 <PrintLogFile+0xd4>)
 800158a:	4618      	mov	r0, r3
 800158c:	f00b fefe 	bl	800d38c <f_open>
 8001590:	4603      	mov	r3, r0
 8001592:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
	if (fr != FR_OK) {
 8001596:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00d      	beq.n	80015ba <PrintLogFile+0x4e>
		myprintf("Failed to open log.txt (Error: %d)\r\n", fr);
 800159e:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4827      	ldr	r0, [pc, #156]	@ (8001644 <PrintLogFile+0xd8>)
 80015a6:	f000 fd1b 	bl	8001fe0 <myprintf>
		xSemaphoreGive(fatfsMutex);
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <PrintLogFile+0xd0>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	f007 fb90 	bl	8008cd8 <xQueueGenericSend>
 80015b8:	e03b      	b.n	8001632 <PrintLogFile+0xc6>
		return;
	}
	myprintf("Log file contents:\r\n");
 80015ba:	4823      	ldr	r0, [pc, #140]	@ (8001648 <PrintLogFile+0xdc>)
 80015bc:	f000 fd10 	bl	8001fe0 <myprintf>
	do {
		// Read up to 128 bytes from the log file
		fr = f_read(&logFile, buffer, sizeof(buffer) - 1, &br);
 80015c0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80015c4:	4639      	mov	r1, r7
 80015c6:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80015ca:	227f      	movs	r2, #127	@ 0x7f
 80015cc:	f00c f898 	bl	800d700 <f_read>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
		if (fr != FR_OK) {
 80015d6:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <PrintLogFile+0x80>
			myprintf("Error reading log.txt (Error: %d)\r\n", fr);
 80015de:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 80015e2:	4619      	mov	r1, r3
 80015e4:	4819      	ldr	r0, [pc, #100]	@ (800164c <PrintLogFile+0xe0>)
 80015e6:	f000 fcfb 	bl	8001fe0 <myprintf>
			break;
 80015ea:	e016      	b.n	800161a <PrintLogFile+0xae>
		}
		buffer[br] = '\0';
 80015ec:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80015f0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80015fa:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 80015fe:	2100      	movs	r1, #0
 8001600:	54d1      	strb	r1, [r2, r3]
		myprintf("%s", buffer);
 8001602:	463b      	mov	r3, r7
 8001604:	4619      	mov	r1, r3
 8001606:	4812      	ldr	r0, [pc, #72]	@ (8001650 <PrintLogFile+0xe4>)
 8001608:	f000 fcea 	bl	8001fe0 <myprintf>
	} while (br == sizeof(buffer) - 1);
 800160c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001610:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b7f      	cmp	r3, #127	@ 0x7f
 8001618:	d0d2      	beq.n	80015c0 <PrintLogFile+0x54>
	//Write your code here to close the log.txt file.
	f_close(&logFile);
 800161a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800161e:	4618      	mov	r0, r3
 8001620:	f00c fba0 	bl	800dd64 <f_close>
	xSemaphoreGive(fatfsMutex);
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <PrintLogFile+0xd0>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	f007 fb53 	bl	8008cd8 <xQueueGenericSend>
}
 8001632:	f507 772e 	add.w	r7, r7, #696	@ 0x2b8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200005ac 	.word	0x200005ac
 8001640:	0800ef60 	.word	0x0800ef60
 8001644:	0800ef68 	.word	0x0800ef68
 8001648:	0800ef90 	.word	0x0800ef90
 800164c:	0800efa8 	.word	0x0800efa8
 8001650:	0800efcc 	.word	0x0800efcc

08001654 <LogTask>:
void LogTask(void *pvParameters) {
 8001654:	b580      	push	{r7, lr}
 8001656:	f5ad 7d30 	sub.w	sp, sp, #704	@ 0x2c0
 800165a:	af00      	add	r7, sp, #0
 800165c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001660:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8001664:	6018      	str	r0, [r3, #0]
	FIL logFile;
	FRESULT fr;
	UINT bw;
	LogMessage logMsg;
	bool fileOpened = false;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf

	xSemaphoreTake(fatfsMutex, portMAX_DELAY);
 800166c:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <LogTask+0x15c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	4618      	mov	r0, r3
 8001676:	f007 fdaf 	bl	80091d8 <xQueueSemaphoreTake>
	// Open for writing, create if not exists
	fr = f_open(&logFile, "log.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800167a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800167e:	220a      	movs	r2, #10
 8001680:	494c      	ldr	r1, [pc, #304]	@ (80017b4 <LogTask+0x160>)
 8001682:	4618      	mov	r0, r3
 8001684:	f00b fe82 	bl	800d38c <f_open>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 32be 	strb.w	r3, [r7, #702]	@ 0x2be
	if (fr == FR_OK) {
 800168e:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 8001692:	2b00      	cmp	r3, #0
 8001694:	d108      	bne.n	80016a8 <LogTask+0x54>
		//Write your code here to close the log.txt file.
		myprintf("Log file cleared.\r\n");
 8001696:	4848      	ldr	r0, [pc, #288]	@ (80017b8 <LogTask+0x164>)
 8001698:	f000 fca2 	bl	8001fe0 <myprintf>
		f_close(&logFile);
 800169c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00c fb5f 	bl	800dd64 <f_close>
 80016a6:	e005      	b.n	80016b4 <LogTask+0x60>
	} else {
		myprintf("Failed to clear log file, error = %d\r\n", fr);
 80016a8:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 80016ac:	4619      	mov	r1, r3
 80016ae:	4843      	ldr	r0, [pc, #268]	@ (80017bc <LogTask+0x168>)
 80016b0:	f000 fc96 	bl	8001fe0 <myprintf>
	}
	xSemaphoreGive(fatfsMutex);
 80016b4:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <LogTask+0x15c>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	f007 fb0b 	bl	8008cd8 <xQueueGenericSend>

	for(;;){
		if (xQueueReceive(logQueue, &logMsg, portMAX_DELAY) == pdPASS) {
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <LogTask+0x16c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f107 0108 	add.w	r1, r7, #8
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	4618      	mov	r0, r3
 80016d0:	f007 fca0 	bl	8009014 <xQueueReceive>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d1f3      	bne.n	80016c2 <LogTask+0x6e>
			xSemaphoreTake(fatfsMutex, portMAX_DELAY);
 80016da:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <LogTask+0x15c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f04f 31ff 	mov.w	r1, #4294967295
 80016e2:	4618      	mov	r0, r3
 80016e4:	f007 fd78 	bl	80091d8 <xQueueSemaphoreTake>
			if(!fileOpened) {
 80016e8:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d01e      	beq.n	8001734 <LogTask+0xe0>
				// Open for appending
				fr = f_open(&logFile, "log.txt", FA_WRITE | FA_OPEN_APPEND);
 80016f6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80016fa:	2232      	movs	r2, #50	@ 0x32
 80016fc:	492d      	ldr	r1, [pc, #180]	@ (80017b4 <LogTask+0x160>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f00b fe44 	bl	800d38c <f_open>
 8001704:	4603      	mov	r3, r0
 8001706:	f887 32be 	strb.w	r3, [r7, #702]	@ 0x2be
				if (fr != FR_OK){
 800170a:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00d      	beq.n	800172e <LogTask+0xda>
					myprintf("LogTask: Failed to open log.txt, error = %d\r\n", fr);
 8001712:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 8001716:	4619      	mov	r1, r3
 8001718:	482a      	ldr	r0, [pc, #168]	@ (80017c4 <LogTask+0x170>)
 800171a:	f000 fc61 	bl	8001fe0 <myprintf>
					xSemaphoreGive(fatfsMutex);
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <LogTask+0x15c>)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	f007 fad6 	bl	8008cd8 <xQueueGenericSend>
					continue;
 800172c:	e03e      	b.n	80017ac <LogTask+0x158>
				}
				fileOpened = true;
 800172e:	2301      	movs	r3, #1
 8001730:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
			}
			// Write the log message to the file
			fr = f_write(&logFile, logMsg.message, strlen(logMsg.message), &bw);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fd49 	bl	80001d0 <strlen>
 800173e:	4602      	mov	r2, r0
 8001740:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001744:	f107 0108 	add.w	r1, r7, #8
 8001748:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 800174c:	f00c f917 	bl	800d97e <f_write>
 8001750:	4603      	mov	r3, r0
 8001752:	f887 32be 	strb.w	r3, [r7, #702]	@ 0x2be
			if (fr == FR_OK){
 8001756:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 800175a:	2b00      	cmp	r3, #0
 800175c:	d119      	bne.n	8001792 <LogTask+0x13e>
				f_sync(&logFile);
 800175e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001762:	4618      	mov	r0, r3
 8001764:	f00c fa80 	bl	800dc68 <f_sync>
				myprintf("LogTask: Wrote log entry.\r\n");
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <LogTask+0x174>)
 800176a:	f000 fc39 	bl	8001fe0 <myprintf>

				//Write your code here to close the log.txt file.
				f_close(&logFile);
 800176e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001772:	4618      	mov	r0, r3
 8001774:	f00c faf6 	bl	800dd64 <f_close>
				fileOpened = false;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
				xSemaphoreGive(fatfsMutex);
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <LogTask+0x15c>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	f007 faa6 	bl	8008cd8 <xQueueGenericSend>
				PrintLogFile();
 800178c:	f7ff feee 	bl	800156c <PrintLogFile>
 8001790:	e797      	b.n	80016c2 <LogTask+0x6e>
			} else {
				myprintf("LogTask: f_write error: %d\r\n", fr);
 8001792:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <LogTask+0x178>)
 800179a:	f000 fc21 	bl	8001fe0 <myprintf>
				xSemaphoreGive(fatfsMutex);
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <LogTask+0x15c>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	f007 fa96 	bl	8008cd8 <xQueueGenericSend>
		if (xQueueReceive(logQueue, &logMsg, portMAX_DELAY) == pdPASS) {
 80017ac:	e789      	b.n	80016c2 <LogTask+0x6e>
 80017ae:	bf00      	nop
 80017b0:	200005ac 	.word	0x200005ac
 80017b4:	0800ef60 	.word	0x0800ef60
 80017b8:	0800efd0 	.word	0x0800efd0
 80017bc:	0800efe4 	.word	0x0800efe4
 80017c0:	200005b0 	.word	0x200005b0
 80017c4:	0800f00c 	.word	0x0800f00c
 80017c8:	0800f03c 	.word	0x0800f03c
 80017cc:	0800f058 	.word	0x0800f058

080017d0 <isButtonPressed>:
	}
}


bool isButtonPressed()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET;  // Active-low
 80017d4:	2101      	movs	r1, #1
 80017d6:	4805      	ldr	r0, [pc, #20]	@ (80017ec <isButtonPressed+0x1c>)
 80017d8:	f002 f904 	bl	80039e4 <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40020000 	.word	0x40020000

080017f0 <getButtonEvent>:
    DOUBLE_PRESS_state,    // Double press detected
    PRESS_ONCE_state,      // Handling the first press release
	WAIT_FOR_RELEASE
} ButtonState;

eButtonEvent getButtonEvent() {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0

    static ButtonState current_state = IDLE_state;
    static uint32_t button_down_ts = 0;
    static uint32_t button_up_ts = 0;

    uint32_t now = HAL_GetTick();
 80017f6:	f001 f90d 	bl	8002a14 <HAL_GetTick>
 80017fa:	60f8      	str	r0, [r7, #12]
    bool current_state_btn = isButtonPressed();  // Get the current state of the button
 80017fc:	f7ff ffe8 	bl	80017d0 <isButtonPressed>
 8001800:	4603      	mov	r3, r0
 8001802:	72fb      	strb	r3, [r7, #11]

    // FSM Logic
    switch (current_state) {
 8001804:	4b3e      	ldr	r3, [pc, #248]	@ (8001900 <getButtonEvent+0x110>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b06      	cmp	r3, #6
 800180a:	d86b      	bhi.n	80018e4 <getButtonEvent+0xf4>
 800180c:	a201      	add	r2, pc, #4	@ (adr r2, 8001814 <getButtonEvent+0x24>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	08001831 	.word	0x08001831
 8001818:	08001845 	.word	0x08001845
 800181c:	080018b3 	.word	0x080018b3
 8001820:	080018bd 	.word	0x080018bd
 8001824:	080018c7 	.word	0x080018c7
 8001828:	0800187b 	.word	0x0800187b
 800182c:	080018d1 	.word	0x080018d1
        case IDLE_state:
            if (current_state_btn) {
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d05a      	beq.n	80018ec <getButtonEvent+0xfc>
                // Button pressed
                button_down_ts = now;
 8001836:	4a33      	ldr	r2, [pc, #204]	@ (8001904 <getButtonEvent+0x114>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6013      	str	r3, [r2, #0]
                current_state = PRESSED_state;
 800183c:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <getButtonEvent+0x110>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001842:	e053      	b.n	80018ec <getButtonEvent+0xfc>

        case PRESSED_state:
            if (!current_state_btn) { // Button released
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <getButtonEvent+0x6e>
                button_up_ts = now;
 8001850:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <getButtonEvent+0x118>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6013      	str	r3, [r2, #0]
                current_state = PRESS_ONCE_state;
 8001856:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <getButtonEvent+0x110>)
 8001858:	2205      	movs	r2, #5
 800185a:	701a      	strb	r2, [r3, #0]
            } else { // if still pressing, check for long press
                uint32_t press_duration = now - button_down_ts;
                if (press_duration >= LONG_MILLIS_MIN)
                    current_state = LONG_PRESS_state;
            }
            break;
 800185c:	e048      	b.n	80018f0 <getButtonEvent+0x100>
                uint32_t press_duration = now - button_down_ts;
 800185e:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <getButtonEvent+0x114>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	603b      	str	r3, [r7, #0]
                if (press_duration >= LONG_MILLIS_MIN)
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <getButtonEvent+0x11c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d33e      	bcc.n	80018f0 <getButtonEvent+0x100>
                    current_state = LONG_PRESS_state;
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <getButtonEvent+0x110>)
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
            break;
 8001878:	e03a      	b.n	80018f0 <getButtonEvent+0x100>

        case PRESS_ONCE_state:
            if (!current_state_btn) {
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d011      	beq.n	80018aa <getButtonEvent+0xba>
                // Time between button releases
                uint32_t waiting_duration = now - button_up_ts;
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <getButtonEvent+0x118>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	607b      	str	r3, [r7, #4]
                if (waiting_duration >= DOUBLE_GAP_MILLIS_MAX) {
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <getButtonEvent+0x120>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d303      	bcc.n	80018a2 <getButtonEvent+0xb2>
                    // No second press within double gap, single press detected
                    current_state = SINGLE_PRESS_state;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <getButtonEvent+0x110>)
 800189c:	2203      	movs	r2, #3
 800189e:	701a      	strb	r2, [r3, #0]
                }
            } else {
                // Button pressed again within DOUBLE_GAP_MILLIS_MAX, double press detected
                current_state = DOUBLE_PRESS_state;
            }
            break;
 80018a0:	e029      	b.n	80018f6 <getButtonEvent+0x106>
                    current_state = PRESS_ONCE_state;
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <getButtonEvent+0x110>)
 80018a4:	2205      	movs	r2, #5
 80018a6:	701a      	strb	r2, [r3, #0]
            break;
 80018a8:	e025      	b.n	80018f6 <getButtonEvent+0x106>
                current_state = DOUBLE_PRESS_state;
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <getButtonEvent+0x110>)
 80018ac:	2204      	movs	r2, #4
 80018ae:	701a      	strb	r2, [r3, #0]
            break;
 80018b0:	e021      	b.n	80018f6 <getButtonEvent+0x106>

        case LONG_PRESS_state:
            current_state = WAIT_FOR_RELEASE;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <getButtonEvent+0x110>)
 80018b4:	2206      	movs	r2, #6
 80018b6:	701a      	strb	r2, [r3, #0]
            return LONG_PRESS;  // Return long press event and reset to idle
 80018b8:	2302      	movs	r3, #2
 80018ba:	e01d      	b.n	80018f8 <getButtonEvent+0x108>

        case SINGLE_PRESS_state:
            current_state = WAIT_FOR_RELEASE;  // Reset to idle after detecting single press
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <getButtonEvent+0x110>)
 80018be:	2206      	movs	r2, #6
 80018c0:	701a      	strb	r2, [r3, #0]
            return SINGLE_PRESS;        // Return single press event
 80018c2:	2301      	movs	r3, #1
 80018c4:	e018      	b.n	80018f8 <getButtonEvent+0x108>

        case DOUBLE_PRESS_state:
            current_state = WAIT_FOR_RELEASE;  // Reset to idle after detecting double press
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <getButtonEvent+0x110>)
 80018c8:	2206      	movs	r2, #6
 80018ca:	701a      	strb	r2, [r3, #0]
            return DOUBLE_PRESS;         // Return double press event
 80018cc:	2303      	movs	r3, #3
 80018ce:	e013      	b.n	80018f8 <getButtonEvent+0x108>

        case WAIT_FOR_RELEASE:
        	if (!current_state_btn)
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	f083 0301 	eor.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00b      	beq.n	80018f4 <getButtonEvent+0x104>
        		current_state = IDLE_state;
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <getButtonEvent+0x110>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
        	break;
 80018e2:	e007      	b.n	80018f4 <getButtonEvent+0x104>

        default:
            current_state = IDLE_state;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <getButtonEvent+0x110>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
            break;
 80018ea:	e004      	b.n	80018f6 <getButtonEvent+0x106>
            break;
 80018ec:	bf00      	nop
 80018ee:	e002      	b.n	80018f6 <getButtonEvent+0x106>
            break;
 80018f0:	bf00      	nop
 80018f2:	e000      	b.n	80018f6 <getButtonEvent+0x106>
        	break;
 80018f4:	bf00      	nop
    }
    // No event detected
    return NO_PRESS;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200005b4 	.word	0x200005b4
 8001904:	200005b8 	.word	0x200005b8
 8001908:	200005bc 	.word	0x200005bc
 800190c:	0800f430 	.word	0x0800f430
 8001910:	0800f434 	.word	0x0800f434

08001914 <ButtonTask>:


void ButtonTask(void *pvParameters){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	while (1){
		xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(20));
 800191c:	2314      	movs	r3, #20
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2000      	movs	r0, #0
 8001924:	f008 fe4c 	bl	800a5c0 <xTaskNotifyWait>

		eButtonEvent event = getButtonEvent();
 8001928:	f7ff ff62 	bl	80017f0 <getButtonEvent>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
		if (event != NO_PRESS) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8089 	beq.w	8001a4a <ButtonTask+0x136>
			switch (currentState) {
 8001938:	4b46      	ldr	r3, [pc, #280]	@ (8001a54 <ButtonTask+0x140>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d059      	beq.n	80019f4 <ButtonTask+0xe0>
 8001940:	2b02      	cmp	r3, #2
 8001942:	dc7b      	bgt.n	8001a3c <ButtonTask+0x128>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <ButtonTask+0x3a>
 8001948:	2b01      	cmp	r3, #1
 800194a:	d02f      	beq.n	80019ac <ButtonTask+0x98>
						myprintf("VOLUME_ADJUST: Long Press Detected. Exiting Volume Adjust Mode.\r\n");
						currentState = PLAYBACK_CONTROL;
					}
					break;
				default:
					break;
 800194c:	e076      	b.n	8001a3c <ButtonTask+0x128>
					if (event == SINGLE_PRESS) {
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d117      	bne.n	8001984 <ButtonTask+0x70>
						myprintf("PLAYBACK_CONTROL: Single Press Detected. Toggling Play/Pause.\r\n");
 8001954:	4840      	ldr	r0, [pc, #256]	@ (8001a58 <ButtonTask+0x144>)
 8001956:	f000 fb43 	bl	8001fe0 <myprintf>
						if (AudioState == AUDIO_STATE_PLAY){
 800195a:	4b40      	ldr	r3, [pc, #256]	@ (8001a5c <ButtonTask+0x148>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d105      	bne.n	800196e <ButtonTask+0x5a>
							LogOperation("AUDIO_PAUSE\r\n");
 8001962:	483f      	ldr	r0, [pc, #252]	@ (8001a60 <ButtonTask+0x14c>)
 8001964:	f7ff fdda 	bl	800151c <LogOperation>
							AudioState = AUDIO_STATE_PAUSE;
 8001968:	4b3c      	ldr	r3, [pc, #240]	@ (8001a5c <ButtonTask+0x148>)
 800196a:	220a      	movs	r2, #10
 800196c:	701a      	strb	r2, [r3, #0]
						if (AudioState == AUDIO_STATE_WAIT){
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <ButtonTask+0x148>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d164      	bne.n	8001a40 <ButtonTask+0x12c>
							LogOperation("AUDIO_RESUME\r\n");
 8001976:	483b      	ldr	r0, [pc, #236]	@ (8001a64 <ButtonTask+0x150>)
 8001978:	f7ff fdd0 	bl	800151c <LogOperation>
							AudioState = AUDIO_STATE_RESUME;
 800197c:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <ButtonTask+0x148>)
 800197e:	220b      	movs	r2, #11
 8001980:	701a      	strb	r2, [r3, #0]
					break;
 8001982:	e05d      	b.n	8001a40 <ButtonTask+0x12c>
					else if (event == DOUBLE_PRESS) {
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d106      	bne.n	8001998 <ButtonTask+0x84>
						myprintf("PLAYBACK_CONTROL: Double Press Detected. Entering Track Switching Mode.\r\n");
 800198a:	4837      	ldr	r0, [pc, #220]	@ (8001a68 <ButtonTask+0x154>)
 800198c:	f000 fb28 	bl	8001fe0 <myprintf>
						currentState = TRACK_SWITCHING;
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <ButtonTask+0x140>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
					break;
 8001996:	e053      	b.n	8001a40 <ButtonTask+0x12c>
					else if (event == LONG_PRESS){
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d150      	bne.n	8001a40 <ButtonTask+0x12c>
						myprintf("PLAYBACK_CONTROL: Long Press Detected. Entering Volume Adjust Mode.\r\n");
 800199e:	4833      	ldr	r0, [pc, #204]	@ (8001a6c <ButtonTask+0x158>)
 80019a0:	f000 fb1e 	bl	8001fe0 <myprintf>
						currentState = VOLUME_ADJUST;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <ButtonTask+0x140>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
					break;
 80019aa:	e049      	b.n	8001a40 <ButtonTask+0x12c>
					if (event == SINGLE_PRESS) {
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d109      	bne.n	80019c6 <ButtonTask+0xb2>
						myprintf("TRACK_SWITCHING: Single Press Detected. Previous Track.\r\n");
 80019b2:	482f      	ldr	r0, [pc, #188]	@ (8001a70 <ButtonTask+0x15c>)
 80019b4:	f000 fb14 	bl	8001fe0 <myprintf>
						LogOperation("PREVIOUS_SONG\r\n");
 80019b8:	482e      	ldr	r0, [pc, #184]	@ (8001a74 <ButtonTask+0x160>)
 80019ba:	f7ff fdaf 	bl	800151c <LogOperation>
						AudioState = AUDIO_STATE_PREVIOUS;
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <ButtonTask+0x148>)
 80019c0:	2206      	movs	r2, #6
 80019c2:	701a      	strb	r2, [r3, #0]
					break;
 80019c4:	e03e      	b.n	8001a44 <ButtonTask+0x130>
					else if(event == DOUBLE_PRESS) {
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d109      	bne.n	80019e0 <ButtonTask+0xcc>
						myprintf("TRACK_SWITCHING: Double Press Detected. Next Track.\r\n");
 80019cc:	482a      	ldr	r0, [pc, #168]	@ (8001a78 <ButtonTask+0x164>)
 80019ce:	f000 fb07 	bl	8001fe0 <myprintf>
						LogOperation("NEXT_SONG\r\n");
 80019d2:	482a      	ldr	r0, [pc, #168]	@ (8001a7c <ButtonTask+0x168>)
 80019d4:	f7ff fda2 	bl	800151c <LogOperation>
						AudioState = AUDIO_STATE_NEXT;
 80019d8:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <ButtonTask+0x148>)
 80019da:	2205      	movs	r2, #5
 80019dc:	701a      	strb	r2, [r3, #0]
					break;
 80019de:	e031      	b.n	8001a44 <ButtonTask+0x130>
					else if (event == LONG_PRESS){
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d12e      	bne.n	8001a44 <ButtonTask+0x130>
						myprintf("TRACK_SWITCHING: Long Press Detected. Exiting Track Switching Mode.\r\n");
 80019e6:	4826      	ldr	r0, [pc, #152]	@ (8001a80 <ButtonTask+0x16c>)
 80019e8:	f000 fafa 	bl	8001fe0 <myprintf>
						currentState = PLAYBACK_CONTROL;
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <ButtonTask+0x140>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
					break;
 80019f2:	e027      	b.n	8001a44 <ButtonTask+0x130>
					if(event == SINGLE_PRESS) {
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d109      	bne.n	8001a0e <ButtonTask+0xfa>
						myprintf("VOLUME_ADJUST: Single Press Detected. Volume Down.\r\n");
 80019fa:	4822      	ldr	r0, [pc, #136]	@ (8001a84 <ButtonTask+0x170>)
 80019fc:	f000 faf0 	bl	8001fe0 <myprintf>
						LogOperation("VOLUMN_DOWN\r\n");
 8001a00:	4821      	ldr	r0, [pc, #132]	@ (8001a88 <ButtonTask+0x174>)
 8001a02:	f7ff fd8b 	bl	800151c <LogOperation>
						AudioState = AUDIO_STATE_VOLUME_DOWN;
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <ButtonTask+0x148>)
 8001a08:	220d      	movs	r2, #13
 8001a0a:	701a      	strb	r2, [r3, #0]
					break;
 8001a0c:	e01c      	b.n	8001a48 <ButtonTask+0x134>
					else if(event == DOUBLE_PRESS) {
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d109      	bne.n	8001a28 <ButtonTask+0x114>
						myprintf("VOLUME_ADJUST: Double Press Detected. Volume Up.\r\n");
 8001a14:	481d      	ldr	r0, [pc, #116]	@ (8001a8c <ButtonTask+0x178>)
 8001a16:	f000 fae3 	bl	8001fe0 <myprintf>
						LogOperation("VOLUMN_UP\r\n");
 8001a1a:	481d      	ldr	r0, [pc, #116]	@ (8001a90 <ButtonTask+0x17c>)
 8001a1c:	f7ff fd7e 	bl	800151c <LogOperation>
						AudioState = AUDIO_STATE_VOLUME_UP;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <ButtonTask+0x148>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	701a      	strb	r2, [r3, #0]
					break;
 8001a26:	e00f      	b.n	8001a48 <ButtonTask+0x134>
					else if(event == LONG_PRESS){
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d10c      	bne.n	8001a48 <ButtonTask+0x134>
						myprintf("VOLUME_ADJUST: Long Press Detected. Exiting Volume Adjust Mode.\r\n");
 8001a2e:	4819      	ldr	r0, [pc, #100]	@ (8001a94 <ButtonTask+0x180>)
 8001a30:	f000 fad6 	bl	8001fe0 <myprintf>
						currentState = PLAYBACK_CONTROL;
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <ButtonTask+0x140>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
					break;
 8001a3a:	e005      	b.n	8001a48 <ButtonTask+0x134>
					break;
 8001a3c:	bf00      	nop
 8001a3e:	e004      	b.n	8001a4a <ButtonTask+0x136>
					break;
 8001a40:	bf00      	nop
 8001a42:	e002      	b.n	8001a4a <ButtonTask+0x136>
					break;
 8001a44:	bf00      	nop
 8001a46:	e000      	b.n	8001a4a <ButtonTask+0x136>
					break;
 8001a48:	bf00      	nop
			}
		}
		vTaskDelay(pdMS_TO_TICKS(10));
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f007 ff9a 	bl	8009984 <vTaskDelay>
	while (1){
 8001a50:	e764      	b.n	800191c <ButtonTask+0x8>
 8001a52:	bf00      	nop
 8001a54:	200005a8 	.word	0x200005a8
 8001a58:	0800f078 	.word	0x0800f078
 8001a5c:	20001714 	.word	0x20001714
 8001a60:	0800f0b8 	.word	0x0800f0b8
 8001a64:	0800f0c8 	.word	0x0800f0c8
 8001a68:	0800f0d8 	.word	0x0800f0d8
 8001a6c:	0800f124 	.word	0x0800f124
 8001a70:	0800f16c 	.word	0x0800f16c
 8001a74:	0800f1a8 	.word	0x0800f1a8
 8001a78:	0800f1b8 	.word	0x0800f1b8
 8001a7c:	0800f1f0 	.word	0x0800f1f0
 8001a80:	0800f1fc 	.word	0x0800f1fc
 8001a84:	0800f244 	.word	0x0800f244
 8001a88:	0800f27c 	.word	0x0800f27c
 8001a8c:	0800f28c 	.word	0x0800f28c
 8001a90:	0800f2c0 	.word	0x0800f2c0
 8001a94:	0800f2cc 	.word	0x0800f2cc

08001a98 <AudioPlayerTask>:
	}
}

void AudioPlayerTask(void *pvParameters){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	int IsFinished = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
	xSemaphoreTake(fatfsMutex, portMAX_DELAY);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <AudioPlayerTask+0x74>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	4618      	mov	r0, r3
 8001aae:	f007 fb93 	bl	80091d8 <xQueueSemaphoreTake>
	AUDIO_PLAYER_Start(0);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 fdac 	bl	8002610 <AUDIO_PLAYER_Start>
	xSemaphoreGive(fatfsMutex);
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <AudioPlayerTask+0x74>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f007 f909 	bl	8008cd8 <xQueueGenericSend>
	while (!IsFinished){
 8001ac6:	e019      	b.n	8001afc <AudioPlayerTask+0x64>
		xSemaphoreTake(fatfsMutex, portMAX_DELAY);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <AudioPlayerTask+0x74>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f007 fb81 	bl	80091d8 <xQueueSemaphoreTake>
		AUDIO_PLAYER_Process(true);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 fdfa 	bl	80026d0 <AUDIO_PLAYER_Process>
		xSemaphoreGive(fatfsMutex);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <AudioPlayerTask+0x74>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f007 f8f7 	bl	8008cd8 <xQueueGenericSend>

		if (AudioState == AUDIO_STATE_STOP)
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <AudioPlayerTask+0x78>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b09      	cmp	r3, #9
 8001af0:	d101      	bne.n	8001af6 <AudioPlayerTask+0x5e>
		{
			IsFinished = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
		}
		vTaskDelay(pdMS_TO_TICKS(10));
 8001af6:	200a      	movs	r0, #10
 8001af8:	f007 ff44 	bl	8009984 <vTaskDelay>
	while (!IsFinished){
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0e2      	beq.n	8001ac8 <AudioPlayerTask+0x30>
	}
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200005ac 	.word	0x200005ac
 8001b10:	20001714 	.word	0x20001714

08001b14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0){
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d114      	bne.n	8001b4e <HAL_GPIO_EXTI_Callback+0x3a>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(buttonTaskHandle, &xHigherPriorityTaskWoken);
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_GPIO_EXTI_Callback+0x44>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f107 020c 	add.w	r2, r7, #12
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f008 fd9e 	bl	800a674 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_EXTI_Callback+0x3a>
 8001b3e:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <HAL_GPIO_EXTI_Callback+0x48>)
 8001b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	f3bf 8f6f 	isb	sy
	}
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200005a4 	.word	0x200005a4
 8001b5c:	e000ed04 	.word	0xe000ed04

08001b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b66:	f000 ff1f 	bl	80029a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6a:	f000 f867 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6e:	f000 f9ab 	bl	8001ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b72:	f000 f989 	bl	8001e88 <MX_DMA_Init>
  MX_SPI2_Init();
 8001b76:	f000 f927 	bl	8001dc8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001b7a:	f000 f95b 	bl	8001e34 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001b7e:	f006 f9b1 	bl	8007ee4 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001b82:	f000 f8c5 	bl	8001d10 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001b86:	f000 f8f1 	bl	8001d6c <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  Mount_SD();
 8001b8a:	f7ff f973 	bl	8000e74 <Mount_SD>
  fatfsMutex = xSemaphoreCreateMutex();
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f007 f88a 	bl	8008ca8 <xQueueCreateMutex>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <main+0xb0>)
 8001b98:	6013      	str	r3, [r2, #0]
  if (fatfsMutex == NULL){
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <main+0xb0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <main+0x48>
  	myprintf("Failed to create fatfsMutex!\r\n");
 8001ba2:	481c      	ldr	r0, [pc, #112]	@ (8001c14 <main+0xb4>)
 8001ba4:	f000 fa1c 	bl	8001fe0 <myprintf>
  }
  logQueue = xQueueCreate(10, sizeof(LogMessage));
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2180      	movs	r1, #128	@ 0x80
 8001bac:	200a      	movs	r0, #10
 8001bae:	f007 f801 	bl	8008bb4 <xQueueGenericCreate>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <main+0xb8>)
 8001bb6:	6013      	str	r3, [r2, #0]
  if (logQueue == NULL){
 8001bb8:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <main+0xb8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <main+0x66>
  	myprintf("Failed to create logQueue!\r\n");
 8001bc0:	4816      	ldr	r0, [pc, #88]	@ (8001c1c <main+0xbc>)
 8001bc2:	f000 fa0d 	bl	8001fe0 <myprintf>
  }

  xTaskCreate(LogTask, "LogTask", 512, NULL, 3, NULL);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	2303      	movs	r3, #3
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd4:	4912      	ldr	r1, [pc, #72]	@ (8001c20 <main+0xc0>)
 8001bd6:	4813      	ldr	r0, [pc, #76]	@ (8001c24 <main+0xc4>)
 8001bd8:	f007 fd94 	bl	8009704 <xTaskCreate>
  xTaskCreate(ButtonTask, "ButtonTask", 256, NULL, 2, &buttonTaskHandle);
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <main+0xc8>)
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2300      	movs	r3, #0
 8001be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bea:	4910      	ldr	r1, [pc, #64]	@ (8001c2c <main+0xcc>)
 8001bec:	4810      	ldr	r0, [pc, #64]	@ (8001c30 <main+0xd0>)
 8001bee:	f007 fd89 	bl	8009704 <xTaskCreate>
  xTaskCreate(AudioPlayerTask, "AudioPlayerTask", 512, NULL, 3, NULL);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <main+0xd4>)
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <main+0xd8>)
 8001c04:	f007 fd7e 	bl	8009704 <xTaskCreate>
  vTaskStartScheduler();
 8001c08:	f007 fef2 	bl	80099f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <main+0xac>
 8001c10:	200005ac 	.word	0x200005ac
 8001c14:	0800f310 	.word	0x0800f310
 8001c18:	200005b0 	.word	0x200005b0
 8001c1c:	0800f330 	.word	0x0800f330
 8001c20:	0800f350 	.word	0x0800f350
 8001c24:	08001655 	.word	0x08001655
 8001c28:	200005a4 	.word	0x200005a4
 8001c2c:	0800f358 	.word	0x0800f358
 8001c30:	08001915 	.word	0x08001915
 8001c34:	0800f364 	.word	0x0800f364
 8001c38:	08001a99 	.word	0x08001a99

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b094      	sub	sp, #80	@ 0x50
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 0320 	add.w	r3, r7, #32
 8001c46:	2230      	movs	r2, #48	@ 0x30
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00c fc28 	bl	800e4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <SystemClock_Config+0xcc>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <SystemClock_Config+0xcc>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <SystemClock_Config+0xcc>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <SystemClock_Config+0xd0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a21      	ldr	r2, [pc, #132]	@ (8001d0c <SystemClock_Config+0xd0>)
 8001c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <SystemClock_Config+0xd0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cac:	2308      	movs	r3, #8
 8001cae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cb0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 ffd6 	bl	8005c74 <HAL_RCC_OscConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001cce:	f000 f980 	bl	8001fd2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cde:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ce2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2105      	movs	r1, #5
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 fa37 	bl	8006164 <HAL_RCC_ClockConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cfc:	f000 f969 	bl	8001fd2 <Error_Handler>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3750      	adds	r7, #80	@ 0x50
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000

08001d10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d16:	4a13      	ldr	r2, [pc, #76]	@ (8001d64 <MX_I2C1_Init+0x54>)
 8001d18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d1c:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <MX_I2C1_Init+0x58>)
 8001d1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d40:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	@ (8001d60 <MX_I2C1_Init+0x50>)
 8001d4e:	f001 fe93 	bl	8003a78 <HAL_I2C_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d58:	f000 f93b 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000408 	.word	0x20000408
 8001d64:	40005400 	.word	0x40005400
 8001d68:	000186a0 	.word	0x000186a0

08001d6c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001d72:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <MX_I2S3_Init+0x58>)
 8001d74:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d7c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d90:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001d94:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001d98:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001dac:	4804      	ldr	r0, [pc, #16]	@ (8001dc0 <MX_I2S3_Init+0x54>)
 8001dae:	f002 fec5 	bl	8004b3c <HAL_I2S_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001db8:	f000 f90b 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2000045c 	.word	0x2000045c
 8001dc4:	40003c00 	.word	0x40003c00

08001dc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001dce:	4a18      	ldr	r2, [pc, #96]	@ (8001e30 <MX_SPI2_Init+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001dd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001e14:	220a      	movs	r2, #10
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e18:	4804      	ldr	r0, [pc, #16]	@ (8001e2c <MX_SPI2_Init+0x64>)
 8001e1a:	f004 fd63 	bl	80068e4 <HAL_SPI_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e24:	f000 f8d5 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000504 	.word	0x20000504
 8001e30:	40003800 	.word	0x40003800

08001e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	@ (8001e84 <MX_USART2_UART_Init+0x50>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e6c:	f005 fc2e 	bl	80076cc <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e76:	f000 f8ac 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000055c 	.word	0x2000055c
 8001e84:	40004400 	.word	0x40004400

08001e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_DMA_Init+0x3c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec4 <MX_DMA_Init+0x3c>)
 8001e98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_DMA_Init+0x3c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2010      	movs	r0, #16
 8001eb0:	f000 fe98 	bl	8002be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001eb4:	2010      	movs	r0, #16
 8001eb6:	f000 feb1 	bl	8002c1c <HAL_NVIC_EnableIRQ>

}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a30      	ldr	r2, [pc, #192]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a29      	ldr	r2, [pc, #164]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <MX_GPIO_Init+0xe0>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2102      	movs	r1, #2
 8001f52:	4816      	ldr	r0, [pc, #88]	@ (8001fac <MX_GPIO_Init+0xe4>)
 8001f54:	f001 fd5e 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4810      	ldr	r0, [pc, #64]	@ (8001fb0 <MX_GPIO_Init+0xe8>)
 8001f6e:	f001 faa1 	bl	80034b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001f72:	2302      	movs	r3, #2
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4808      	ldr	r0, [pc, #32]	@ (8001fac <MX_GPIO_Init+0xe4>)
 8001f8a:	f001 fa93 	bl	80034b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	2006      	movs	r0, #6
 8001f94:	f000 fe26 	bl	8002be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f98:	2006      	movs	r0, #6
 8001f9a:	f000 fe3f 	bl	8002c1c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	@ 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fc6:	f000 fd11 	bl	80029ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd6:	b672      	cpsid	i
}
 8001fd8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fda:	bf00      	nop
 8001fdc:	e7fd      	b.n	8001fda <Error_Handler+0x8>
	...

08001fe0 <myprintf>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart2;

void myprintf(const char *fmt, ...) {
 8001fe0:	b40f      	push	{r0, r1, r2, r3}
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ff6:	480b      	ldr	r0, [pc, #44]	@ (8002024 <myprintf+0x44>)
 8001ff8:	f00c fa44 	bl	800e484 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8001ffc:	4809      	ldr	r0, [pc, #36]	@ (8002024 <myprintf+0x44>)
 8001ffe:	f7fe f8e7 	bl	80001d0 <strlen>
 8002002:	4603      	mov	r3, r0
 8002004:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	b29a      	uxth	r2, r3
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	4905      	ldr	r1, [pc, #20]	@ (8002024 <myprintf+0x44>)
 8002010:	4805      	ldr	r0, [pc, #20]	@ (8002028 <myprintf+0x48>)
 8002012:	f005 fbab 	bl	800776c <HAL_UART_Transmit>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002020:	b004      	add	sp, #16
 8002022:	4770      	bx	lr
 8002024:	200005c0 	.word	0x200005c0
 8002028:	2000055c 	.word	0x2000055c

0800202c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <HAL_MspInit+0x4c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a0f      	ldr	r2, [pc, #60]	@ (8002078 <HAL_MspInit+0x4c>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <HAL_MspInit+0x4c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_MspInit+0x4c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_MspInit+0x4c>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	@ 0x40
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_MspInit+0x4c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	@ (8002100 <HAL_I2C_MspInit+0x84>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12b      	bne.n	80020f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <HAL_I2C_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	4a17      	ldr	r2, [pc, #92]	@ (8002104 <HAL_I2C_MspInit+0x88>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <HAL_I2C_MspInit+0x88>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ba:	23c0      	movs	r3, #192	@ 0xc0
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020be:	2312      	movs	r3, #18
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ca:	2304      	movs	r3, #4
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	480c      	ldr	r0, [pc, #48]	@ (8002108 <HAL_I2C_MspInit+0x8c>)
 80020d6:	f001 f9ed 	bl	80034b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <HAL_I2C_MspInit+0x88>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a08      	ldr	r2, [pc, #32]	@ (8002104 <HAL_I2C_MspInit+0x88>)
 80020e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_I2C_MspInit+0x88>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	@ 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40005400 	.word	0x40005400
 8002104:	40023800 	.word	0x40023800
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_I2C_MspDeInit+0x38>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_I2C_MspDeInit+0x3c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_I2C_MspDeInit+0x3c>)
 8002124:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002128:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800212a:	2140      	movs	r1, #64	@ 0x40
 800212c:	4807      	ldr	r0, [pc, #28]	@ (800214c <HAL_I2C_MspDeInit+0x40>)
 800212e:	f001 fb5d 	bl	80037ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	4805      	ldr	r0, [pc, #20]	@ (800214c <HAL_I2C_MspDeInit+0x40>)
 8002136:	f001 fb59 	bl	80037ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40005400 	.word	0x40005400
 8002148:	40023800 	.word	0x40023800
 800214c:	40020400 	.word	0x40020400

08002150 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08e      	sub	sp, #56	@ 0x38
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a4e      	ldr	r2, [pc, #312]	@ (80022b4 <HAL_I2S_MspInit+0x164>)
 800217c:	4293      	cmp	r3, r2
 800217e:	f040 8094 	bne.w	80022aa <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002186:	23c0      	movs	r3, #192	@ 0xc0
 8002188:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800218a:	2302      	movs	r3, #2
 800218c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fa38 	bl	8006608 <HAL_RCCEx_PeriphCLKConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800219e:	f7ff ff18 	bl	8001fd2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b44      	ldr	r3, [pc, #272]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a43      	ldr	r2, [pc, #268]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	4b41      	ldr	r3, [pc, #260]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b3d      	ldr	r3, [pc, #244]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a3c      	ldr	r2, [pc, #240]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b3a      	ldr	r3, [pc, #232]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a35      	ldr	r2, [pc, #212]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <HAL_I2S_MspInit+0x168>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021f6:	2310      	movs	r3, #16
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002206:	2306      	movs	r3, #6
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	482a      	ldr	r0, [pc, #168]	@ (80022bc <HAL_I2S_MspInit+0x16c>)
 8002212:	f001 f94f 	bl	80034b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8002216:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002228:	2306      	movs	r3, #6
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4823      	ldr	r0, [pc, #140]	@ (80022c0 <HAL_I2S_MspInit+0x170>)
 8002234:	f001 f93e 	bl	80034b4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002238:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 800223a:	4a23      	ldr	r2, [pc, #140]	@ (80022c8 <HAL_I2S_MspInit+0x178>)
 800223c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800223e:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002240:	2200      	movs	r2, #0
 8002242:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002244:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002246:	2240      	movs	r2, #64	@ 0x40
 8002248:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224a:	4b1e      	ldr	r3, [pc, #120]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002250:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002252:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002256:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002258:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 800225a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800225e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002260:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002262:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002266:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002268:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 800226a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800226e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002278:	2204      	movs	r2, #4
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 800227e:	2203      	movs	r2, #3
 8002280:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002284:	2200      	movs	r2, #0
 8002286:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800228e:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 8002290:	f000 fcd2 	bl	8002c38 <HAL_DMA_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800229a:	f7ff fe9a 	bl	8001fd2 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 80022a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80022a4:	4a07      	ldr	r2, [pc, #28]	@ (80022c4 <HAL_I2S_MspInit+0x174>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80022aa:	bf00      	nop
 80022ac:	3738      	adds	r7, #56	@ 0x38
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40003c00 	.word	0x40003c00
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020800 	.word	0x40020800
 80022c4:	200004a4 	.word	0x200004a4
 80022c8:	40026088 	.word	0x40026088

080022cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a19      	ldr	r2, [pc, #100]	@ (8002350 <HAL_SPI_MspInit+0x84>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12c      	bne.n	8002348 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_SPI_MspInit+0x88>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_SPI_MspInit+0x88>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <HAL_SPI_MspInit+0x88>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_SPI_MspInit+0x88>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <HAL_SPI_MspInit+0x88>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_SPI_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002326:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002338:	2305      	movs	r3, #5
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <HAL_SPI_MspInit+0x8c>)
 8002344:	f001 f8b6 	bl	80034b4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40003800 	.word	0x40003800
 8002354:	40023800 	.word	0x40023800
 8002358:	40020400 	.word	0x40020400

0800235c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a19      	ldr	r2, [pc, #100]	@ (80023e0 <HAL_UART_MspInit+0x84>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12b      	bne.n	80023d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_UART_MspInit+0x88>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_UART_MspInit+0x88>)
 8002388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_UART_MspInit+0x88>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_UART_MspInit+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a10      	ldr	r2, [pc, #64]	@ (80023e4 <HAL_UART_MspInit+0x88>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_UART_MspInit+0x88>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b6:	230c      	movs	r3, #12
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c6:	2307      	movs	r3, #7
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <HAL_UART_MspInit+0x8c>)
 80023d2:	f001 f86f 	bl	80034b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40004400 	.word	0x40004400
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000

080023ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	@ 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_InitTick+0xe8>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	4a33      	ldr	r2, [pc, #204]	@ (80024d4 <HAL_InitTick+0xe8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6413      	str	r3, [r2, #64]	@ 0x40
 800240c:	4b31      	ldr	r3, [pc, #196]	@ (80024d4 <HAL_InitTick+0xe8>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002418:	f107 0210 	add.w	r2, r7, #16
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f004 f8be 	bl	80065a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800242c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002432:	f004 f88f 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
 8002436:	6378      	str	r0, [r7, #52]	@ 0x34
 8002438:	e004      	b.n	8002444 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800243a:	f004 f88b 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
 800243e:	4603      	mov	r3, r0
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002446:	4a24      	ldr	r2, [pc, #144]	@ (80024d8 <HAL_InitTick+0xec>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	0c9b      	lsrs	r3, r3, #18
 800244e:	3b01      	subs	r3, #1
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002452:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <HAL_InitTick+0xf0>)
 8002454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002458:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800245a:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <HAL_InitTick+0xf0>)
 800245c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002460:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002462:	4a1e      	ldr	r2, [pc, #120]	@ (80024dc <HAL_InitTick+0xf0>)
 8002464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002466:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002468:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <HAL_InitTick+0xf0>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_InitTick+0xf0>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_InitTick+0xf0>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800247a:	4818      	ldr	r0, [pc, #96]	@ (80024dc <HAL_InitTick+0xf0>)
 800247c:	f004 fe84 	bl	8007188 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002486:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11b      	bne.n	80024c6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800248e:	4813      	ldr	r0, [pc, #76]	@ (80024dc <HAL_InitTick+0xf0>)
 8002490:	f004 fed4 	bl	800723c <HAL_TIM_Base_Start_IT>
 8002494:	4603      	mov	r3, r0
 8002496:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800249a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d111      	bne.n	80024c6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024a2:	201c      	movs	r0, #28
 80024a4:	f000 fbba 	bl	8002c1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	d808      	bhi.n	80024c0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80024ae:	2200      	movs	r2, #0
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	201c      	movs	r0, #28
 80024b4:	f000 fb96 	bl	8002be4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b8:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <HAL_InitTick+0xf4>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e002      	b.n	80024c6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3738      	adds	r7, #56	@ 0x38
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	200006c0 	.word	0x200006c0
 80024e0:	20000040 	.word	0x20000040

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <NMI_Handler+0x4>

080024ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <HardFault_Handler+0x4>

080024f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <MemManage_Handler+0x4>

080024fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <UsageFault_Handler+0x4>

0800250c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800251e:	2001      	movs	r0, #1
 8002520:	f001 fa92 	bl	8003a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <DMA1_Stream5_IRQHandler+0x10>)
 800252e:	f000 fd57 	bl	8002fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200004a4 	.word	0x200004a4

0800253c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <TIM2_IRQHandler+0x10>)
 8002542:	f004 feeb 	bl	800731c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200006c0 	.word	0x200006c0

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f00b ffc0 	bl	800e504 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	@ (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20020000 	.word	0x20020000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	20000708 	.word	0x20000708
 80025b8:	20014c88 	.word	0x20014c88

080025bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <PlayerInit+0x2c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4619      	mov	r1, r3
 80025f2:	2003      	movs	r0, #3
 80025f4:	f7fd ffbc 	bl	8000570 <AUDIO_OUT_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <PlayerInit+0x22>
	{
		return 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8002602:	2300      	movs	r3, #0
	}
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000003c 	.word	0x2000003c

08002610 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;

  f_close(&WavFile);
 800261a:	4828      	ldr	r0, [pc, #160]	@ (80026bc <AUDIO_PLAYER_Start+0xac>)
 800261c:	f00b fba2 	bl	800dd64 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8002620:	f7fe fc18 	bl	8000e54 <AUDIO_GetWavObjectNumber>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	b29b      	uxth	r3, r3
 800262c:	429a      	cmp	r2, r3
 800262e:	d93f      	bls.n	80026b0 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8002630:	79fa      	ldrb	r2, [r7, #7]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	4a20      	ldr	r2, [pc, #128]	@ (80026c0 <AUDIO_PLAYER_Start+0xb0>)
 800263e:	4413      	add	r3, r2
 8002640:	3301      	adds	r3, #1
 8002642:	2201      	movs	r2, #1
 8002644:	4619      	mov	r1, r3
 8002646:	481d      	ldr	r0, [pc, #116]	@ (80026bc <AUDIO_PLAYER_Start+0xac>)
 8002648:	f00a fea0 	bl	800d38c <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	222c      	movs	r2, #44	@ 0x2c
 8002652:	491c      	ldr	r1, [pc, #112]	@ (80026c4 <AUDIO_PLAYER_Start+0xb4>)
 8002654:	4819      	ldr	r0, [pc, #100]	@ (80026bc <AUDIO_PLAYER_Start+0xac>)
 8002656:	f00b f853 	bl	800d700 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <AUDIO_PLAYER_Start+0xb4>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ffbe 	bl	80025e0 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002664:	4b18      	ldr	r3, [pc, #96]	@ (80026c8 <AUDIO_PLAYER_Start+0xb8>)
 8002666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 800266e:	2100      	movs	r1, #0
 8002670:	4812      	ldr	r0, [pc, #72]	@ (80026bc <AUDIO_PLAYER_Start+0xac>)
 8002672:	f00b fba1 	bl	800ddb8 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800267e:	4912      	ldr	r1, [pc, #72]	@ (80026c8 <AUDIO_PLAYER_Start+0xb8>)
 8002680:	480e      	ldr	r0, [pc, #56]	@ (80026bc <AUDIO_PLAYER_Start+0xac>)
 8002682:	f00b f83d 	bl	800d700 <f_read>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <AUDIO_PLAYER_Start+0xbc>)
 800268e:	2203      	movs	r2, #3
 8002690:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800269c:	480a      	ldr	r0, [pc, #40]	@ (80026c8 <AUDIO_PLAYER_Start+0xb8>)
 800269e:	f7fd ffb5 	bl	800060c <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a08      	ldr	r2, [pc, #32]	@ (80026c8 <AUDIO_PLAYER_Start+0xb8>)
 80026a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026aa:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20001b20 	.word	0x20001b20
 80026c0:	20001718 	.word	0x20001718
 80026c4:	20001af4 	.word	0x20001af4
 80026c8:	2000070c 	.word	0x2000070c
 80026cc:	20001714 	.word	0x20001714

080026d0 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 80026de:	4b82      	ldr	r3, [pc, #520]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	3b03      	subs	r3, #3
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	f200 80f6 	bhi.w	80028d6 <AUDIO_PLAYER_Process+0x206>
 80026ea:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <AUDIO_PLAYER_Process+0x20>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	0800271d 	.word	0x0800271d
 80026f4:	080028d7 	.word	0x080028d7
 80026f8:	080027e3 	.word	0x080027e3
 80026fc:	08002831 	.word	0x08002831
 8002700:	080028d7 	.word	0x080028d7
 8002704:	080028d7 	.word	0x080028d7
 8002708:	080027d1 	.word	0x080027d1
 800270c:	08002873 	.word	0x08002873
 8002710:	0800287f 	.word	0x0800287f
 8002714:	0800288b 	.word	0x0800288b
 8002718:	080028b1 	.word	0x080028b1
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 800271c:	4b73      	ldr	r3, [pc, #460]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4b72      	ldr	r3, [pc, #456]	@ (80028f0 <AUDIO_PLAYER_Process+0x220>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d305      	bcc.n	8002738 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800272c:	2002      	movs	r0, #2
 800272e:	f7fd ffc3 	bl	80006b8 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8002732:	4b6d      	ldr	r3, [pc, #436]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 8002734:	2205      	movs	r2, #5
 8002736:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002738:	4b6c      	ldr	r3, [pc, #432]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 800273a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d11e      	bne.n	8002782 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800274c:	4967      	ldr	r1, [pc, #412]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 800274e:	4869      	ldr	r0, [pc, #420]	@ (80028f4 <AUDIO_PLAYER_Process+0x224>)
 8002750:	f00a ffd6 	bl	800d700 <f_read>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800275a:	2002      	movs	r0, #2
 800275c:	f7fd ffac 	bl	80006b8 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002760:	2301      	movs	r3, #1
 8002762:	e0bc      	b.n	80028de <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002764:	4b61      	ldr	r3, [pc, #388]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 8002766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 800276e:	4b5f      	ldr	r3, [pc, #380]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 8002770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4413      	add	r3, r2
 800277a:	4a5c      	ldr	r2, [pc, #368]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 800277c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002780:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8002782:	4b5a      	ldr	r3, [pc, #360]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 8002784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	f040 80a5 	bne.w	80028da <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002798:	4957      	ldr	r1, [pc, #348]	@ (80028f8 <AUDIO_PLAYER_Process+0x228>)
 800279a:	4856      	ldr	r0, [pc, #344]	@ (80028f4 <AUDIO_PLAYER_Process+0x224>)
 800279c:	f00a ffb0 	bl	800d700 <f_read>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80027a6:	2002      	movs	r0, #2
 80027a8:	f7fd ff86 	bl	80006b8 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80027ac:	2301      	movs	r3, #1
 80027ae:	e096      	b.n	80028de <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80027b0:	4b4e      	ldr	r3, [pc, #312]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 80027b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80027ba:	4b4c      	ldr	r3, [pc, #304]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 80027bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a49      	ldr	r2, [pc, #292]	@ (80028ec <AUDIO_PLAYER_Process+0x21c>)
 80027c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027cc:	6053      	str	r3, [r2, #4]
    }
    break;
 80027ce:	e084      	b.n	80028da <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7fd ff71 	bl	80006b8 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 80027d6:	4b44      	ldr	r3, [pc, #272]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
    break;
 80027e0:	e07c      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 80027e2:	4b46      	ldr	r3, [pc, #280]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 80027e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	4b42      	ldr	r3, [pc, #264]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	4b41      	ldr	r3, [pc, #260]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 80027f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fa:	461c      	mov	r4, r3
 80027fc:	f7fe fb2a 	bl	8000e54 <AUDIO_GetWavObjectNumber>
 8002800:	4603      	mov	r3, r0
 8002802:	429c      	cmp	r4, r3
 8002804:	db09      	blt.n	800281a <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 800280c:	4b3b      	ldr	r3, [pc, #236]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 800280e:	2200      	movs	r2, #0
 8002810:	801a      	strh	r2, [r3, #0]
 8002812:	e002      	b.n	800281a <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002814:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 8002816:	2209      	movs	r2, #9
 8002818:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800281a:	2002      	movs	r0, #2
 800281c:	f7fd ff4c 	bl	80006b8 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002820:	4b36      	ldr	r3, [pc, #216]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 8002822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fef1 	bl	8002610 <AUDIO_PLAYER_Start>
    break;    
 800282e:	e055      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002830:	4b32      	ldr	r3, [pc, #200]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21a      	sxth	r2, r3
 800283e:	4b2f      	ldr	r3, [pc, #188]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	4b2e      	ldr	r3, [pc, #184]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 8002844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da07      	bge.n	800285c <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 800284c:	f7fe fb02 	bl	8000e54 <AUDIO_GetWavObjectNumber>
 8002850:	4603      	mov	r3, r0
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	b21a      	sxth	r2, r3
 8002858:	4b28      	ldr	r3, [pc, #160]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 800285a:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800285c:	2002      	movs	r0, #2
 800285e:	f7fd ff2b 	bl	80006b8 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002862:	4b26      	ldr	r3, [pc, #152]	@ (80028fc <AUDIO_PLAYER_Process+0x22c>)
 8002864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fed0 	bl	8002610 <AUDIO_PLAYER_Start>
    break;   
 8002870:	e034      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002872:	f7fd fef5 	bl	8000660 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002876:	4b1c      	ldr	r3, [pc, #112]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
    break;
 800287c:	e02e      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 800287e:	f7fd ff05 	bl	800068c <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002882:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 8002884:	2203      	movs	r2, #3
 8002886:	701a      	strb	r2, [r3, #0]
    break;
 8002888:	e028      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 800288a:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b5a      	cmp	r3, #90	@ 0x5a
 8002890:	d804      	bhi.n	800289c <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8002892:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	330a      	adds	r3, #10
 8002898:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 800289a:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 800289c:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd ff30 	bl	8000708 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 80028aa:	2203      	movs	r2, #3
 80028ac:	701a      	strb	r2, [r3, #0]
    break;
 80028ae:	e015      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	d904      	bls.n	80028c2 <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3b0a      	subs	r3, #10
 80028be:	4a10      	ldr	r2, [pc, #64]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 80028c0:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80028c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <AUDIO_PLAYER_Process+0x230>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd ff1d 	bl	8000708 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <AUDIO_PLAYER_Process+0x218>)
 80028d0:	2203      	movs	r2, #3
 80028d2:	701a      	strb	r2, [r3, #0]
    break;
 80028d4:	e002      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <AUDIO_PLAYER_Process+0x20c>
    break;
 80028da:	bf00      	nop
  }
  return audio_error;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20001714 	.word	0x20001714
 80028ec:	2000070c 	.word	0x2000070c
 80028f0:	20001af4 	.word	0x20001af4
 80028f4:	20001b20 	.word	0x20001b20
 80028f8:	20000f0c 	.word	0x20000f0c
 80028fc:	20001716 	.word	0x20001716
 8002900:	2000003c 	.word	0x2000003c

08002904 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d104      	bne.n	800291a <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002910:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002916:	2202      	movs	r2, #2
 8002918:	701a      	strb	r2, [r3, #0]
  }
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20001714 	.word	0x20001714
 8002928:	2000070c 	.word	0x2000070c

0800292c <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d104      	bne.n	8002942 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800293a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
  }
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	20001714 	.word	0x20001714
 8002950:	2000070c 	.word	0x2000070c

08002954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800298c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002958:	f7ff fe30 	bl	80025bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800295c:	480c      	ldr	r0, [pc, #48]	@ (8002990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800295e:	490d      	ldr	r1, [pc, #52]	@ (8002994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002960:	4a0d      	ldr	r2, [pc, #52]	@ (8002998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002964:	e002      	b.n	800296c <LoopCopyDataInit>

08002966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296a:	3304      	adds	r3, #4

0800296c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800296c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002970:	d3f9      	bcc.n	8002966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002974:	4c0a      	ldr	r4, [pc, #40]	@ (80029a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002978:	e001      	b.n	800297e <LoopFillZerobss>

0800297a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800297c:	3204      	adds	r2, #4

0800297e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002980:	d3fb      	bcc.n	800297a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002982:	f00b fdc5 	bl	800e510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002986:	f7ff f8eb 	bl	8001b60 <main>
  bx  lr    
 800298a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800298c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002994:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002998:	0800f51c 	.word	0x0800f51c
  ldr r2, =_sbss
 800299c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80029a0:	20014c84 	.word	0x20014c84

080029a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a4:	e7fe      	b.n	80029a4 <ADC_IRQHandler>
	...

080029a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ac:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <HAL_Init+0x40>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0d      	ldr	r2, [pc, #52]	@ (80029e8 <HAL_Init+0x40>)
 80029b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_Init+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <HAL_Init+0x40>)
 80029be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c4:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a07      	ldr	r2, [pc, #28]	@ (80029e8 <HAL_Init+0x40>)
 80029ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d0:	2003      	movs	r0, #3
 80029d2:	f000 f8fc 	bl	8002bce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d6:	200f      	movs	r0, #15
 80029d8:	f7ff fd08 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029dc:	f7ff fb26 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00

080029ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_IncTick+0x20>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_IncTick+0x24>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <HAL_IncTick+0x24>)
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000044 	.word	0x20000044
 8002a10:	20001d50 	.word	0x20001d50

08002a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <HAL_GetTick+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20001d50 	.word	0x20001d50

08002a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7ff ffee 	bl	8002a14 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d005      	beq.n	8002a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <HAL_Delay+0x44>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a52:	bf00      	nop
 8002a54:	f7ff ffde 	bl	8002a14 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d8f7      	bhi.n	8002a54 <HAL_Delay+0x28>
  {
  }
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000044 	.word	0x20000044

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4907      	ldr	r1, [pc, #28]	@ (8002b10 <__NVIC_EnableIRQ+0x38>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	@ (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	@ (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	@ 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	@ 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ff4c 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf6:	f7ff ff61 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002bfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	6978      	ldr	r0, [r7, #20]
 8002c02:	f7ff ffb1 	bl	8002b68 <NVIC_EncodePriority>
 8002c06:	4602      	mov	r2, r0
 8002c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff80 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff54 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff fee6 	bl	8002a14 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e099      	b.n	8002d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c74:	e00f      	b.n	8002c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c76:	f7ff fecd 	bl	8002a14 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d908      	bls.n	8002c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e078      	b.n	8002d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e8      	bne.n	8002c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <HAL_DMA_Init+0x158>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0307 	bic.w	r3, r3, #7
 8002d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d117      	bne.n	8002d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fb3d 	bl	80033bc <DMA_CheckFifoParam>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2240      	movs	r2, #64	@ 0x40
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d56:	2301      	movs	r3, #1
 8002d58:	e016      	b.n	8002d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 faf4 	bl	8003350 <DMA_CalcBaseAndBitshift>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	223f      	movs	r2, #63	@ 0x3f
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	f010803f 	.word	0xf010803f

08002d94 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e050      	b.n	8002e48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d101      	bne.n	8002db6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	e048      	b.n	8002e48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2221      	movs	r2, #33	@ 0x21
 8002df4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 faaa 	bl	8003350 <DMA_CalcBaseAndBitshift>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	223f      	movs	r2, #63	@ 0x3f
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_DMA_Start_IT+0x26>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e040      	b.n	8002ef8 <HAL_DMA_Start_IT+0xa8>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d12f      	bne.n	8002eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa28 	bl	80032f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	223f      	movs	r2, #63	@ 0x3f
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0216 	orr.w	r2, r2, #22
 8002ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0208 	orr.w	r2, r2, #8
 8002ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e005      	b.n	8002ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f0e:	f7ff fd81 	bl	8002a14 <HAL_GetTick>
 8002f12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d008      	beq.n	8002f32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e052      	b.n	8002fd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0216 	bic.w	r2, r2, #22
 8002f40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_DMA_Abort+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0208 	bic.w	r2, r2, #8
 8002f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f82:	e013      	b.n	8002fac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f84:	f7ff fd46 	bl	8002a14 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d90c      	bls.n	8002fac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e015      	b.n	8002fd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e4      	bne.n	8002f84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	223f      	movs	r2, #63	@ 0x3f
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fec:	4b8e      	ldr	r3, [pc, #568]	@ (8003228 <HAL_DMA_IRQHandler+0x248>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a8e      	ldr	r2, [pc, #568]	@ (800322c <HAL_DMA_IRQHandler+0x24c>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300a:	2208      	movs	r2, #8
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01a      	beq.n	800304c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	2208      	movs	r2, #8
 800303a:	409a      	lsls	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306e:	2201      	movs	r2, #1
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	2204      	movs	r2, #4
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a4:	2204      	movs	r2, #4
 80030a6:	409a      	lsls	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	f043 0204 	orr.w	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	2210      	movs	r2, #16
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d043      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03c      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030da:	2210      	movs	r2, #16
 80030dc:	409a      	lsls	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d018      	beq.n	8003122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d024      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
 800310e:	e01f      	b.n	8003150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e016      	b.n	8003150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0208 	bic.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	2220      	movs	r2, #32
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 808f 	beq.w	8003280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8087 	beq.w	8003280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2220      	movs	r2, #32
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b05      	cmp	r3, #5
 8003188:	d136      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0216 	bic.w	r2, r2, #22
 8003198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_DMA_IRQHandler+0x1da>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0208 	bic.w	r2, r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	223f      	movs	r2, #63	@ 0x3f
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d07e      	beq.n	80032ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
        }
        return;
 80031f6:	e079      	b.n	80032ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	2b00      	cmp	r3, #0
 800321a:	d031      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
 8003224:	e02c      	b.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
 8003226:	bf00      	nop
 8003228:	20000038 	.word	0x20000038
 800322c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d023      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e01e      	b.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10f      	bne.n	8003270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0210 	bic.w	r2, r2, #16
 800325e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	2b00      	cmp	r3, #0
 8003286:	d032      	beq.n	80032ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d022      	beq.n	80032da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2205      	movs	r2, #5
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d307      	bcc.n	80032c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f2      	bne.n	80032ac <HAL_DMA_IRQHandler+0x2cc>
 80032c6:	e000      	b.n	80032ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
 80032ea:	e000      	b.n	80032ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80032ec:	bf00      	nop
    }
  }
}
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003310:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	d108      	bne.n	8003334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003332:	e007      	b.n	8003344 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3b10      	subs	r3, #16
 8003360:	4a14      	ldr	r2, [pc, #80]	@ (80033b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800336a:	4a13      	ldr	r2, [pc, #76]	@ (80033b8 <DMA_CalcBaseAndBitshift+0x68>)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d909      	bls.n	8003392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003390:	e007      	b.n	80033a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	aaaaaaab 	.word	0xaaaaaaab
 80033b8:	0800f450 	.word	0x0800f450

080033bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11f      	bne.n	8003416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d856      	bhi.n	800348a <DMA_CheckFifoParam+0xce>
 80033dc:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <DMA_CheckFifoParam+0x28>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003407 	.word	0x08003407
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800348b 	.word	0x0800348b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d046      	beq.n	800348e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e043      	b.n	800348e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800340e:	d140      	bne.n	8003492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003414:	e03d      	b.n	8003492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800341e:	d121      	bne.n	8003464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d837      	bhi.n	8003496 <DMA_CheckFifoParam+0xda>
 8003426:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <DMA_CheckFifoParam+0x70>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800343d 	.word	0x0800343d
 8003430:	08003443 	.word	0x08003443
 8003434:	0800343d 	.word	0x0800343d
 8003438:	08003455 	.word	0x08003455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      break;
 8003440:	e030      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d025      	beq.n	800349a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003452:	e022      	b.n	800349a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800345c:	d11f      	bne.n	800349e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003462:	e01c      	b.n	800349e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d903      	bls.n	8003472 <DMA_CheckFifoParam+0xb6>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d003      	beq.n	8003478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003470:	e018      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      break;
 8003476:	e015      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e00b      	b.n	80034a2 <DMA_CheckFifoParam+0xe6>
      break;
 800348a:	bf00      	nop
 800348c:	e00a      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800348e:	bf00      	nop
 8003490:	e008      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003492:	bf00      	nop
 8003494:	e006      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
 8003498:	e004      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
    }
  } 
  
  return status; 
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	e16b      	b.n	80037a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034d0:	2201      	movs	r2, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	f040 815a 	bne.w	80037a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d005      	beq.n	8003506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003502:	2b02      	cmp	r3, #2
 8003504:	d130      	bne.n	8003568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	2203      	movs	r2, #3
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800353c:	2201      	movs	r2, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 0201 	and.w	r2, r3, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b03      	cmp	r3, #3
 8003572:	d017      	beq.n	80035a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d123      	bne.n	80035f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	08da      	lsrs	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3208      	adds	r2, #8
 80035b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	08da      	lsrs	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3208      	adds	r2, #8
 80035f2:	69b9      	ldr	r1, [r7, #24]
 80035f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0203 	and.w	r2, r3, #3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80b4 	beq.w	80037a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b60      	ldr	r3, [pc, #384]	@ (80037c0 <HAL_GPIO_Init+0x30c>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	4a5f      	ldr	r2, [pc, #380]	@ (80037c0 <HAL_GPIO_Init+0x30c>)
 8003644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003648:	6453      	str	r3, [r2, #68]	@ 0x44
 800364a:	4b5d      	ldr	r3, [pc, #372]	@ (80037c0 <HAL_GPIO_Init+0x30c>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003656:	4a5b      	ldr	r2, [pc, #364]	@ (80037c4 <HAL_GPIO_Init+0x310>)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3302      	adds	r3, #2
 800365e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	220f      	movs	r2, #15
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a52      	ldr	r2, [pc, #328]	@ (80037c8 <HAL_GPIO_Init+0x314>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d02b      	beq.n	80036da <HAL_GPIO_Init+0x226>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a51      	ldr	r2, [pc, #324]	@ (80037cc <HAL_GPIO_Init+0x318>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d025      	beq.n	80036d6 <HAL_GPIO_Init+0x222>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a50      	ldr	r2, [pc, #320]	@ (80037d0 <HAL_GPIO_Init+0x31c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01f      	beq.n	80036d2 <HAL_GPIO_Init+0x21e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4f      	ldr	r2, [pc, #316]	@ (80037d4 <HAL_GPIO_Init+0x320>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d019      	beq.n	80036ce <HAL_GPIO_Init+0x21a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4e      	ldr	r2, [pc, #312]	@ (80037d8 <HAL_GPIO_Init+0x324>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_Init+0x216>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4d      	ldr	r2, [pc, #308]	@ (80037dc <HAL_GPIO_Init+0x328>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_GPIO_Init+0x212>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4c      	ldr	r2, [pc, #304]	@ (80037e0 <HAL_GPIO_Init+0x32c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <HAL_GPIO_Init+0x20e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4b      	ldr	r2, [pc, #300]	@ (80037e4 <HAL_GPIO_Init+0x330>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_GPIO_Init+0x20a>
 80036ba:	2307      	movs	r3, #7
 80036bc:	e00e      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036be:	2308      	movs	r3, #8
 80036c0:	e00c      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036c2:	2306      	movs	r3, #6
 80036c4:	e00a      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036c6:	2305      	movs	r3, #5
 80036c8:	e008      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e006      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036ce:	2303      	movs	r3, #3
 80036d0:	e004      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e002      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_GPIO_Init+0x228>
 80036da:	2300      	movs	r3, #0
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	f002 0203 	and.w	r2, r2, #3
 80036e2:	0092      	lsls	r2, r2, #2
 80036e4:	4093      	lsls	r3, r2
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ec:	4935      	ldr	r1, [pc, #212]	@ (80037c4 <HAL_GPIO_Init+0x310>)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371e:	4a32      	ldr	r2, [pc, #200]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003724:	4b30      	ldr	r3, [pc, #192]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003748:	4a27      	ldr	r2, [pc, #156]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374e:	4b26      	ldr	r3, [pc, #152]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003772:	4a1d      	ldr	r2, [pc, #116]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800379c:	4a12      	ldr	r2, [pc, #72]	@ (80037e8 <HAL_GPIO_Init+0x334>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3301      	adds	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	f67f ae90 	bls.w	80034d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3724      	adds	r7, #36	@ 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40020000 	.word	0x40020000
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40020c00 	.word	0x40020c00
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40021400 	.word	0x40021400
 80037e0:	40021800 	.word	0x40021800
 80037e4:	40021c00 	.word	0x40021c00
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e0cd      	b.n	80039a4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003808:	2201      	movs	r2, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	f040 80bd 	bne.w	800399e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003824:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_GPIO_DeInit+0x1d0>)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	3302      	adds	r3, #2
 800382c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003830:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	220f      	movs	r2, #15
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a5d      	ldr	r2, [pc, #372]	@ (80039c0 <HAL_GPIO_DeInit+0x1d4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d02b      	beq.n	80038a6 <HAL_GPIO_DeInit+0xba>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a5c      	ldr	r2, [pc, #368]	@ (80039c4 <HAL_GPIO_DeInit+0x1d8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d025      	beq.n	80038a2 <HAL_GPIO_DeInit+0xb6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a5b      	ldr	r2, [pc, #364]	@ (80039c8 <HAL_GPIO_DeInit+0x1dc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01f      	beq.n	800389e <HAL_GPIO_DeInit+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5a      	ldr	r2, [pc, #360]	@ (80039cc <HAL_GPIO_DeInit+0x1e0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d019      	beq.n	800389a <HAL_GPIO_DeInit+0xae>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a59      	ldr	r2, [pc, #356]	@ (80039d0 <HAL_GPIO_DeInit+0x1e4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_DeInit+0xaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a58      	ldr	r2, [pc, #352]	@ (80039d4 <HAL_GPIO_DeInit+0x1e8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00d      	beq.n	8003892 <HAL_GPIO_DeInit+0xa6>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a57      	ldr	r2, [pc, #348]	@ (80039d8 <HAL_GPIO_DeInit+0x1ec>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <HAL_GPIO_DeInit+0xa2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a56      	ldr	r2, [pc, #344]	@ (80039dc <HAL_GPIO_DeInit+0x1f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_GPIO_DeInit+0x9e>
 8003886:	2307      	movs	r3, #7
 8003888:	e00e      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 800388a:	2308      	movs	r3, #8
 800388c:	e00c      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 800388e:	2306      	movs	r3, #6
 8003890:	e00a      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 8003892:	2305      	movs	r3, #5
 8003894:	e008      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 8003896:	2304      	movs	r3, #4
 8003898:	e006      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 800389a:	2303      	movs	r3, #3
 800389c:	e004      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 800389e:	2302      	movs	r3, #2
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_GPIO_DeInit+0xbc>
 80038a6:	2300      	movs	r3, #0
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	f002 0203 	and.w	r2, r2, #3
 80038ae:	0092      	lsls	r2, r2, #2
 80038b0:	4093      	lsls	r3, r2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d132      	bne.n	800391e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038b8:	4b49      	ldr	r3, [pc, #292]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	43db      	mvns	r3, r3
 80038c0:	4947      	ldr	r1, [pc, #284]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038c6:	4b46      	ldr	r3, [pc, #280]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	4944      	ldr	r1, [pc, #272]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038d4:	4b42      	ldr	r3, [pc, #264]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43db      	mvns	r3, r3
 80038dc:	4940      	ldr	r1, [pc, #256]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038de:	4013      	ands	r3, r2
 80038e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038e2:	4b3f      	ldr	r3, [pc, #252]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	493d      	ldr	r1, [pc, #244]	@ (80039e0 <HAL_GPIO_DeInit+0x1f4>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003900:	4a2e      	ldr	r2, [pc, #184]	@ (80039bc <HAL_GPIO_DeInit+0x1d0>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	43da      	mvns	r2, r3
 8003910:	482a      	ldr	r0, [pc, #168]	@ (80039bc <HAL_GPIO_DeInit+0x1d0>)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	400a      	ands	r2, r1
 8003918:	3302      	adds	r3, #2
 800391a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2103      	movs	r1, #3
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	08da      	lsrs	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3208      	adds	r2, #8
 800393c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	220f      	movs	r2, #15
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	08d2      	lsrs	r2, r2, #3
 8003954:	4019      	ands	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3208      	adds	r2, #8
 800395a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2103      	movs	r1, #3
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	2101      	movs	r1, #1
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	401a      	ands	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2103      	movs	r1, #3
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	401a      	ands	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3301      	adds	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f af2e 	bls.w	8003808 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40013800 	.word	0x40013800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40020400 	.word	0x40020400
 80039c8:	40020800 	.word	0x40020800
 80039cc:	40020c00 	.word	0x40020c00
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40021400 	.word	0x40021400
 80039d8:	40021800 	.word	0x40021800
 80039dc:	40021c00 	.word	0x40021c00
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
 8003a00:	e001      	b.n	8003a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a30:	e003      	b.n	8003a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a52:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a5e:	4a05      	ldr	r2, [pc, #20]	@ (8003a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe f854 	bl	8001b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013c00 	.word	0x40013c00

08003a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e12b      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe faec 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	@ 0x24
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003adc:	f002 fd3a 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a81      	ldr	r2, [pc, #516]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d807      	bhi.n	8003afc <HAL_I2C_Init+0x84>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a80      	ldr	r2, [pc, #512]	@ (8003cf0 <HAL_I2C_Init+0x278>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e006      	b.n	8003b0a <HAL_I2C_Init+0x92>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a7d      	ldr	r2, [pc, #500]	@ (8003cf4 <HAL_I2C_Init+0x27c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	bf94      	ite	ls
 8003b04:	2301      	movls	r3, #1
 8003b06:	2300      	movhi	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0e7      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a78      	ldr	r2, [pc, #480]	@ (8003cf8 <HAL_I2C_Init+0x280>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0c9b      	lsrs	r3, r3, #18
 8003b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a6a      	ldr	r2, [pc, #424]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d802      	bhi.n	8003b4c <HAL_I2C_Init+0xd4>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	e009      	b.n	8003b60 <HAL_I2C_Init+0xe8>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	4a69      	ldr	r2, [pc, #420]	@ (8003cfc <HAL_I2C_Init+0x284>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	3301      	adds	r3, #1
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	495c      	ldr	r1, [pc, #368]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d819      	bhi.n	8003bb4 <HAL_I2C_Init+0x13c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e59      	subs	r1, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8e:	1c59      	adds	r1, r3, #1
 8003b90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b94:	400b      	ands	r3, r1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_I2C_Init+0x138>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1e59      	subs	r1, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bae:	e051      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	e04f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <HAL_I2C_Init+0x168>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e012      	b.n	8003c06 <HAL_I2C_Init+0x18e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Init+0x196>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e022      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10e      	bne.n	8003c34 <HAL_I2C_Init+0x1bc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e58      	subs	r0, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	440b      	add	r3, r1
 8003c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c32:	e00f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	6809      	ldr	r1, [r1, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6911      	ldr	r1, [r2, #16]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	000186a0 	.word	0x000186a0
 8003cf0:	001e847f 	.word	0x001e847f
 8003cf4:	003d08ff 	.word	0x003d08ff
 8003cf8:	431bde83 	.word	0x431bde83
 8003cfc:	10624dd3 	.word	0x10624dd3

08003d00 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e021      	b.n	8003d56 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2224      	movs	r2, #36	@ 0x24
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe f9ee 	bl	800210c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	4608      	mov	r0, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	817b      	strh	r3, [r7, #10]
 8003d72:	460b      	mov	r3, r1
 8003d74:	813b      	strh	r3, [r7, #8]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d7a:	f7fe fe4b 	bl	8002a14 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	f040 80d9 	bne.w	8003f40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2319      	movs	r3, #25
 8003d94:	2201      	movs	r2, #1
 8003d96:	496d      	ldr	r1, [pc, #436]	@ (8003f4c <HAL_I2C_Mem_Write+0x1ec>)
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fc99 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0cc      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_I2C_Mem_Write+0x56>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0c5      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d007      	beq.n	8003ddc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2221      	movs	r2, #33	@ 0x21
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	@ 0x40
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f50 <HAL_I2C_Mem_Write+0x1f0>)
 8003e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e1e:	88f8      	ldrh	r0, [r7, #6]
 8003e20:	893a      	ldrh	r2, [r7, #8]
 8003e22:	8979      	ldrh	r1, [r7, #10]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fad0 	bl	80043d4 <I2C_RequestMemoryWrite>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d052      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e081      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fd5e 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d107      	bne.n	8003e66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06b      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_I2C_Mem_Write+0x180>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1aa      	bne.n	8003e3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fd51 	bl	8004994 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d107      	bne.n	8003f10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e016      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	00100002 	.word	0x00100002
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	@ 0x30
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f6e:	f7fe fd51 	bl	8002a14 <HAL_GetTick>
 8003f72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	f040 8214 	bne.w	80043aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2319      	movs	r3, #25
 8003f88:	2201      	movs	r2, #1
 8003f8a:	497b      	ldr	r1, [pc, #492]	@ (8004178 <HAL_I2C_Mem_Read+0x224>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fb9f 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e207      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Mem_Read+0x56>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e200      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d007      	beq.n	8003fd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2222      	movs	r2, #34	@ 0x22
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2240      	movs	r2, #64	@ 0x40
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a5b      	ldr	r2, [pc, #364]	@ (800417c <HAL_I2C_Mem_Read+0x228>)
 8004010:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004012:	88f8      	ldrh	r0, [r7, #6]
 8004014:	893a      	ldrh	r2, [r7, #8]
 8004016:	8979      	ldrh	r1, [r7, #10]
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4603      	mov	r3, r0
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fa6c 	bl	8004500 <I2C_RequestMemoryRead>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e1bc      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	623b      	str	r3, [r7, #32]
 800404e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e190      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004066:	2b01      	cmp	r3, #1
 8004068:	d11b      	bne.n	80040a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	e170      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d11b      	bne.n	80040e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	e150      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040f8:	e144      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	2b03      	cmp	r3, #3
 8004100:	f200 80f1 	bhi.w	80042e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004108:	2b01      	cmp	r3, #1
 800410a:	d123      	bne.n	8004154 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fc87 	bl	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e145      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004152:	e117      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004158:	2b02      	cmp	r3, #2
 800415a:	d14e      	bne.n	80041fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	2200      	movs	r2, #0
 8004164:	4906      	ldr	r1, [pc, #24]	@ (8004180 <HAL_I2C_Mem_Read+0x22c>)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fab2 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e11a      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
 8004176:	bf00      	nop
 8004178:	00100002 	.word	0x00100002
 800417c:	ffff0000 	.word	0xffff0000
 8004180:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041f8:	e0c4      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2200      	movs	r2, #0
 8004202:	496c      	ldr	r1, [pc, #432]	@ (80043b4 <HAL_I2C_Mem_Read+0x460>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fa63 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0cb      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	2200      	movs	r2, #0
 800425e:	4955      	ldr	r1, [pc, #340]	@ (80043b4 <HAL_I2C_Mem_Read+0x460>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fa35 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e09d      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042e4:	e04e      	b.n	8004384 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fb9a 	bl	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e058      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d124      	bne.n	8004384 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433e:	2b03      	cmp	r3, #3
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004350:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f aeb6 	bne.w	80040fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
  }
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3728      	adds	r7, #40	@ 0x28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	00010004 	.word	0x00010004

080043b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c6:	b2db      	uxtb	r3, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	460b      	mov	r3, r1
 80043e8:	813b      	strh	r3, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2200      	movs	r2, #0
 8004406:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f960 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004424:	d103      	bne.n	800442e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e05f      	b.n	80044f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004440:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	492d      	ldr	r1, [pc, #180]	@ (80044fc <I2C_RequestMemoryWrite+0x128>)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f9bb 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e04c      	b.n	80044f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004470:	6a39      	ldr	r1, [r7, #32]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fa46 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	2b04      	cmp	r3, #4
 8004484:	d107      	bne.n	8004496 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004494:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e02b      	b.n	80044f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a0:	893b      	ldrh	r3, [r7, #8]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	611a      	str	r2, [r3, #16]
 80044aa:	e021      	b.n	80044f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fa20 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d107      	bne.n	80044e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e005      	b.n	80044f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	00010002 	.word	0x00010002

08004500 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	4608      	mov	r0, r1
 800450a:	4611      	mov	r1, r2
 800450c:	461a      	mov	r2, r3
 800450e:	4603      	mov	r3, r0
 8004510:	817b      	strh	r3, [r7, #10]
 8004512:	460b      	mov	r3, r1
 8004514:	813b      	strh	r3, [r7, #8]
 8004516:	4613      	mov	r3, r2
 8004518:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004528:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	2200      	movs	r2, #0
 8004542:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f8c2 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004560:	d103      	bne.n	800456a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004568:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0aa      	b.n	80046c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800456e:	897b      	ldrh	r3, [r7, #10]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800457c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	6a3a      	ldr	r2, [r7, #32]
 8004582:	4952      	ldr	r1, [pc, #328]	@ (80046cc <I2C_RequestMemoryRead+0x1cc>)
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f91d 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e097      	b.n	80046c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	6a39      	ldr	r1, [r7, #32]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f9a8 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d107      	bne.n	80045d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e076      	b.n	80046c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045dc:	893b      	ldrh	r3, [r7, #8]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]
 80045e6:	e021      	b.n	800462c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045e8:	893b      	ldrh	r3, [r7, #8]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f8:	6a39      	ldr	r1, [r7, #32]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f982 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	2b04      	cmp	r3, #4
 800460c:	d107      	bne.n	800461e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e050      	b.n	80046c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004622:	893b      	ldrh	r3, [r7, #8]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462e:	6a39      	ldr	r1, [r7, #32]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f967 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	2b04      	cmp	r3, #4
 8004642:	d107      	bne.n	8004654 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004652:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e035      	b.n	80046c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004666:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	2200      	movs	r2, #0
 8004670:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f82b 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800468e:	d103      	bne.n	8004698 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004696:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e013      	b.n	80046c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800469c:	897b      	ldrh	r3, [r7, #10]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	6a3a      	ldr	r2, [r7, #32]
 80046b0:	4906      	ldr	r1, [pc, #24]	@ (80046cc <I2C_RequestMemoryRead+0x1cc>)
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f886 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	00010002 	.word	0x00010002

080046d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e0:	e048      	b.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d044      	beq.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fe f993 	bl	8002a14 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d139      	bne.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d10d      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x56>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	43da      	mvns	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	e00c      	b.n	8004740 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	43da      	mvns	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	429a      	cmp	r2, r3
 8004744:	d116      	bne.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e023      	b.n	80047bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d10d      	bne.n	800479a <I2C_WaitOnFlagUntilTimeout+0xca>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	43da      	mvns	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4013      	ands	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	e00c      	b.n	80047b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d093      	beq.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d2:	e071      	b.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e2:	d123      	bne.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	f043 0204 	orr.w	r2, r3, #4
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e067      	b.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d041      	beq.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004834:	f7fe f8ee 	bl	8002a14 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d136      	bne.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d10c      	bne.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	43da      	mvns	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4013      	ands	r3, r2
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e00b      	b.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	43da      	mvns	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4013      	ands	r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e021      	b.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10c      	bne.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	43da      	mvns	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4013      	ands	r3, r2
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e00b      	b.n	80048f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f af6d 	bne.w	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004910:	e034      	b.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f8e3 	bl	8004ade <I2C_IsAcknowledgeFailed>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e034      	b.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d028      	beq.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492a:	f7fe f873 	bl	8002a14 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d302      	bcc.n	8004940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11d      	bne.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b80      	cmp	r3, #128	@ 0x80
 800494c:	d016      	beq.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e007      	b.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004986:	2b80      	cmp	r3, #128	@ 0x80
 8004988:	d1c3      	bne.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a0:	e034      	b.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f89b 	bl	8004ade <I2C_IsAcknowledgeFailed>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e034      	b.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d028      	beq.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fe f82b 	bl	8002a14 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11d      	bne.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d016      	beq.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e007      	b.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d1c3      	bne.n	80049a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a30:	e049      	b.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d119      	bne.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e030      	b.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a74:	f7fd ffce 	bl	8002a14 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d11d      	bne.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d016      	beq.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e007      	b.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b40      	cmp	r3, #64	@ 0x40
 8004ad2:	d1ae      	bne.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af4:	d11b      	bne.n	8004b2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004afe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f043 0204 	orr.w	r2, r3, #4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e128      	b.n	8004da0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a90      	ldr	r2, [pc, #576]	@ (8004da8 <HAL_I2S_Init+0x26c>)
 8004b66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fd faf1 	bl	8002150 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004b84:	f023 030f 	bic.w	r3, r3, #15
 8004b88:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d060      	beq.n	8004c5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ba2:	2310      	movs	r3, #16
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	e001      	b.n	8004bac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ba8:	2320      	movs	r3, #32
 8004baa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d802      	bhi.n	8004bba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004bba:	2001      	movs	r0, #1
 8004bbc:	f001 fe32 	bl	8006824 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bc0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bca:	d125      	bne.n	8004c18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d010      	beq.n	8004bf6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	3305      	adds	r3, #5
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e01f      	b.n	8004c36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	461a      	mov	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	3305      	adds	r3, #5
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e00e      	b.n	8004c36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	3305      	adds	r3, #5
 8004c34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4a5c      	ldr	r2, [pc, #368]	@ (8004dac <HAL_I2S_Init+0x270>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	08db      	lsrs	r3, r3, #3
 8004c40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d902      	bls.n	8004c70 <HAL_I2S_Init+0x134>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2bff      	cmp	r3, #255	@ 0xff
 8004c6e:	d907      	bls.n	8004c80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c74:	f043 0210 	orr.w	r2, r3, #16
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e08f      	b.n	8004da0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	ea42 0103 	orr.w	r1, r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c9e:	f023 030f 	bic.w	r3, r3, #15
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6851      	ldr	r1, [r2, #4]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68d2      	ldr	r2, [r2, #12]
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6992      	ldr	r2, [r2, #24]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d161      	bne.n	8004d90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a38      	ldr	r2, [pc, #224]	@ (8004db0 <HAL_I2S_Init+0x274>)
 8004cd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a37      	ldr	r2, [pc, #220]	@ (8004db4 <HAL_I2S_Init+0x278>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_I2S_Init+0x1a4>
 8004cdc:	4b36      	ldr	r3, [pc, #216]	@ (8004db8 <HAL_I2S_Init+0x27c>)
 8004cde:	e001      	b.n	8004ce4 <HAL_I2S_Init+0x1a8>
 8004ce0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	4932      	ldr	r1, [pc, #200]	@ (8004db4 <HAL_I2S_Init+0x278>)
 8004cec:	428a      	cmp	r2, r1
 8004cee:	d101      	bne.n	8004cf4 <HAL_I2S_Init+0x1b8>
 8004cf0:	4a31      	ldr	r2, [pc, #196]	@ (8004db8 <HAL_I2S_Init+0x27c>)
 8004cf2:	e001      	b.n	8004cf8 <HAL_I2S_Init+0x1bc>
 8004cf4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004cf8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004cfc:	f023 030f 	bic.w	r3, r3, #15
 8004d00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2b      	ldr	r2, [pc, #172]	@ (8004db4 <HAL_I2S_Init+0x278>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2S_Init+0x1d4>
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004db8 <HAL_I2S_Init+0x27c>)
 8004d0e:	e001      	b.n	8004d14 <HAL_I2S_Init+0x1d8>
 8004d10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d14:	2202      	movs	r2, #2
 8004d16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a25      	ldr	r2, [pc, #148]	@ (8004db4 <HAL_I2S_Init+0x278>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_I2S_Init+0x1ea>
 8004d22:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <HAL_I2S_Init+0x27c>)
 8004d24:	e001      	b.n	8004d2a <HAL_I2S_Init+0x1ee>
 8004d26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d36:	d003      	beq.n	8004d40 <HAL_I2S_Init+0x204>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	e001      	b.n	8004d4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d56:	4313      	orrs	r3, r2
 8004d58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	897b      	ldrh	r3, [r7, #10]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004db4 <HAL_I2S_Init+0x278>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <HAL_I2S_Init+0x24c>
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <HAL_I2S_Init+0x27c>)
 8004d86:	e001      	b.n	8004d8c <HAL_I2S_Init+0x250>
 8004d88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d8c:	897a      	ldrh	r2, [r7, #10]
 8004d8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	08005639 	.word	0x08005639
 8004dac:	cccccccd 	.word	0xcccccccd
 8004db0:	080057c1 	.word	0x080057c1
 8004db4:	40003800 	.word	0x40003800
 8004db8:	40003400 	.word	0x40003400

08004dbc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_I2S_Transmit_DMA+0x1a>
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e08a      	b.n	8004ef0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d001      	beq.n	8004dea <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
 8004de8:	e082      	b.n	8004ef0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_I2S_Transmit_DMA+0x3e>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e07a      	b.n	8004ef0 <HAL_I2S_Transmit_DMA+0x134>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2203      	movs	r2, #3
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d002      	beq.n	8004e2e <HAL_I2S_Transmit_DMA+0x72>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d10a      	bne.n	8004e44 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e42:	e005      	b.n	8004e50 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	88fa      	ldrh	r2, [r7, #6]
 8004e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	4a28      	ldr	r2, [pc, #160]	@ (8004ef8 <HAL_I2S_Transmit_DMA+0x13c>)
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5c:	4a27      	ldr	r2, [pc, #156]	@ (8004efc <HAL_I2S_Transmit_DMA+0x140>)
 8004e5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	4a26      	ldr	r2, [pc, #152]	@ (8004f00 <HAL_I2S_Transmit_DMA+0x144>)
 8004e66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004e70:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004e78:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004e80:	f7fd ffe6 	bl	8002e50 <HAL_DMA_Start_IT>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00f      	beq.n	8004eaa <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f043 0208 	orr.w	r2, r3, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e022      	b.n	8004ef0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0202 	orr.w	r2, r2, #2
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d107      	bne.n	8004eee <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004eec:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	08005517 	.word	0x08005517
 8004efc:	080054d5 	.word	0x080054d5
 8004f00:	08005533 	.word	0x08005533

08004f04 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2S_DMAPause+0x18>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e04a      	b.n	8004fb2 <HAL_I2S_DMAPause+0xae>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d108      	bne.n	8004f42 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0202 	bic.w	r2, r2, #2
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	e032      	b.n	8004fa8 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d108      	bne.n	8004f60 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e023      	b.n	8004fa8 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	d11d      	bne.n	8004fa8 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0203 	bic.w	r2, r2, #3
 8004f7a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a0f      	ldr	r2, [pc, #60]	@ (8004fc0 <HAL_I2S_DMAPause+0xbc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <HAL_I2S_DMAPause+0x86>
 8004f86:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <HAL_I2S_DMAPause+0xc0>)
 8004f88:	e001      	b.n	8004f8e <HAL_I2S_DMAPause+0x8a>
 8004f8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	490a      	ldr	r1, [pc, #40]	@ (8004fc0 <HAL_I2S_DMAPause+0xbc>)
 8004f96:	428b      	cmp	r3, r1
 8004f98:	d101      	bne.n	8004f9e <HAL_I2S_DMAPause+0x9a>
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <HAL_I2S_DMAPause+0xc0>)
 8004f9c:	e001      	b.n	8004fa2 <HAL_I2S_DMAPause+0x9e>
 8004f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fa2:	f022 0203 	bic.w	r2, r2, #3
 8004fa6:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40003800 	.word	0x40003800
 8004fc4:	40003400 	.word	0x40003400

08004fc8 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_I2S_DMAResume+0x18>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e07d      	b.n	80050dc <HAL_I2S_DMAResume+0x114>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d108      	bne.n	8005006 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0202 	orr.w	r2, r2, #2
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	e056      	b.n	80050b4 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b04      	cmp	r3, #4
 8005010:	d108      	bne.n	8005024 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	e047      	b.n	80050b4 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b05      	cmp	r3, #5
 800502e:	d141      	bne.n	80050b4 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0203 	orr.w	r2, r2, #3
 800503e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a28      	ldr	r2, [pc, #160]	@ (80050e8 <HAL_I2S_DMAResume+0x120>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_I2S_DMAResume+0x86>
 800504a:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <HAL_I2S_DMAResume+0x124>)
 800504c:	e001      	b.n	8005052 <HAL_I2S_DMAResume+0x8a>
 800504e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4923      	ldr	r1, [pc, #140]	@ (80050e8 <HAL_I2S_DMAResume+0x120>)
 800505a:	428b      	cmp	r3, r1
 800505c:	d101      	bne.n	8005062 <HAL_I2S_DMAResume+0x9a>
 800505e:	4b23      	ldr	r3, [pc, #140]	@ (80050ec <HAL_I2S_DMAResume+0x124>)
 8005060:	e001      	b.n	8005066 <HAL_I2S_DMAResume+0x9e>
 8005062:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005066:	f042 0203 	orr.w	r2, r2, #3
 800506a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1d      	ldr	r2, [pc, #116]	@ (80050e8 <HAL_I2S_DMAResume+0x120>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d101      	bne.n	800507a <HAL_I2S_DMAResume+0xb2>
 8005076:	4b1d      	ldr	r3, [pc, #116]	@ (80050ec <HAL_I2S_DMAResume+0x124>)
 8005078:	e001      	b.n	800507e <HAL_I2S_DMAResume+0xb6>
 800507a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005084:	2b00      	cmp	r3, #0
 8005086:	d115      	bne.n	80050b4 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <HAL_I2S_DMAResume+0x120>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <HAL_I2S_DMAResume+0xce>
 8005092:	4b16      	ldr	r3, [pc, #88]	@ (80050ec <HAL_I2S_DMAResume+0x124>)
 8005094:	e001      	b.n	800509a <HAL_I2S_DMAResume+0xd2>
 8005096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4911      	ldr	r1, [pc, #68]	@ (80050e8 <HAL_I2S_DMAResume+0x120>)
 80050a2:	428b      	cmp	r3, r1
 80050a4:	d101      	bne.n	80050aa <HAL_I2S_DMAResume+0xe2>
 80050a6:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <HAL_I2S_DMAResume+0x124>)
 80050a8:	e001      	b.n	80050ae <HAL_I2S_DMAResume+0xe6>
 80050aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050b2:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d107      	bne.n	80050d2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050d0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40003800 	.word	0x40003800
 80050ec:	40003400 	.word	0x40003400

080050f0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005104:	d004      	beq.n	8005110 <HAL_I2S_DMAStop+0x20>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 80d1 	bne.w	80052b2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00f      	beq.n	8005138 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511c:	4618      	mov	r0, r3
 800511e:	f7fd feef 	bl	8002f00 <HAL_DMA_Abort>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512c:	f043 0208 	orr.w	r2, r3, #8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005138:	2364      	movs	r3, #100	@ 0x64
 800513a:	2201      	movs	r2, #1
 800513c:	2102      	movs	r1, #2
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fb04 	bl	800574c <I2S_WaitFlagStateUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00b      	beq.n	8005162 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	f043 0201 	orr.w	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005162:	2364      	movs	r3, #100	@ 0x64
 8005164:	2200      	movs	r2, #0
 8005166:	2180      	movs	r1, #128	@ 0x80
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 faef 	bl	800574c <I2S_WaitFlagStateUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	f043 0201 	orr.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800519a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0202 	bic.w	r2, r2, #2
 80051b8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	f040 8165 	bne.w	8005492 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00f      	beq.n	80051f0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fd fe93 	bl	8002f00 <HAL_DMA_Abort>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	f043 0208 	orr.w	r2, r3, #8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a8a      	ldr	r2, [pc, #552]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <HAL_I2S_DMAStop+0x10e>
 80051fa:	4b8a      	ldr	r3, [pc, #552]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 80051fc:	e001      	b.n	8005202 <HAL_I2S_DMAStop+0x112>
 80051fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4985      	ldr	r1, [pc, #532]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 800520a:	428b      	cmp	r3, r1
 800520c:	d101      	bne.n	8005212 <HAL_I2S_DMAStop+0x122>
 800520e:	4b85      	ldr	r3, [pc, #532]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 8005210:	e001      	b.n	8005216 <HAL_I2S_DMAStop+0x126>
 8005212:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800521a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a7e      	ldr	r2, [pc, #504]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <HAL_I2S_DMAStop+0x13e>
 800522a:	4b7e      	ldr	r3, [pc, #504]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 800522c:	e001      	b.n	8005232 <HAL_I2S_DMAStop+0x142>
 800522e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a79      	ldr	r2, [pc, #484]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <HAL_I2S_DMAStop+0x154>
 8005240:	4b78      	ldr	r3, [pc, #480]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 8005242:	e001      	b.n	8005248 <HAL_I2S_DMAStop+0x158>
 8005244:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a73      	ldr	r2, [pc, #460]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <HAL_I2S_DMAStop+0x16c>
 8005258:	4b72      	ldr	r3, [pc, #456]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 800525a:	e001      	b.n	8005260 <HAL_I2S_DMAStop+0x170>
 800525c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	496e      	ldr	r1, [pc, #440]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d101      	bne.n	8005270 <HAL_I2S_DMAStop+0x180>
 800526c:	4b6d      	ldr	r3, [pc, #436]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 800526e:	e001      	b.n	8005274 <HAL_I2S_DMAStop+0x184>
 8005270:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800529a:	e0fa      	b.n	8005492 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a5f      	ldr	r2, [pc, #380]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_I2S_DMAStop+0x1ba>
 80052a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 80052a8:	e001      	b.n	80052ae <HAL_I2S_DMAStop+0x1be>
 80052aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ae:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80052b0:	e0ef      	b.n	8005492 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ba:	d005      	beq.n	80052c8 <HAL_I2S_DMAStop+0x1d8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c4:	f040 80e5 	bne.w	8005492 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00f      	beq.n	80052f0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fd fe13 	bl	8002f00 <HAL_DMA_Abort>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e4:	f043 0208 	orr.w	r2, r3, #8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b05      	cmp	r3, #5
 80052fa:	f040 809a 	bne.w	8005432 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00f      	beq.n	8005326 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530a:	4618      	mov	r0, r3
 800530c:	f7fd fdf8 	bl	8002f00 <HAL_DMA_Abort>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	f043 0208 	orr.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005326:	f7fd fb75 	bl	8002a14 <HAL_GetTick>
 800532a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800532c:	e012      	b.n	8005354 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800532e:	f7fd fb71 	bl	8002a14 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	@ 0x64
 800533a:	d90b      	bls.n	8005354 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	f043 0201 	orr.w	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a31      	ldr	r2, [pc, #196]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_I2S_DMAStop+0x272>
 800535e:	4b31      	ldr	r3, [pc, #196]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 8005360:	e001      	b.n	8005366 <HAL_I2S_DMAStop+0x276>
 8005362:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d1de      	bne.n	800532e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005370:	e012      	b.n	8005398 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005372:	f7fd fb4f 	bl	8002a14 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b64      	cmp	r3, #100	@ 0x64
 800537e:	d90b      	bls.n	8005398 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005384:	f043 0201 	orr.w	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a20      	ldr	r2, [pc, #128]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d101      	bne.n	80053a6 <HAL_I2S_DMAStop+0x2b6>
 80053a2:	4b20      	ldr	r3, [pc, #128]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 80053a4:	e001      	b.n	80053aa <HAL_I2S_DMAStop+0x2ba>
 80053a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b0:	2b80      	cmp	r3, #128	@ 0x80
 80053b2:	d0de      	beq.n	8005372 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a19      	ldr	r2, [pc, #100]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d101      	bne.n	80053c2 <HAL_I2S_DMAStop+0x2d2>
 80053be:	4b19      	ldr	r3, [pc, #100]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 80053c0:	e001      	b.n	80053c6 <HAL_I2S_DMAStop+0x2d6>
 80053c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4914      	ldr	r1, [pc, #80]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 80053ce:	428b      	cmp	r3, r1
 80053d0:	d101      	bne.n	80053d6 <HAL_I2S_DMAStop+0x2e6>
 80053d2:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 80053d4:	e001      	b.n	80053da <HAL_I2S_DMAStop+0x2ea>
 80053d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053de:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d101      	bne.n	80053f2 <HAL_I2S_DMAStop+0x302>
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 80053f0:	e001      	b.n	80053f6 <HAL_I2S_DMAStop+0x306>
 80053f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a07      	ldr	r2, [pc, #28]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <HAL_I2S_DMAStop+0x31a>
 8005406:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 8005408:	e001      	b.n	800540e <HAL_I2S_DMAStop+0x31e>
 800540a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4902      	ldr	r1, [pc, #8]	@ (8005420 <HAL_I2S_DMAStop+0x330>)
 8005416:	428b      	cmp	r3, r1
 8005418:	d106      	bne.n	8005428 <HAL_I2S_DMAStop+0x338>
 800541a:	4b02      	ldr	r3, [pc, #8]	@ (8005424 <HAL_I2S_DMAStop+0x334>)
 800541c:	e006      	b.n	800542c <HAL_I2S_DMAStop+0x33c>
 800541e:	bf00      	nop
 8005420:	40003800 	.word	0x40003800
 8005424:	40003400 	.word	0x40003400
 8005428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800542c:	f022 0202 	bic.w	r2, r2, #2
 8005430:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005440:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005470:	d10c      	bne.n	800548c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e002      	b.n	8005492 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800549a:	7ffb      	ldrb	r3, [r7, #31]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c6:	b2db      	uxtb	r3, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10e      	bne.n	8005508 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0202 	bic.w	r2, r2, #2
 80054f8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7fb f915 	bl	8000738 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005522:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7fb f919 	bl	800075c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0203 	bic.w	r2, r2, #3
 800554e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005568:	f043 0208 	orr.w	r2, r3, #8
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7fb fa5f 	bl	8000a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10e      	bne.n	80055d2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fb f8b3 	bl	8000738 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	b292      	uxth	r2, r2
 80055ee:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10e      	bne.n	8005630 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005620:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff ff3a 	bl	80054a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b04      	cmp	r3, #4
 8005652:	d13a      	bne.n	80056ca <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d109      	bne.n	8005672 <I2S_IRQHandler+0x3a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005668:	2b40      	cmp	r3, #64	@ 0x40
 800566a:	d102      	bne.n	8005672 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ffb4 	bl	80055da <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b40      	cmp	r3, #64	@ 0x40
 800567a:	d126      	bne.n	80056ca <I2S_IRQHandler+0x92>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d11f      	bne.n	80056ca <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005698:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056bc:	f043 0202 	orr.w	r2, r3, #2
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fb f9b5 	bl	8000a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d136      	bne.n	8005744 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d109      	bne.n	80056f4 <I2S_IRQHandler+0xbc>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ea:	2b80      	cmp	r3, #128	@ 0x80
 80056ec:	d102      	bne.n	80056f4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff ff45 	bl	800557e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d122      	bne.n	8005744 <I2S_IRQHandler+0x10c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b20      	cmp	r3, #32
 800570a:	d11b      	bne.n	8005744 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800571a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb f978 	bl	8000a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005744:	bf00      	nop
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800575c:	f7fd f95a 	bl	8002a14 <HAL_GetTick>
 8005760:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005762:	e018      	b.n	8005796 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d014      	beq.n	8005796 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800576c:	f7fd f952 	bl	8002a14 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d902      	bls.n	8005782 <I2S_WaitFlagStateUntilTimeout+0x36>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e00f      	b.n	80057b6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d1d7      	bne.n	8005764 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a92      	ldr	r2, [pc, #584]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80057da:	4b92      	ldr	r3, [pc, #584]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057dc:	e001      	b.n	80057e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80057de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a8b      	ldr	r2, [pc, #556]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d101      	bne.n	80057fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80057f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057fa:	e001      	b.n	8005800 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80057fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800580c:	d004      	beq.n	8005818 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 8099 	bne.w	800594a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b02      	cmp	r3, #2
 8005820:	d107      	bne.n	8005832 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f925 	bl	8005a7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d107      	bne.n	800584c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9c8 	bl	8005bdc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b40      	cmp	r3, #64	@ 0x40
 8005854:	d13a      	bne.n	80058cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d035      	beq.n	80058cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6e      	ldr	r2, [pc, #440]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800586a:	4b6e      	ldr	r3, [pc, #440]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800586c:	e001      	b.n	8005872 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800586e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4969      	ldr	r1, [pc, #420]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800587a:	428b      	cmp	r3, r1
 800587c:	d101      	bne.n	8005882 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800587e:	4b69      	ldr	r3, [pc, #420]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005880:	e001      	b.n	8005886 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005882:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005886:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800588a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800589a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f043 0202 	orr.w	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fb f8b4 	bl	8000a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	f040 80c3 	bne.w	8005a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80bd 	beq.w	8005a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a49      	ldr	r2, [pc, #292]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80058fe:	4b49      	ldr	r3, [pc, #292]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005900:	e001      	b.n	8005906 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005902:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4944      	ldr	r1, [pc, #272]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800590e:	428b      	cmp	r3, r1
 8005910:	d101      	bne.n	8005916 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005912:	4b44      	ldr	r3, [pc, #272]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005914:	e001      	b.n	800591a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005916:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800591a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800591e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005920:	2300      	movs	r3, #0
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593a:	f043 0204 	orr.w	r2, r3, #4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fb f876 	bl	8000a34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005948:	e089      	b.n	8005a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d107      	bne.n	8005964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f8be 	bl	8005ae0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d107      	bne.n	800597e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8fd 	bl	8005b78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	d12f      	bne.n	80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d02a      	beq.n	80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d101      	bne.n	80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80059ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059ae:	e001      	b.n	80059b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80059b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4919      	ldr	r1, [pc, #100]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059bc:	428b      	cmp	r3, r1
 80059be:	d101      	bne.n	80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80059c0:	4b18      	ldr	r3, [pc, #96]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059c2:	e001      	b.n	80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80059c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb f826 	bl	8000a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d136      	bne.n	8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d031      	beq.n	8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a07      	ldr	r2, [pc, #28]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005a06:	4b07      	ldr	r3, [pc, #28]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a08:	e001      	b.n	8005a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005a0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4902      	ldr	r1, [pc, #8]	@ (8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a16:	428b      	cmp	r3, r1
 8005a18:	d106      	bne.n	8005a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005a1a:	4b02      	ldr	r3, [pc, #8]	@ (8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a1c:	e006      	b.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005a1e:	bf00      	nop
 8005a20:	40003800 	.word	0x40003800
 8005a24:	40003400 	.word	0x40003400
 8005a28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a30:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4e:	f043 0204 	orr.w	r2, r3, #4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fa ffec 	bl	8000a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a5c:	e000      	b.n	8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a5e:	bf00      	nop
}
 8005a60:	bf00      	nop
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	1c99      	adds	r1, r3, #2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005abc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ffc9 	bl	8005a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	1c99      	adds	r1, r3, #2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6251      	str	r1, [r2, #36]	@ 0x24
 8005af2:	8819      	ldrh	r1, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b70 <I2SEx_TxISR_I2SExt+0x90>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <I2SEx_TxISR_I2SExt+0x22>
 8005afe:	4b1d      	ldr	r3, [pc, #116]	@ (8005b74 <I2SEx_TxISR_I2SExt+0x94>)
 8005b00:	e001      	b.n	8005b06 <I2SEx_TxISR_I2SExt+0x26>
 8005b02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b06:	460a      	mov	r2, r1
 8005b08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d121      	bne.n	8005b66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a12      	ldr	r2, [pc, #72]	@ (8005b70 <I2SEx_TxISR_I2SExt+0x90>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <I2SEx_TxISR_I2SExt+0x50>
 8005b2c:	4b11      	ldr	r3, [pc, #68]	@ (8005b74 <I2SEx_TxISR_I2SExt+0x94>)
 8005b2e:	e001      	b.n	8005b34 <I2SEx_TxISR_I2SExt+0x54>
 8005b30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	490d      	ldr	r1, [pc, #52]	@ (8005b70 <I2SEx_TxISR_I2SExt+0x90>)
 8005b3c:	428b      	cmp	r3, r1
 8005b3e:	d101      	bne.n	8005b44 <I2SEx_TxISR_I2SExt+0x64>
 8005b40:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <I2SEx_TxISR_I2SExt+0x94>)
 8005b42:	e001      	b.n	8005b48 <I2SEx_TxISR_I2SExt+0x68>
 8005b44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff ff81 	bl	8005a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40003800 	.word	0x40003800
 8005b74:	40003400 	.word	0x40003400

08005b78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68d8      	ldr	r0, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	1c99      	adds	r1, r3, #2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005b90:	b282      	uxth	r2, r0
 8005b92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d113      	bne.n	8005bd4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff ff4a 	bl	8005a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a20      	ldr	r2, [pc, #128]	@ (8005c6c <I2SEx_RxISR_I2SExt+0x90>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <I2SEx_RxISR_I2SExt+0x16>
 8005bee:	4b20      	ldr	r3, [pc, #128]	@ (8005c70 <I2SEx_RxISR_I2SExt+0x94>)
 8005bf0:	e001      	b.n	8005bf6 <I2SEx_RxISR_I2SExt+0x1a>
 8005bf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bf6:	68d8      	ldr	r0, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	1c99      	adds	r1, r3, #2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005c02:	b282      	uxth	r2, r0
 8005c04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d121      	bne.n	8005c62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a12      	ldr	r2, [pc, #72]	@ (8005c6c <I2SEx_RxISR_I2SExt+0x90>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d101      	bne.n	8005c2c <I2SEx_RxISR_I2SExt+0x50>
 8005c28:	4b11      	ldr	r3, [pc, #68]	@ (8005c70 <I2SEx_RxISR_I2SExt+0x94>)
 8005c2a:	e001      	b.n	8005c30 <I2SEx_RxISR_I2SExt+0x54>
 8005c2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	490d      	ldr	r1, [pc, #52]	@ (8005c6c <I2SEx_RxISR_I2SExt+0x90>)
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	d101      	bne.n	8005c40 <I2SEx_RxISR_I2SExt+0x64>
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <I2SEx_RxISR_I2SExt+0x94>)
 8005c3e:	e001      	b.n	8005c44 <I2SEx_RxISR_I2SExt+0x68>
 8005c40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff ff03 	bl	8005a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40003800 	.word	0x40003800
 8005c70:	40003400 	.word	0x40003400

08005c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e267      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d075      	beq.n	8005d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c92:	4b88      	ldr	r3, [pc, #544]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9e:	4b85      	ldr	r3, [pc, #532]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d112      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005caa:	4b82      	ldr	r3, [pc, #520]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb6:	d10b      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb8:	4b7e      	ldr	r3, [pc, #504]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d05b      	beq.n	8005d7c <HAL_RCC_OscConfig+0x108>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d157      	bne.n	8005d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e242      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd8:	d106      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x74>
 8005cda:	4b76      	ldr	r3, [pc, #472]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a75      	ldr	r2, [pc, #468]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e01d      	b.n	8005d24 <HAL_RCC_OscConfig+0xb0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0x98>
 8005cf2:	4b70      	ldr	r3, [pc, #448]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a6f      	ldr	r2, [pc, #444]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6c      	ldr	r2, [pc, #432]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCC_OscConfig+0xb0>
 8005d0c:	4b69      	ldr	r3, [pc, #420]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a68      	ldr	r2, [pc, #416]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b66      	ldr	r3, [pc, #408]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a65      	ldr	r2, [pc, #404]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2c:	f7fc fe72 	bl	8002a14 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fc fe6e 	bl	8002a14 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	@ 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e207      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0xc0>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7fc fe5e 	bl	8002a14 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d5c:	f7fc fe5a 	bl	8002a14 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	@ 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e1f3      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	4b51      	ldr	r3, [pc, #324]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0xe8>
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d063      	beq.n	8005e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d96:	4b47      	ldr	r3, [pc, #284]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d11c      	bne.n	8005ddc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005da2:	4b44      	ldr	r3, [pc, #272]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d116      	bne.n	8005ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dae:	4b41      	ldr	r3, [pc, #260]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x152>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e1c7      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4937      	ldr	r1, [pc, #220]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dda:	e03a      	b.n	8005e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d020      	beq.n	8005e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de4:	4b34      	ldr	r3, [pc, #208]	@ (8005eb8 <HAL_RCC_OscConfig+0x244>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dea:	f7fc fe13 	bl	8002a14 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df2:	f7fc fe0f 	bl	8002a14 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e1a8      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e04:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e10:	4b28      	ldr	r3, [pc, #160]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4925      	ldr	r1, [pc, #148]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	600b      	str	r3, [r1, #0]
 8005e24:	e015      	b.n	8005e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e26:	4b24      	ldr	r3, [pc, #144]	@ (8005eb8 <HAL_RCC_OscConfig+0x244>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fc fdf2 	bl	8002a14 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e34:	f7fc fdee 	bl	8002a14 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e187      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e46:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d036      	beq.n	8005ecc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e66:	4b15      	ldr	r3, [pc, #84]	@ (8005ebc <HAL_RCC_OscConfig+0x248>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6c:	f7fc fdd2 	bl	8002a14 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e74:	f7fc fdce 	bl	8002a14 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e167      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e86:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <HAL_RCC_OscConfig+0x240>)
 8005e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x200>
 8005e92:	e01b      	b.n	8005ecc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e94:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <HAL_RCC_OscConfig+0x248>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9a:	f7fc fdbb 	bl	8002a14 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea0:	e00e      	b.n	8005ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ea2:	f7fc fdb7 	bl	8002a14 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d907      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e150      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	42470000 	.word	0x42470000
 8005ebc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec0:	4b88      	ldr	r3, [pc, #544]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1ea      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8097 	beq.w	8006008 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ede:	4b81      	ldr	r3, [pc, #516]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10f      	bne.n	8005f0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	4b7d      	ldr	r3, [pc, #500]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005efa:	4b7a      	ldr	r3, [pc, #488]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0a:	4b77      	ldr	r3, [pc, #476]	@ (80060e8 <HAL_RCC_OscConfig+0x474>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d118      	bne.n	8005f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f16:	4b74      	ldr	r3, [pc, #464]	@ (80060e8 <HAL_RCC_OscConfig+0x474>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a73      	ldr	r2, [pc, #460]	@ (80060e8 <HAL_RCC_OscConfig+0x474>)
 8005f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f22:	f7fc fd77 	bl	8002a14 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2a:	f7fc fd73 	bl	8002a14 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e10c      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80060e8 <HAL_RCC_OscConfig+0x474>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d106      	bne.n	8005f5e <HAL_RCC_OscConfig+0x2ea>
 8005f50:	4b64      	ldr	r3, [pc, #400]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f54:	4a63      	ldr	r2, [pc, #396]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f5c:	e01c      	b.n	8005f98 <HAL_RCC_OscConfig+0x324>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d10c      	bne.n	8005f80 <HAL_RCC_OscConfig+0x30c>
 8005f66:	4b5f      	ldr	r3, [pc, #380]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	f043 0304 	orr.w	r3, r3, #4
 8005f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f72:	4b5c      	ldr	r3, [pc, #368]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f76:	4a5b      	ldr	r2, [pc, #364]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f7e:	e00b      	b.n	8005f98 <HAL_RCC_OscConfig+0x324>
 8005f80:	4b58      	ldr	r3, [pc, #352]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f84:	4a57      	ldr	r2, [pc, #348]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f8c:	4b55      	ldr	r3, [pc, #340]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	4a54      	ldr	r2, [pc, #336]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005f92:	f023 0304 	bic.w	r3, r3, #4
 8005f96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d015      	beq.n	8005fcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa0:	f7fc fd38 	bl	8002a14 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa6:	e00a      	b.n	8005fbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa8:	f7fc fd34 	bl	8002a14 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e0cb      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fbe:	4b49      	ldr	r3, [pc, #292]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0ee      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x334>
 8005fca:	e014      	b.n	8005ff6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fcc:	f7fc fd22 	bl	8002a14 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd4:	f7fc fd1e 	bl	8002a14 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e0b5      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fea:	4b3e      	ldr	r3, [pc, #248]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1ee      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d105      	bne.n	8006008 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffc:	4b39      	ldr	r3, [pc, #228]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	4a38      	ldr	r2, [pc, #224]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8006002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006006:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80a1 	beq.w	8006154 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006012:	4b34      	ldr	r3, [pc, #208]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b08      	cmp	r3, #8
 800601c:	d05c      	beq.n	80060d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d141      	bne.n	80060aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006026:	4b31      	ldr	r3, [pc, #196]	@ (80060ec <HAL_RCC_OscConfig+0x478>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7fc fcf2 	bl	8002a14 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006034:	f7fc fcee 	bl	8002a14 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e087      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	4b27      	ldr	r3, [pc, #156]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69da      	ldr	r2, [r3, #28]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	019b      	lsls	r3, r3, #6
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	085b      	lsrs	r3, r3, #1
 800606a:	3b01      	subs	r3, #1
 800606c:	041b      	lsls	r3, r3, #16
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	061b      	lsls	r3, r3, #24
 8006076:	491b      	ldr	r1, [pc, #108]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800607c:	4b1b      	ldr	r3, [pc, #108]	@ (80060ec <HAL_RCC_OscConfig+0x478>)
 800607e:	2201      	movs	r2, #1
 8006080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006082:	f7fc fcc7 	bl	8002a14 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800608a:	f7fc fcc3 	bl	8002a14 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e05c      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609c:	4b11      	ldr	r3, [pc, #68]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_OscConfig+0x416>
 80060a8:	e054      	b.n	8006154 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060aa:	4b10      	ldr	r3, [pc, #64]	@ (80060ec <HAL_RCC_OscConfig+0x478>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fc fcb0 	bl	8002a14 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fc fcac 	bl	8002a14 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e045      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ca:	4b06      	ldr	r3, [pc, #24]	@ (80060e4 <HAL_RCC_OscConfig+0x470>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x444>
 80060d6:	e03d      	b.n	8006154 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e038      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40007000 	.word	0x40007000
 80060ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <HAL_RCC_OscConfig+0x4ec>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d028      	beq.n	8006150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d121      	bne.n	8006150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d11a      	bne.n	8006150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006120:	4013      	ands	r3, r2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006128:	4293      	cmp	r3, r2
 800612a:	d111      	bne.n	8006150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	3b01      	subs	r3, #1
 800613a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d107      	bne.n	8006150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40023800 	.word	0x40023800

08006164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0cc      	b.n	8006312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006178:	4b68      	ldr	r3, [pc, #416]	@ (800631c <HAL_RCC_ClockConfig+0x1b8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d90c      	bls.n	80061a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006186:	4b65      	ldr	r3, [pc, #404]	@ (800631c <HAL_RCC_ClockConfig+0x1b8>)
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800618e:	4b63      	ldr	r3, [pc, #396]	@ (800631c <HAL_RCC_ClockConfig+0x1b8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d001      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e0b8      	b.n	8006312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d020      	beq.n	80061ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b8:	4b59      	ldr	r3, [pc, #356]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4a58      	ldr	r2, [pc, #352]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d0:	4b53      	ldr	r3, [pc, #332]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4a52      	ldr	r2, [pc, #328]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061dc:	4b50      	ldr	r3, [pc, #320]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	494d      	ldr	r1, [pc, #308]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d044      	beq.n	8006284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d107      	bne.n	8006212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006202:	4b47      	ldr	r3, [pc, #284]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d119      	bne.n	8006242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e07f      	b.n	8006312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d003      	beq.n	8006222 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800621e:	2b03      	cmp	r3, #3
 8006220:	d107      	bne.n	8006232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006222:	4b3f      	ldr	r3, [pc, #252]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d109      	bne.n	8006242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e06f      	b.n	8006312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006232:	4b3b      	ldr	r3, [pc, #236]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e067      	b.n	8006312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006242:	4b37      	ldr	r3, [pc, #220]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f023 0203 	bic.w	r2, r3, #3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	4934      	ldr	r1, [pc, #208]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	4313      	orrs	r3, r2
 8006252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006254:	f7fc fbde 	bl	8002a14 <HAL_GetTick>
 8006258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	e00a      	b.n	8006272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800625c:	f7fc fbda 	bl	8002a14 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e04f      	b.n	8006312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006272:	4b2b      	ldr	r3, [pc, #172]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 020c 	and.w	r2, r3, #12
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	429a      	cmp	r2, r3
 8006282:	d1eb      	bne.n	800625c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006284:	4b25      	ldr	r3, [pc, #148]	@ (800631c <HAL_RCC_ClockConfig+0x1b8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d20c      	bcs.n	80062ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006292:	4b22      	ldr	r3, [pc, #136]	@ (800631c <HAL_RCC_ClockConfig+0x1b8>)
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800629a:	4b20      	ldr	r3, [pc, #128]	@ (800631c <HAL_RCC_ClockConfig+0x1b8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d001      	beq.n	80062ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e032      	b.n	8006312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d008      	beq.n	80062ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b8:	4b19      	ldr	r3, [pc, #100]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4916      	ldr	r1, [pc, #88]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062d6:	4b12      	ldr	r3, [pc, #72]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	490e      	ldr	r1, [pc, #56]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062ea:	f000 f821 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 80062ee:	4602      	mov	r2, r0
 80062f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	490a      	ldr	r1, [pc, #40]	@ (8006324 <HAL_RCC_ClockConfig+0x1c0>)
 80062fc:	5ccb      	ldrb	r3, [r1, r3]
 80062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006302:	4a09      	ldr	r2, [pc, #36]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 8006304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006306:	4b09      	ldr	r3, [pc, #36]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fc f86e 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40023c00 	.word	0x40023c00
 8006320:	40023800 	.word	0x40023800
 8006324:	0800f438 	.word	0x0800f438
 8006328:	20000038 	.word	0x20000038
 800632c:	20000040 	.word	0x20000040

08006330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006334:	b094      	sub	sp, #80	@ 0x50
 8006336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006348:	4b79      	ldr	r3, [pc, #484]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x200>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	2b08      	cmp	r3, #8
 8006352:	d00d      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x40>
 8006354:	2b08      	cmp	r3, #8
 8006356:	f200 80e1 	bhi.w	800651c <HAL_RCC_GetSysClockFreq+0x1ec>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_RCC_GetSysClockFreq+0x34>
 800635e:	2b04      	cmp	r3, #4
 8006360:	d003      	beq.n	800636a <HAL_RCC_GetSysClockFreq+0x3a>
 8006362:	e0db      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006364:	4b73      	ldr	r3, [pc, #460]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x204>)
 8006366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006368:	e0db      	b.n	8006522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800636a:	4b73      	ldr	r3, [pc, #460]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x208>)
 800636c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800636e:	e0d8      	b.n	8006522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006370:	4b6f      	ldr	r3, [pc, #444]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x200>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006378:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800637a:	4b6d      	ldr	r3, [pc, #436]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x200>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d063      	beq.n	800644e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006386:	4b6a      	ldr	r3, [pc, #424]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x200>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	099b      	lsrs	r3, r3, #6
 800638c:	2200      	movs	r2, #0
 800638e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006390:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006398:	633b      	str	r3, [r7, #48]	@ 0x30
 800639a:	2300      	movs	r3, #0
 800639c:	637b      	str	r3, [r7, #52]	@ 0x34
 800639e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80063a2:	4622      	mov	r2, r4
 80063a4:	462b      	mov	r3, r5
 80063a6:	f04f 0000 	mov.w	r0, #0
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	0159      	lsls	r1, r3, #5
 80063b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063b4:	0150      	lsls	r0, r2, #5
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4621      	mov	r1, r4
 80063bc:	1a51      	subs	r1, r2, r1
 80063be:	6139      	str	r1, [r7, #16]
 80063c0:	4629      	mov	r1, r5
 80063c2:	eb63 0301 	sbc.w	r3, r3, r1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063d4:	4659      	mov	r1, fp
 80063d6:	018b      	lsls	r3, r1, #6
 80063d8:	4651      	mov	r1, sl
 80063da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063de:	4651      	mov	r1, sl
 80063e0:	018a      	lsls	r2, r1, #6
 80063e2:	4651      	mov	r1, sl
 80063e4:	ebb2 0801 	subs.w	r8, r2, r1
 80063e8:	4659      	mov	r1, fp
 80063ea:	eb63 0901 	sbc.w	r9, r3, r1
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006402:	4690      	mov	r8, r2
 8006404:	4699      	mov	r9, r3
 8006406:	4623      	mov	r3, r4
 8006408:	eb18 0303 	adds.w	r3, r8, r3
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	462b      	mov	r3, r5
 8006410:	eb49 0303 	adc.w	r3, r9, r3
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006422:	4629      	mov	r1, r5
 8006424:	024b      	lsls	r3, r1, #9
 8006426:	4621      	mov	r1, r4
 8006428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800642c:	4621      	mov	r1, r4
 800642e:	024a      	lsls	r2, r1, #9
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006436:	2200      	movs	r2, #0
 8006438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800643c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006440:	f7f9 ff1e 	bl	8000280 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4613      	mov	r3, r2
 800644a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800644c:	e058      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800644e:	4b38      	ldr	r3, [pc, #224]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x200>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	099b      	lsrs	r3, r3, #6
 8006454:	2200      	movs	r2, #0
 8006456:	4618      	mov	r0, r3
 8006458:	4611      	mov	r1, r2
 800645a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	2300      	movs	r3, #0
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
 8006464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	f04f 0000 	mov.w	r0, #0
 8006470:	f04f 0100 	mov.w	r1, #0
 8006474:	0159      	lsls	r1, r3, #5
 8006476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647a:	0150      	lsls	r0, r2, #5
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4641      	mov	r1, r8
 8006482:	ebb2 0a01 	subs.w	sl, r2, r1
 8006486:	4649      	mov	r1, r9
 8006488:	eb63 0b01 	sbc.w	fp, r3, r1
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800649c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064a0:	ebb2 040a 	subs.w	r4, r2, sl
 80064a4:	eb63 050b 	sbc.w	r5, r3, fp
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	00eb      	lsls	r3, r5, #3
 80064b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b6:	00e2      	lsls	r2, r4, #3
 80064b8:	4614      	mov	r4, r2
 80064ba:	461d      	mov	r5, r3
 80064bc:	4643      	mov	r3, r8
 80064be:	18e3      	adds	r3, r4, r3
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	464b      	mov	r3, r9
 80064c4:	eb45 0303 	adc.w	r3, r5, r3
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064d6:	4629      	mov	r1, r5
 80064d8:	028b      	lsls	r3, r1, #10
 80064da:	4621      	mov	r1, r4
 80064dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064e0:	4621      	mov	r1, r4
 80064e2:	028a      	lsls	r2, r1, #10
 80064e4:	4610      	mov	r0, r2
 80064e6:	4619      	mov	r1, r3
 80064e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ea:	2200      	movs	r2, #0
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	61fa      	str	r2, [r7, #28]
 80064f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f4:	f7f9 fec4 	bl	8000280 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4613      	mov	r3, r2
 80064fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006500:	4b0b      	ldr	r3, [pc, #44]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x200>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	3301      	adds	r3, #1
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800651a:	e002      	b.n	8006522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x204>)
 800651e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006524:	4618      	mov	r0, r3
 8006526:	3750      	adds	r7, #80	@ 0x50
 8006528:	46bd      	mov	sp, r7
 800652a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800652e:	bf00      	nop
 8006530:	40023800 	.word	0x40023800
 8006534:	00f42400 	.word	0x00f42400
 8006538:	007a1200 	.word	0x007a1200

0800653c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006540:	4b03      	ldr	r3, [pc, #12]	@ (8006550 <HAL_RCC_GetHCLKFreq+0x14>)
 8006542:	681b      	ldr	r3, [r3, #0]
}
 8006544:	4618      	mov	r0, r3
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000038 	.word	0x20000038

08006554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006558:	f7ff fff0 	bl	800653c <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b05      	ldr	r3, [pc, #20]	@ (8006574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	0a9b      	lsrs	r3, r3, #10
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4903      	ldr	r1, [pc, #12]	@ (8006578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40023800 	.word	0x40023800
 8006578:	0800f448 	.word	0x0800f448

0800657c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006580:	f7ff ffdc 	bl	800653c <HAL_RCC_GetHCLKFreq>
 8006584:	4602      	mov	r2, r0
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	0b5b      	lsrs	r3, r3, #13
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	4903      	ldr	r1, [pc, #12]	@ (80065a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006592:	5ccb      	ldrb	r3, [r1, r3]
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006598:	4618      	mov	r0, r3
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40023800 	.word	0x40023800
 80065a0:	0800f448 	.word	0x0800f448

080065a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	220f      	movs	r2, #15
 80065b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065b4:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <HAL_RCC_GetClockConfig+0x5c>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0203 	and.w	r2, r3, #3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <HAL_RCC_GetClockConfig+0x5c>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006600 <HAL_RCC_GetClockConfig+0x5c>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065d8:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <HAL_RCC_GetClockConfig+0x5c>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	08db      	lsrs	r3, r3, #3
 80065de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065e6:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <HAL_RCC_GetClockConfig+0x60>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0207 	and.w	r2, r3, #7
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	601a      	str	r2, [r3, #0]
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800
 8006604:	40023c00 	.word	0x40023c00

08006608 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800662c:	2b00      	cmp	r3, #0
 800662e:	d035      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006630:	4b62      	ldr	r3, [pc, #392]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006636:	f7fc f9ed 	bl	8002a14 <HAL_GetTick>
 800663a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800663c:	e008      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800663e:	f7fc f9e9 	bl	8002a14 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e0b0      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006650:	4b5b      	ldr	r3, [pc, #364]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	019a      	lsls	r2, r3, #6
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	071b      	lsls	r3, r3, #28
 8006668:	4955      	ldr	r1, [pc, #340]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006670:	4b52      	ldr	r3, [pc, #328]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006676:	f7fc f9cd 	bl	8002a14 <HAL_GetTick>
 800667a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800667e:	f7fc f9c9 	bl	8002a14 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e090      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006690:	4b4b      	ldr	r3, [pc, #300]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0f0      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8083 	beq.w	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	4b44      	ldr	r3, [pc, #272]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	4a43      	ldr	r2, [pc, #268]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80066ba:	4b41      	ldr	r3, [pc, #260]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066c6:	4b3f      	ldr	r3, [pc, #252]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3e      	ldr	r2, [pc, #248]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066d2:	f7fc f99f 	bl	8002a14 <HAL_GetTick>
 80066d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066da:	f7fc f99b 	bl	8002a14 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e062      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80066ec:	4b35      	ldr	r3, [pc, #212]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066f8:	4b31      	ldr	r3, [pc, #196]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006700:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02f      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	429a      	cmp	r2, r3
 8006714:	d028      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006716:	4b2a      	ldr	r3, [pc, #168]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006720:	4b29      	ldr	r3, [pc, #164]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006726:	4b28      	ldr	r3, [pc, #160]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800672c:	4a24      	ldr	r2, [pc, #144]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006732:	4b23      	ldr	r3, [pc, #140]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d114      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800673e:	f7fc f969 	bl	8002a14 <HAL_GetTick>
 8006742:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006744:	e00a      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006746:	f7fc f965 	bl	8002a14 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006754:	4293      	cmp	r3, r2
 8006756:	d901      	bls.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e02a      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800675c:	4b18      	ldr	r3, [pc, #96]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0ee      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006774:	d10d      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006776:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678a:	490d      	ldr	r1, [pc, #52]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800678c:	4313      	orrs	r3, r2
 800678e:	608b      	str	r3, [r1, #8]
 8006790:	e005      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006792:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	4a0a      	ldr	r2, [pc, #40]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006798:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800679c:	6093      	str	r3, [r2, #8]
 800679e:	4b08      	ldr	r3, [pc, #32]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067aa:	4905      	ldr	r1, [pc, #20]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	42470068 	.word	0x42470068
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40007000 	.word	0x40007000
 80067c8:	42470e40 	.word	0x42470e40

080067cc <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2203      	movs	r2, #3
 80067d8:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80067da:	4b11      	ldr	r3, [pc, #68]	@ (8006820 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80067dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067e0:	099b      	lsrs	r3, r3, #6
 80067e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006820 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80067ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f0:	0f1b      	lsrs	r3, r3, #28
 80067f2:	f003 0207 	and.w	r2, r3, #7
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80067fa:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006802:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006804:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006808:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	40023800 	.word	0x40023800

08006824 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d13f      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006842:	4b24      	ldr	r3, [pc, #144]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d006      	beq.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006858:	d12f      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800685a:	4b1f      	ldr	r3, [pc, #124]	@ (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800685c:	617b      	str	r3, [r7, #20]
          break;
 800685e:	e02f      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006860:	4b1c      	ldr	r3, [pc, #112]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800686c:	d108      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800686e:	4b19      	ldr	r3, [pc, #100]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006876:	4a19      	ldr	r2, [pc, #100]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	e007      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006880:	4b14      	ldr	r3, [pc, #80]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006888:	4a15      	ldr	r2, [pc, #84]	@ (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800688a:	fbb2 f3f3 	udiv	r3, r2, r3
 800688e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006890:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80068a4:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068aa:	0f1b      	lsrs	r3, r3, #28
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b6:	617b      	str	r3, [r7, #20]
          break;
 80068b8:	e002      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
          break;
 80068be:	bf00      	nop
        }
      }
      break;
 80068c0:	e000      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80068c2:	bf00      	nop
    }
  }
  return frequency;
 80068c4:	697b      	ldr	r3, [r7, #20]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800
 80068d8:	00bb8000 	.word	0x00bb8000
 80068dc:	007a1200 	.word	0x007a1200
 80068e0:	00f42400 	.word	0x00f42400

080068e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e07b      	b.n	80069ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d108      	bne.n	8006910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006906:	d009      	beq.n	800691c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	61da      	str	r2, [r3, #28]
 800690e:	e005      	b.n	800691c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fb fcc8 	bl	80022cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006952:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a0:	ea42 0103 	orr.w	r1, r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	0c1b      	lsrs	r3, r3, #16
 80069ba:	f003 0104 	and.w	r1, r3, #4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	f003 0210 	and.w	r2, r3, #16
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b088      	sub	sp, #32
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	603b      	str	r3, [r7, #0]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a06:	f7fc f805 	bl	8002a14 <HAL_GetTick>
 8006a0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006a0c:	88fb      	ldrh	r3, [r7, #6]
 8006a0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e12a      	b.n	8006c76 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_SPI_Transmit+0x36>
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e122      	b.n	8006c76 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_SPI_Transmit+0x48>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e11b      	b.n	8006c76 <HAL_SPI_Transmit+0x280>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2203      	movs	r2, #3
 8006a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	88fa      	ldrh	r2, [r7, #6]
 8006a5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a8c:	d10f      	bne.n	8006aae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006aac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab8:	2b40      	cmp	r3, #64	@ 0x40
 8006aba:	d007      	beq.n	8006acc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ad4:	d152      	bne.n	8006b7c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_SPI_Transmit+0xee>
 8006ade:	8b7b      	ldrh	r3, [r7, #26]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d145      	bne.n	8006b70 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	881a      	ldrh	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af4:	1c9a      	adds	r2, r3, #2
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b08:	e032      	b.n	8006b70 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d112      	bne.n	8006b3e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	881a      	ldrh	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	1c9a      	adds	r2, r3, #2
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b3c:	e018      	b.n	8006b70 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b3e:	f7fb ff69 	bl	8002a14 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d803      	bhi.n	8006b56 <HAL_SPI_Transmit+0x160>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d102      	bne.n	8006b5c <HAL_SPI_Transmit+0x166>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e082      	b.n	8006c76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1c7      	bne.n	8006b0a <HAL_SPI_Transmit+0x114>
 8006b7a:	e053      	b.n	8006c24 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <HAL_SPI_Transmit+0x194>
 8006b84:	8b7b      	ldrh	r3, [r7, #26]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d147      	bne.n	8006c1a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	7812      	ldrb	r2, [r2, #0]
 8006b96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bb0:	e033      	b.n	8006c1a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d113      	bne.n	8006be8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	7812      	ldrb	r2, [r2, #0]
 8006bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006be6:	e018      	b.n	8006c1a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be8:	f7fb ff14 	bl	8002a14 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d803      	bhi.n	8006c00 <HAL_SPI_Transmit+0x20a>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	d102      	bne.n	8006c06 <HAL_SPI_Transmit+0x210>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e02d      	b.n	8006c76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1c6      	bne.n	8006bb2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fa59 	bl	80070e0 <SPI_EndRxTxTransaction>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c74:	2300      	movs	r3, #0
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b08a      	sub	sp, #40	@ 0x28
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c90:	f7fb fec0 	bl	8002a14 <HAL_GetTick>
 8006c94:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c9c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006ca4:	887b      	ldrh	r3, [r7, #2]
 8006ca6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ca8:	7ffb      	ldrb	r3, [r7, #31]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d00c      	beq.n	8006cc8 <HAL_SPI_TransmitReceive+0x4a>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cb4:	d106      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x46>
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d001      	beq.n	8006cc8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e17f      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_SPI_TransmitReceive+0x5c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_SPI_TransmitReceive+0x5c>
 8006cd4:	887b      	ldrh	r3, [r7, #2]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e174      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_SPI_TransmitReceive+0x6e>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e16d      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x34a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d003      	beq.n	8006d08 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2205      	movs	r2, #5
 8006d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	887a      	ldrh	r2, [r7, #2]
 8006d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	887a      	ldrh	r2, [r7, #2]
 8006d1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	887a      	ldrh	r2, [r7, #2]
 8006d2a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	887a      	ldrh	r2, [r7, #2]
 8006d30:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d48:	2b40      	cmp	r3, #64	@ 0x40
 8006d4a:	d007      	beq.n	8006d5c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d64:	d17e      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_SPI_TransmitReceive+0xf6>
 8006d6e:	8afb      	ldrh	r3, [r7, #22]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d16c      	bne.n	8006e4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d84:	1c9a      	adds	r2, r3, #2
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d98:	e059      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d11b      	bne.n	8006de0 <HAL_SPI_TransmitReceive+0x162>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <HAL_SPI_TransmitReceive+0x162>
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d113      	bne.n	8006de0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbc:	881a      	ldrh	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d119      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x1a4>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d014      	beq.n	8006e22 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	b292      	uxth	r2, r2
 8006e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0a:	1c9a      	adds	r2, r3, #2
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e22:	f7fb fdf7 	bl	8002a14 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d80d      	bhi.n	8006e4e <HAL_SPI_TransmitReceive+0x1d0>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d009      	beq.n	8006e4e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e0bc      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1a0      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x11c>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d19b      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x11c>
 8006e62:	e082      	b.n	8006f6a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_SPI_TransmitReceive+0x1f4>
 8006e6c:	8afb      	ldrh	r3, [r7, #22]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d171      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	7812      	ldrb	r2, [r2, #0]
 8006e7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e98:	e05d      	b.n	8006f56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d11c      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x264>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d017      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x264>
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d114      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d119      	bne.n	8006f24 <HAL_SPI_TransmitReceive+0x2a6>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d014      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f20:	2301      	movs	r3, #1
 8006f22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f24:	f7fb fd76 	bl	8002a14 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d803      	bhi.n	8006f3c <HAL_SPI_TransmitReceive+0x2be>
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d102      	bne.n	8006f42 <HAL_SPI_TransmitReceive+0x2c4>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e038      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d19c      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x21c>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d197      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f6a:	6a3a      	ldr	r2, [r7, #32]
 8006f6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f8b6 	bl	80070e0 <SPI_EndRxTxTransaction>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d008      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e01d      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3728      	adds	r7, #40	@ 0x28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fe0:	f7fb fd18 	bl	8002a14 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4413      	add	r3, r2
 8006fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ff0:	f7fb fd10 	bl	8002a14 <HAL_GetTick>
 8006ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ff6:	4b39      	ldr	r3, [pc, #228]	@ (80070dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	015b      	lsls	r3, r3, #5
 8006ffc:	0d1b      	lsrs	r3, r3, #20
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	fb02 f303 	mul.w	r3, r2, r3
 8007004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007006:	e054      	b.n	80070b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d050      	beq.n	80070b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007010:	f7fb fd00 	bl	8002a14 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	429a      	cmp	r2, r3
 800701e:	d902      	bls.n	8007026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d13d      	bne.n	80070a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800703e:	d111      	bne.n	8007064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007048:	d004      	beq.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007052:	d107      	bne.n	8007064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706c:	d10f      	bne.n	800708e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800708c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e017      	b.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bf0c      	ite	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	2300      	movne	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d19b      	bne.n	8007008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000038 	.word	0x20000038

080070e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2201      	movs	r2, #1
 80070f4:	2102      	movs	r1, #2
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff ff6a 	bl	8006fd0 <SPI_WaitFlagStateUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007106:	f043 0220 	orr.w	r2, r3, #32
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e032      	b.n	8007178 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007112:	4b1b      	ldr	r3, [pc, #108]	@ (8007180 <SPI_EndRxTxTransaction+0xa0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1b      	ldr	r2, [pc, #108]	@ (8007184 <SPI_EndRxTxTransaction+0xa4>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	0d5b      	lsrs	r3, r3, #21
 800711e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007130:	d112      	bne.n	8007158 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2200      	movs	r2, #0
 800713a:	2180      	movs	r1, #128	@ 0x80
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ff47 	bl	8006fd0 <SPI_WaitFlagStateUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d016      	beq.n	8007176 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714c:	f043 0220 	orr.w	r2, r3, #32
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e00f      	b.n	8007178 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	3b01      	subs	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800716e:	2b80      	cmp	r3, #128	@ 0x80
 8007170:	d0f2      	beq.n	8007158 <SPI_EndRxTxTransaction+0x78>
 8007172:	e000      	b.n	8007176 <SPI_EndRxTxTransaction+0x96>
        break;
 8007174:	bf00      	nop
  }

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000038 	.word	0x20000038
 8007184:	165e9f81 	.word	0x165e9f81

08007188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e041      	b.n	800721e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f839 	bl	8007226 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f000 f9c0 	bl	800754c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	d001      	beq.n	8007254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e04e      	b.n	80072f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a23      	ldr	r2, [pc, #140]	@ (8007300 <HAL_TIM_Base_Start_IT+0xc4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d022      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x80>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800727e:	d01d      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x80>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1f      	ldr	r2, [pc, #124]	@ (8007304 <HAL_TIM_Base_Start_IT+0xc8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d018      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x80>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1e      	ldr	r2, [pc, #120]	@ (8007308 <HAL_TIM_Base_Start_IT+0xcc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d013      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x80>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1c      	ldr	r2, [pc, #112]	@ (800730c <HAL_TIM_Base_Start_IT+0xd0>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00e      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x80>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007310 <HAL_TIM_Base_Start_IT+0xd4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d009      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x80>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a19      	ldr	r2, [pc, #100]	@ (8007314 <HAL_TIM_Base_Start_IT+0xd8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d004      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x80>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a18      	ldr	r2, [pc, #96]	@ (8007318 <HAL_TIM_Base_Start_IT+0xdc>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d111      	bne.n	80072e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b06      	cmp	r3, #6
 80072cc:	d010      	beq.n	80072f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0201 	orr.w	r2, r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072de:	e007      	b.n	80072f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40010400 	.word	0x40010400
 8007314:	40014000 	.word	0x40014000
 8007318:	40001800 	.word	0x40001800

0800731c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d020      	beq.n	8007380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01b      	beq.n	8007380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0202 	mvn.w	r2, #2
 8007350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8d2 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 800736c:	e005      	b.n	800737a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f8c4 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8d5 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d020      	beq.n	80073cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01b      	beq.n	80073cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0204 	mvn.w	r2, #4
 800739c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f8ac 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 80073b8:	e005      	b.n	80073c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f89e 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8af 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d020      	beq.n	8007418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01b      	beq.n	8007418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0208 	mvn.w	r2, #8
 80073e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2204      	movs	r2, #4
 80073ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f886 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 8007404:	e005      	b.n	8007412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f878 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f889 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 0310 	and.w	r3, r3, #16
 800741e:	2b00      	cmp	r3, #0
 8007420:	d020      	beq.n	8007464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01b      	beq.n	8007464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0210 	mvn.w	r2, #16
 8007434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2208      	movs	r2, #8
 800743a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f860 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 8007450:	e005      	b.n	800745e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f852 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f863 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00c      	beq.n	8007488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0201 	mvn.w	r2, #1
 8007480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fa fd96 	bl	8001fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00c      	beq.n	80074ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80074a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f906 	bl	80076b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00c      	beq.n	80074d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f834 	bl	8007538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00c      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0220 	mvn.w	r2, #32
 80074ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8d8 	bl	80076a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a46      	ldr	r2, [pc, #280]	@ (8007678 <TIM_Base_SetConfig+0x12c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756a:	d00f      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a43      	ldr	r2, [pc, #268]	@ (800767c <TIM_Base_SetConfig+0x130>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00b      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a42      	ldr	r2, [pc, #264]	@ (8007680 <TIM_Base_SetConfig+0x134>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d007      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a41      	ldr	r2, [pc, #260]	@ (8007684 <TIM_Base_SetConfig+0x138>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a40      	ldr	r2, [pc, #256]	@ (8007688 <TIM_Base_SetConfig+0x13c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d108      	bne.n	800759e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a35      	ldr	r2, [pc, #212]	@ (8007678 <TIM_Base_SetConfig+0x12c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d02b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ac:	d027      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a32      	ldr	r2, [pc, #200]	@ (800767c <TIM_Base_SetConfig+0x130>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d023      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a31      	ldr	r2, [pc, #196]	@ (8007680 <TIM_Base_SetConfig+0x134>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01f      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a30      	ldr	r2, [pc, #192]	@ (8007684 <TIM_Base_SetConfig+0x138>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007688 <TIM_Base_SetConfig+0x13c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d017      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2e      	ldr	r2, [pc, #184]	@ (800768c <TIM_Base_SetConfig+0x140>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007690 <TIM_Base_SetConfig+0x144>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00f      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007694 <TIM_Base_SetConfig+0x148>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007698 <TIM_Base_SetConfig+0x14c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a2a      	ldr	r2, [pc, #168]	@ (800769c <TIM_Base_SetConfig+0x150>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a29      	ldr	r2, [pc, #164]	@ (80076a0 <TIM_Base_SetConfig+0x154>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d108      	bne.n	8007610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a10      	ldr	r2, [pc, #64]	@ (8007678 <TIM_Base_SetConfig+0x12c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_Base_SetConfig+0xf8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a12      	ldr	r2, [pc, #72]	@ (8007688 <TIM_Base_SetConfig+0x13c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d103      	bne.n	800764c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b01      	cmp	r3, #1
 800765c:	d105      	bne.n	800766a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f023 0201 	bic.w	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	611a      	str	r2, [r3, #16]
  }
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	40010000 	.word	0x40010000
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40010400 	.word	0x40010400
 800768c:	40014000 	.word	0x40014000
 8007690:	40014400 	.word	0x40014400
 8007694:	40014800 	.word	0x40014800
 8007698:	40001800 	.word	0x40001800
 800769c:	40001c00 	.word	0x40001c00
 80076a0:	40002000 	.word	0x40002000

080076a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e042      	b.n	8007764 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fa fe32 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2224      	movs	r2, #36	@ 0x24
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800770e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f973 	bl	80079fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	@ 0x28
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4613      	mov	r3, r2
 800777a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b20      	cmp	r3, #32
 800778a:	d175      	bne.n	8007878 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_UART_Transmit+0x2c>
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e06e      	b.n	800787a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2221      	movs	r2, #33	@ 0x21
 80077a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077aa:	f7fb f933 	bl	8002a14 <HAL_GetTick>
 80077ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c4:	d108      	bne.n	80077d8 <HAL_UART_Transmit+0x6c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d104      	bne.n	80077d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	61bb      	str	r3, [r7, #24]
 80077d6:	e003      	b.n	80077e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077e0:	e02e      	b.n	8007840 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2200      	movs	r2, #0
 80077ea:	2180      	movs	r1, #128	@ 0x80
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f848 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e03a      	b.n	800787a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007818:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	3302      	adds	r3, #2
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	e007      	b.n	8007832 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	3301      	adds	r3, #1
 8007830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1cb      	bne.n	80077e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2200      	movs	r2, #0
 8007852:	2140      	movs	r1, #64	@ 0x40
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 f814 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e006      	b.n	800787a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	e000      	b.n	800787a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007878:	2302      	movs	r3, #2
  }
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007892:	e03b      	b.n	800790c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d037      	beq.n	800790c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789c:	f7fb f8ba 	bl	8002a14 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d302      	bcc.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e03a      	b.n	800792c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d023      	beq.n	800790c <UART_WaitOnFlagUntilTimeout+0x8a>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b80      	cmp	r3, #128	@ 0x80
 80078c8:	d020      	beq.n	800790c <UART_WaitOnFlagUntilTimeout+0x8a>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b40      	cmp	r3, #64	@ 0x40
 80078ce:	d01d      	beq.n	800790c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d116      	bne.n	800790c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f81d 	bl	8007934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2208      	movs	r2, #8
 80078fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e00f      	b.n	800792c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4013      	ands	r3, r2
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	429a      	cmp	r2, r3
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	429a      	cmp	r2, r3
 8007928:	d0b4      	beq.n	8007894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b095      	sub	sp, #84	@ 0x54
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800795c:	643a      	str	r2, [r7, #64]	@ 0x40
 800795e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e5      	bne.n	800793c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3314      	adds	r3, #20
 8007976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3314      	adds	r3, #20
 800798e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d119      	bne.n	80079e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	330c      	adds	r3, #12
 80079b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f023 0310 	bic.w	r3, r3, #16
 80079c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079cc:	61ba      	str	r2, [r7, #24]
 80079ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6979      	ldr	r1, [r7, #20]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	613b      	str	r3, [r7, #16]
   return(result);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80079ee:	bf00      	nop
 80079f0:	3754      	adds	r7, #84	@ 0x54
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a00:	b0c0      	sub	sp, #256	@ 0x100
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a18:	68d9      	ldr	r1, [r3, #12]
 8007a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	ea40 0301 	orr.w	r3, r0, r1
 8007a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a54:	f021 010c 	bic.w	r1, r1, #12
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a62:	430b      	orrs	r3, r1
 8007a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a76:	6999      	ldr	r1, [r3, #24]
 8007a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	ea40 0301 	orr.w	r3, r0, r1
 8007a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8007cc8 <UART_SetConfig+0x2cc>)
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d005      	beq.n	8007a9c <UART_SetConfig+0xa0>
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b8d      	ldr	r3, [pc, #564]	@ (8007ccc <UART_SetConfig+0x2d0>)
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d104      	bne.n	8007aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a9c:	f7fe fd6e 	bl	800657c <HAL_RCC_GetPCLK2Freq>
 8007aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007aa4:	e003      	b.n	8007aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aa6:	f7fe fd55 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
 8007aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ab8:	f040 810c 	bne.w	8007cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ace:	4622      	mov	r2, r4
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	1891      	adds	r1, r2, r2
 8007ad4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ad6:	415b      	adcs	r3, r3
 8007ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ade:	4621      	mov	r1, r4
 8007ae0:	eb12 0801 	adds.w	r8, r2, r1
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	eb43 0901 	adc.w	r9, r3, r1
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007afe:	4690      	mov	r8, r2
 8007b00:	4699      	mov	r9, r3
 8007b02:	4623      	mov	r3, r4
 8007b04:	eb18 0303 	adds.w	r3, r8, r3
 8007b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	eb49 0303 	adc.w	r3, r9, r3
 8007b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	18db      	adds	r3, r3, r3
 8007b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b30:	4613      	mov	r3, r2
 8007b32:	eb42 0303 	adc.w	r3, r2, r3
 8007b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b40:	f7f8 fb9e 	bl	8000280 <__aeabi_uldivmod>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4b61      	ldr	r3, [pc, #388]	@ (8007cd0 <UART_SetConfig+0x2d4>)
 8007b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	011c      	lsls	r4, r3, #4
 8007b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	1891      	adds	r1, r2, r2
 8007b6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b6c:	415b      	adcs	r3, r3
 8007b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b74:	4641      	mov	r1, r8
 8007b76:	eb12 0a01 	adds.w	sl, r2, r1
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b94:	4692      	mov	sl, r2
 8007b96:	469b      	mov	fp, r3
 8007b98:	4643      	mov	r3, r8
 8007b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	18db      	adds	r3, r3, r3
 8007bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	eb42 0303 	adc.w	r3, r2, r3
 8007bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007bd6:	f7f8 fb53 	bl	8000280 <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4611      	mov	r1, r2
 8007be0:	4b3b      	ldr	r3, [pc, #236]	@ (8007cd0 <UART_SetConfig+0x2d4>)
 8007be2:	fba3 2301 	umull	r2, r3, r3, r1
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	2264      	movs	r2, #100	@ 0x64
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	1acb      	subs	r3, r1, r3
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007bf6:	4b36      	ldr	r3, [pc, #216]	@ (8007cd0 <UART_SetConfig+0x2d4>)
 8007bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c04:	441c      	add	r4, r3
 8007c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c18:	4642      	mov	r2, r8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	1891      	adds	r1, r2, r2
 8007c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c20:	415b      	adcs	r3, r3
 8007c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c28:	4641      	mov	r1, r8
 8007c2a:	1851      	adds	r1, r2, r1
 8007c2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c2e:	4649      	mov	r1, r9
 8007c30:	414b      	adcs	r3, r1
 8007c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c40:	4659      	mov	r1, fp
 8007c42:	00cb      	lsls	r3, r1, #3
 8007c44:	4651      	mov	r1, sl
 8007c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c4a:	4651      	mov	r1, sl
 8007c4c:	00ca      	lsls	r2, r1, #3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	4642      	mov	r2, r8
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	460a      	mov	r2, r1
 8007c60:	eb42 0303 	adc.w	r3, r2, r3
 8007c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	18db      	adds	r3, r3, r3
 8007c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c82:	4613      	mov	r3, r2
 8007c84:	eb42 0303 	adc.w	r3, r2, r3
 8007c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c92:	f7f8 faf5 	bl	8000280 <__aeabi_uldivmod>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd0 <UART_SetConfig+0x2d4>)
 8007c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	2164      	movs	r1, #100	@ 0x64
 8007ca4:	fb01 f303 	mul.w	r3, r1, r3
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	3332      	adds	r3, #50	@ 0x32
 8007cae:	4a08      	ldr	r2, [pc, #32]	@ (8007cd0 <UART_SetConfig+0x2d4>)
 8007cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	f003 0207 	and.w	r2, r3, #7
 8007cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4422      	add	r2, r4
 8007cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cc4:	e106      	b.n	8007ed4 <UART_SetConfig+0x4d8>
 8007cc6:	bf00      	nop
 8007cc8:	40011000 	.word	0x40011000
 8007ccc:	40011400 	.word	0x40011400
 8007cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007ce6:	4642      	mov	r2, r8
 8007ce8:	464b      	mov	r3, r9
 8007cea:	1891      	adds	r1, r2, r2
 8007cec:	6239      	str	r1, [r7, #32]
 8007cee:	415b      	adcs	r3, r3
 8007cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	1854      	adds	r4, r2, r1
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	eb43 0501 	adc.w	r5, r3, r1
 8007d00:	f04f 0200 	mov.w	r2, #0
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	00eb      	lsls	r3, r5, #3
 8007d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d0e:	00e2      	lsls	r2, r4, #3
 8007d10:	4614      	mov	r4, r2
 8007d12:	461d      	mov	r5, r3
 8007d14:	4643      	mov	r3, r8
 8007d16:	18e3      	adds	r3, r4, r3
 8007d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	eb45 0303 	adc.w	r3, r5, r3
 8007d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d42:	4629      	mov	r1, r5
 8007d44:	008b      	lsls	r3, r1, #2
 8007d46:	4621      	mov	r1, r4
 8007d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	008a      	lsls	r2, r1, #2
 8007d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d54:	f7f8 fa94 	bl	8000280 <__aeabi_uldivmod>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4b60      	ldr	r3, [pc, #384]	@ (8007ee0 <UART_SetConfig+0x4e4>)
 8007d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	011c      	lsls	r4, r3, #4
 8007d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	1891      	adds	r1, r2, r2
 8007d7e:	61b9      	str	r1, [r7, #24]
 8007d80:	415b      	adcs	r3, r3
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d88:	4641      	mov	r1, r8
 8007d8a:	1851      	adds	r1, r2, r1
 8007d8c:	6139      	str	r1, [r7, #16]
 8007d8e:	4649      	mov	r1, r9
 8007d90:	414b      	adcs	r3, r1
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007da0:	4659      	mov	r1, fp
 8007da2:	00cb      	lsls	r3, r1, #3
 8007da4:	4651      	mov	r1, sl
 8007da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007daa:	4651      	mov	r1, sl
 8007dac:	00ca      	lsls	r2, r1, #3
 8007dae:	4610      	mov	r0, r2
 8007db0:	4619      	mov	r1, r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	4642      	mov	r2, r8
 8007db6:	189b      	adds	r3, r3, r2
 8007db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	460a      	mov	r2, r1
 8007dc0:	eb42 0303 	adc.w	r3, r2, r3
 8007dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007dd4:	f04f 0200 	mov.w	r2, #0
 8007dd8:	f04f 0300 	mov.w	r3, #0
 8007ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007de0:	4649      	mov	r1, r9
 8007de2:	008b      	lsls	r3, r1, #2
 8007de4:	4641      	mov	r1, r8
 8007de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dea:	4641      	mov	r1, r8
 8007dec:	008a      	lsls	r2, r1, #2
 8007dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007df2:	f7f8 fa45 	bl	8000280 <__aeabi_uldivmod>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4b38      	ldr	r3, [pc, #224]	@ (8007ee0 <UART_SetConfig+0x4e4>)
 8007dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	2264      	movs	r2, #100	@ 0x64
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	1acb      	subs	r3, r1, r3
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	3332      	adds	r3, #50	@ 0x32
 8007e10:	4a33      	ldr	r2, [pc, #204]	@ (8007ee0 <UART_SetConfig+0x4e4>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e1c:	441c      	add	r4, r3
 8007e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e22:	2200      	movs	r2, #0
 8007e24:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e26:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	415b      	adcs	r3, r3
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	1851      	adds	r1, r2, r1
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	4649      	mov	r1, r9
 8007e44:	414b      	adcs	r3, r1
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e54:	4659      	mov	r1, fp
 8007e56:	00cb      	lsls	r3, r1, #3
 8007e58:	4651      	mov	r1, sl
 8007e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5e:	4651      	mov	r1, sl
 8007e60:	00ca      	lsls	r2, r1, #3
 8007e62:	4610      	mov	r0, r2
 8007e64:	4619      	mov	r1, r3
 8007e66:	4603      	mov	r3, r0
 8007e68:	4642      	mov	r2, r8
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e6e:	464b      	mov	r3, r9
 8007e70:	460a      	mov	r2, r1
 8007e72:	eb42 0303 	adc.w	r3, r2, r3
 8007e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e82:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e90:	4649      	mov	r1, r9
 8007e92:	008b      	lsls	r3, r1, #2
 8007e94:	4641      	mov	r1, r8
 8007e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	008a      	lsls	r2, r1, #2
 8007e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ea2:	f7f8 f9ed 	bl	8000280 <__aeabi_uldivmod>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee0 <UART_SetConfig+0x4e4>)
 8007eac:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	2164      	movs	r1, #100	@ 0x64
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	3332      	adds	r3, #50	@ 0x32
 8007ebe:	4a08      	ldr	r2, [pc, #32]	@ (8007ee0 <UART_SetConfig+0x4e4>)
 8007ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	f003 020f 	and.w	r2, r3, #15
 8007eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4422      	add	r2, r4
 8007ed2:	609a      	str	r2, [r3, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007eda:	46bd      	mov	sp, r7
 8007edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ee0:	51eb851f 	.word	0x51eb851f

08007ee4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007ee8:	4904      	ldr	r1, [pc, #16]	@ (8007efc <MX_FATFS_Init+0x18>)
 8007eea:	4805      	ldr	r0, [pc, #20]	@ (8007f00 <MX_FATFS_Init+0x1c>)
 8007eec:	f006 fa90 	bl	800e410 <FATFS_LinkDriver>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4b03      	ldr	r3, [pc, #12]	@ (8007f04 <MX_FATFS_Init+0x20>)
 8007ef6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ef8:	bf00      	nop
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20001d58 	.word	0x20001d58
 8007f00:	20000048 	.word	0x20000048
 8007f04:	20001d54 	.word	0x20001d54

08007f08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f9d3 	bl	80082d0 <USER_SPI_initialize>
 8007f2a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fab1 	bl	80084a8 <USER_SPI_status>
 8007f46:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	607a      	str	r2, [r7, #4]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8007f60:	7bf8      	ldrb	r0, [r7, #15]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	f000 fab4 	bl	80084d4 <USER_SPI_read>
 8007f6c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8007f86:	7bf8      	ldrb	r0, [r7, #15]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	f000 fb07 	bl	80085a0 <USER_SPI_write>
 8007f92:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	603a      	str	r2, [r7, #0]
 8007fa6:	71fb      	strb	r3, [r7, #7]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007fac:	79b9      	ldrb	r1, [r7, #6]
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fb70 	bl	8008698 <USER_SPI_ioctl>
 8007fb8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007fcc:	f7fa fd22 	bl	8002a14 <HAL_GetTick>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	4a04      	ldr	r2, [pc, #16]	@ (8007fe4 <SPI_Timer_On+0x20>)
 8007fd4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007fd6:	4a04      	ldr	r2, [pc, #16]	@ (8007fe8 <SPI_Timer_On+0x24>)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6013      	str	r3, [r2, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20001d60 	.word	0x20001d60
 8007fe8:	20001d64 	.word	0x20001d64

08007fec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007ff0:	f7fa fd10 	bl	8002a14 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4b06      	ldr	r3, [pc, #24]	@ (8008010 <SPI_Timer_Status+0x24>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	4b05      	ldr	r3, [pc, #20]	@ (8008014 <SPI_Timer_Status+0x28>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	bf34      	ite	cc
 8008004:	2301      	movcc	r3, #1
 8008006:	2300      	movcs	r3, #0
 8008008:	b2db      	uxtb	r3, r3
}
 800800a:	4618      	mov	r0, r3
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20001d60 	.word	0x20001d60
 8008014:	20001d64 	.word	0x20001d64

08008018 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af02      	add	r7, sp, #8
 800801e:	4603      	mov	r3, r0
 8008020:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008022:	f107 020f 	add.w	r2, r7, #15
 8008026:	1df9      	adds	r1, r7, #7
 8008028:	2332      	movs	r3, #50	@ 0x32
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2301      	movs	r3, #1
 800802e:	4804      	ldr	r0, [pc, #16]	@ (8008040 <xchg_spi+0x28>)
 8008030:	f7fe fe25 	bl	8006c7e <HAL_SPI_TransmitReceive>
    return rxDat;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000504 	.word	0x20000504

08008044 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	e00a      	b.n	800806a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	18d4      	adds	r4, r2, r3
 800805a:	20ff      	movs	r0, #255	@ 0xff
 800805c:	f7ff ffdc 	bl	8008018 <xchg_spi>
 8008060:	4603      	mov	r3, r0
 8008062:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d3f0      	bcc.n	8008054 <rcvr_spi_multi+0x10>
	}
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	bd90      	pop	{r4, r7, pc}

0800807c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	b29a      	uxth	r2, r3
 800808a:	f04f 33ff 	mov.w	r3, #4294967295
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4803      	ldr	r0, [pc, #12]	@ (80080a0 <xmit_spi_multi+0x24>)
 8008092:	f7fe fcb0 	bl	80069f6 <HAL_SPI_Transmit>
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000504 	.word	0x20000504

080080a4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80080ac:	f7fa fcb2 	bl	8002a14 <HAL_GetTick>
 80080b0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80080b6:	20ff      	movs	r0, #255	@ 0xff
 80080b8:	f7ff ffae 	bl	8008018 <xchg_spi>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2bff      	cmp	r3, #255	@ 0xff
 80080c4:	d007      	beq.n	80080d6 <wait_ready+0x32>
 80080c6:	f7fa fca5 	bl	8002a14 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d8ef      	bhi.n	80080b6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	2bff      	cmp	r3, #255	@ 0xff
 80080da:	bf0c      	ite	eq
 80080dc:	2301      	moveq	r3, #1
 80080de:	2300      	movne	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80080f0:	2201      	movs	r2, #1
 80080f2:	2102      	movs	r1, #2
 80080f4:	4803      	ldr	r0, [pc, #12]	@ (8008104 <despiselect+0x18>)
 80080f6:	f7fb fc8d 	bl	8003a14 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80080fa:	20ff      	movs	r0, #255	@ 0xff
 80080fc:	f7ff ff8c 	bl	8008018 <xchg_spi>

}
 8008100:	bf00      	nop
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40020400 	.word	0x40020400

08008108 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800810c:	2200      	movs	r2, #0
 800810e:	2102      	movs	r1, #2
 8008110:	4809      	ldr	r0, [pc, #36]	@ (8008138 <spiselect+0x30>)
 8008112:	f7fb fc7f 	bl	8003a14 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008116:	20ff      	movs	r0, #255	@ 0xff
 8008118:	f7ff ff7e 	bl	8008018 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800811c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008120:	f7ff ffc0 	bl	80080a4 <wait_ready>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <spiselect+0x26>
 800812a:	2301      	movs	r3, #1
 800812c:	e002      	b.n	8008134 <spiselect+0x2c>

	despiselect();
 800812e:	f7ff ffdd 	bl	80080ec <despiselect>
	return 0;	/* Timeout */
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40020400 	.word	0x40020400

0800813c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008146:	20c8      	movs	r0, #200	@ 0xc8
 8008148:	f7ff ff3c 	bl	8007fc4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800814c:	20ff      	movs	r0, #255	@ 0xff
 800814e:	f7ff ff63 	bl	8008018 <xchg_spi>
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	2bff      	cmp	r3, #255	@ 0xff
 800815a:	d104      	bne.n	8008166 <rcvr_datablock+0x2a>
 800815c:	f7ff ff46 	bl	8007fec <SPI_Timer_Status>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1f2      	bne.n	800814c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2bfe      	cmp	r3, #254	@ 0xfe
 800816a:	d001      	beq.n	8008170 <rcvr_datablock+0x34>
 800816c:	2300      	movs	r3, #0
 800816e:	e00a      	b.n	8008186 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff ff66 	bl	8008044 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008178:	20ff      	movs	r0, #255	@ 0xff
 800817a:	f7ff ff4d 	bl	8008018 <xchg_spi>
 800817e:	20ff      	movs	r0, #255	@ 0xff
 8008180:	f7ff ff4a 	bl	8008018 <xchg_spi>

	return 1;						/* Function succeeded */
 8008184:	2301      	movs	r3, #1
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800819a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800819e:	f7ff ff81 	bl	80080a4 <wait_ready>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <xmit_datablock+0x1e>
 80081a8:	2300      	movs	r3, #0
 80081aa:	e01e      	b.n	80081ea <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff ff32 	bl	8008018 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2bfd      	cmp	r3, #253	@ 0xfd
 80081b8:	d016      	beq.n	80081e8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80081ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff ff5c 	bl	800807c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80081c4:	20ff      	movs	r0, #255	@ 0xff
 80081c6:	f7ff ff27 	bl	8008018 <xchg_spi>
 80081ca:	20ff      	movs	r0, #255	@ 0xff
 80081cc:	f7ff ff24 	bl	8008018 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80081d0:	20ff      	movs	r0, #255	@ 0xff
 80081d2:	f7ff ff21 	bl	8008018 <xchg_spi>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d001      	beq.n	80081e8 <xmit_datablock+0x5a>
 80081e4:	2300      	movs	r3, #0
 80081e6:	e000      	b.n	80081ea <xmit_datablock+0x5c>
	}
	return 1;
 80081e8:	2301      	movs	r3, #1
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	4603      	mov	r3, r0
 80081fa:	6039      	str	r1, [r7, #0]
 80081fc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80081fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008202:	2b00      	cmp	r3, #0
 8008204:	da0e      	bge.n	8008224 <send_cmd+0x32>
		cmd &= 0x7F;
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800820e:	2100      	movs	r1, #0
 8008210:	2037      	movs	r0, #55	@ 0x37
 8008212:	f7ff ffee 	bl	80081f2 <send_cmd>
 8008216:	4603      	mov	r3, r0
 8008218:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d901      	bls.n	8008224 <send_cmd+0x32>
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	e051      	b.n	80082c8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	2b0c      	cmp	r3, #12
 8008228:	d008      	beq.n	800823c <send_cmd+0x4a>
		despiselect();
 800822a:	f7ff ff5f 	bl	80080ec <despiselect>
		if (!spiselect()) return 0xFF;
 800822e:	f7ff ff6b 	bl	8008108 <spiselect>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <send_cmd+0x4a>
 8008238:	23ff      	movs	r3, #255	@ 0xff
 800823a:	e045      	b.n	80082c8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008242:	b2db      	uxtb	r3, r3
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff fee7 	bl	8008018 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	0e1b      	lsrs	r3, r3, #24
 800824e:	b2db      	uxtb	r3, r3
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fee1 	bl	8008018 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	0c1b      	lsrs	r3, r3, #16
 800825a:	b2db      	uxtb	r3, r3
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fedb 	bl	8008018 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	0a1b      	lsrs	r3, r3, #8
 8008266:	b2db      	uxtb	r3, r3
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff fed5 	bl	8008018 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff fed0 	bl	8008018 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <send_cmd+0x94>
 8008282:	2395      	movs	r3, #149	@ 0x95
 8008284:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d101      	bne.n	8008290 <send_cmd+0x9e>
 800828c:	2387      	movs	r3, #135	@ 0x87
 800828e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff fec0 	bl	8008018 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	2b0c      	cmp	r3, #12
 800829c:	d102      	bne.n	80082a4 <send_cmd+0xb2>
 800829e:	20ff      	movs	r0, #255	@ 0xff
 80082a0:	f7ff feba 	bl	8008018 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80082a4:	230a      	movs	r3, #10
 80082a6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80082a8:	20ff      	movs	r0, #255	@ 0xff
 80082aa:	f7ff feb5 	bl	8008018 <xchg_spi>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80082b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	da05      	bge.n	80082c6 <send_cmd+0xd4>
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	3b01      	subs	r3, #1
 80082be:	73fb      	strb	r3, [r7, #15]
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1f0      	bne.n	80082a8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <USER_SPI_initialize+0x14>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e0d6      	b.n	8008492 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80082e4:	4b6d      	ldr	r3, [pc, #436]	@ (800849c <USER_SPI_initialize+0x1cc>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <USER_SPI_initialize+0x2a>
 80082f2:	4b6a      	ldr	r3, [pc, #424]	@ (800849c <USER_SPI_initialize+0x1cc>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	e0cb      	b.n	8008492 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80082fa:	4b69      	ldr	r3, [pc, #420]	@ (80084a0 <USER_SPI_initialize+0x1d0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008304:	4b66      	ldr	r3, [pc, #408]	@ (80084a0 <USER_SPI_initialize+0x1d0>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800830c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800830e:	230a      	movs	r3, #10
 8008310:	73fb      	strb	r3, [r7, #15]
 8008312:	e005      	b.n	8008320 <USER_SPI_initialize+0x50>
 8008314:	20ff      	movs	r0, #255	@ 0xff
 8008316:	f7ff fe7f 	bl	8008018 <xchg_spi>
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	3b01      	subs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f6      	bne.n	8008314 <USER_SPI_initialize+0x44>

	ty = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800832a:	2100      	movs	r1, #0
 800832c:	2000      	movs	r0, #0
 800832e:	f7ff ff60 	bl	80081f2 <send_cmd>
 8008332:	4603      	mov	r3, r0
 8008334:	2b01      	cmp	r3, #1
 8008336:	f040 808b 	bne.w	8008450 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800833a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800833e:	f7ff fe41 	bl	8007fc4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008342:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008346:	2008      	movs	r0, #8
 8008348:	f7ff ff53 	bl	80081f2 <send_cmd>
 800834c:	4603      	mov	r3, r0
 800834e:	2b01      	cmp	r3, #1
 8008350:	d151      	bne.n	80083f6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]
 8008356:	e00d      	b.n	8008374 <USER_SPI_initialize+0xa4>
 8008358:	7bfc      	ldrb	r4, [r7, #15]
 800835a:	20ff      	movs	r0, #255	@ 0xff
 800835c:	f7ff fe5c 	bl	8008018 <xchg_spi>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	f104 0310 	add.w	r3, r4, #16
 8008368:	443b      	add	r3, r7
 800836a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	3301      	adds	r3, #1
 8008372:	73fb      	strb	r3, [r7, #15]
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b03      	cmp	r3, #3
 8008378:	d9ee      	bls.n	8008358 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800837a:	7abb      	ldrb	r3, [r7, #10]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d167      	bne.n	8008450 <USER_SPI_initialize+0x180>
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	2baa      	cmp	r3, #170	@ 0xaa
 8008384:	d164      	bne.n	8008450 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008386:	bf00      	nop
 8008388:	f7ff fe30 	bl	8007fec <SPI_Timer_Status>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <USER_SPI_initialize+0xd2>
 8008392:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008396:	20a9      	movs	r0, #169	@ 0xa9
 8008398:	f7ff ff2b 	bl	80081f2 <send_cmd>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f2      	bne.n	8008388 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80083a2:	f7ff fe23 	bl	8007fec <SPI_Timer_Status>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d051      	beq.n	8008450 <USER_SPI_initialize+0x180>
 80083ac:	2100      	movs	r1, #0
 80083ae:	203a      	movs	r0, #58	@ 0x3a
 80083b0:	f7ff ff1f 	bl	80081f2 <send_cmd>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d14a      	bne.n	8008450 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
 80083be:	e00d      	b.n	80083dc <USER_SPI_initialize+0x10c>
 80083c0:	7bfc      	ldrb	r4, [r7, #15]
 80083c2:	20ff      	movs	r0, #255	@ 0xff
 80083c4:	f7ff fe28 	bl	8008018 <xchg_spi>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	f104 0310 	add.w	r3, r4, #16
 80083d0:	443b      	add	r3, r7
 80083d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	3301      	adds	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d9ee      	bls.n	80083c0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80083e2:	7a3b      	ldrb	r3, [r7, #8]
 80083e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <USER_SPI_initialize+0x120>
 80083ec:	230c      	movs	r3, #12
 80083ee:	e000      	b.n	80083f2 <USER_SPI_initialize+0x122>
 80083f0:	2304      	movs	r3, #4
 80083f2:	737b      	strb	r3, [r7, #13]
 80083f4:	e02c      	b.n	8008450 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80083f6:	2100      	movs	r1, #0
 80083f8:	20a9      	movs	r0, #169	@ 0xa9
 80083fa:	f7ff fefa 	bl	80081f2 <send_cmd>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b01      	cmp	r3, #1
 8008402:	d804      	bhi.n	800840e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008404:	2302      	movs	r3, #2
 8008406:	737b      	strb	r3, [r7, #13]
 8008408:	23a9      	movs	r3, #169	@ 0xa9
 800840a:	73bb      	strb	r3, [r7, #14]
 800840c:	e003      	b.n	8008416 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800840e:	2301      	movs	r3, #1
 8008410:	737b      	strb	r3, [r7, #13]
 8008412:	2301      	movs	r3, #1
 8008414:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008416:	bf00      	nop
 8008418:	f7ff fde8 	bl	8007fec <SPI_Timer_Status>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <USER_SPI_initialize+0x162>
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2100      	movs	r1, #0
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fee3 	bl	80081f2 <send_cmd>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f2      	bne.n	8008418 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008432:	f7ff fddb 	bl	8007fec <SPI_Timer_Status>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <USER_SPI_initialize+0x17c>
 800843c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008440:	2010      	movs	r0, #16
 8008442:	f7ff fed6 	bl	80081f2 <send_cmd>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <USER_SPI_initialize+0x180>
				ty = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008450:	4a14      	ldr	r2, [pc, #80]	@ (80084a4 <USER_SPI_initialize+0x1d4>)
 8008452:	7b7b      	ldrb	r3, [r7, #13]
 8008454:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008456:	f7ff fe49 	bl	80080ec <despiselect>

	if (ty) {			/* OK */
 800845a:	7b7b      	ldrb	r3, [r7, #13]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d012      	beq.n	8008486 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008460:	4b0f      	ldr	r3, [pc, #60]	@ (80084a0 <USER_SPI_initialize+0x1d0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800846a:	4b0d      	ldr	r3, [pc, #52]	@ (80084a0 <USER_SPI_initialize+0x1d0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0210 	orr.w	r2, r2, #16
 8008472:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008474:	4b09      	ldr	r3, [pc, #36]	@ (800849c <USER_SPI_initialize+0x1cc>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	b2da      	uxtb	r2, r3
 8008480:	4b06      	ldr	r3, [pc, #24]	@ (800849c <USER_SPI_initialize+0x1cc>)
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	e002      	b.n	800848c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008486:	4b05      	ldr	r3, [pc, #20]	@ (800849c <USER_SPI_initialize+0x1cc>)
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800848c:	4b03      	ldr	r3, [pc, #12]	@ (800849c <USER_SPI_initialize+0x1cc>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b2db      	uxtb	r3, r3
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}
 800849a:	bf00      	nop
 800849c:	2000005c 	.word	0x2000005c
 80084a0:	20000504 	.word	0x20000504
 80084a4:	20001d5c 	.word	0x20001d5c

080084a8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <USER_SPI_status+0x14>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e002      	b.n	80084c2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80084bc:	4b04      	ldr	r3, [pc, #16]	@ (80084d0 <USER_SPI_status+0x28>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	b2db      	uxtb	r3, r3
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	2000005c 	.word	0x2000005c

080084d4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <USER_SPI_read+0x1c>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <USER_SPI_read+0x20>
 80084f0:	2304      	movs	r3, #4
 80084f2:	e04d      	b.n	8008590 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80084f4:	4b28      	ldr	r3, [pc, #160]	@ (8008598 <USER_SPI_read+0xc4>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <USER_SPI_read+0x32>
 8008502:	2303      	movs	r3, #3
 8008504:	e044      	b.n	8008590 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008506:	4b25      	ldr	r3, [pc, #148]	@ (800859c <USER_SPI_read+0xc8>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <USER_SPI_read+0x44>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	025b      	lsls	r3, r3, #9
 8008516:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d111      	bne.n	8008542 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	2011      	movs	r0, #17
 8008522:	f7ff fe66 	bl	80081f2 <send_cmd>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d129      	bne.n	8008580 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800852c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008530:	68b8      	ldr	r0, [r7, #8]
 8008532:	f7ff fe03 	bl	800813c <rcvr_datablock>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d021      	beq.n	8008580 <USER_SPI_read+0xac>
			count = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	e01e      	b.n	8008580 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	2012      	movs	r0, #18
 8008546:	f7ff fe54 	bl	80081f2 <send_cmd>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d117      	bne.n	8008580 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008550:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f7ff fdf1 	bl	800813c <rcvr_datablock>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <USER_SPI_read+0xa2>
				buff += 512;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008566:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	3b01      	subs	r3, #1
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1ed      	bne.n	8008550 <USER_SPI_read+0x7c>
 8008574:	e000      	b.n	8008578 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008576:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008578:	2100      	movs	r1, #0
 800857a:	200c      	movs	r0, #12
 800857c:	f7ff fe39 	bl	80081f2 <send_cmd>
		}
	}
	despiselect();
 8008580:	f7ff fdb4 	bl	80080ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	bf14      	ite	ne
 800858a:	2301      	movne	r3, #1
 800858c:	2300      	moveq	r3, #0
 800858e:	b2db      	uxtb	r3, r3
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	2000005c 	.word	0x2000005c
 800859c:	20001d5c 	.word	0x20001d5c

080085a0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	607a      	str	r2, [r7, #4]
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d102      	bne.n	80085bc <USER_SPI_write+0x1c>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <USER_SPI_write+0x20>
 80085bc:	2304      	movs	r3, #4
 80085be:	e063      	b.n	8008688 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80085c0:	4b33      	ldr	r3, [pc, #204]	@ (8008690 <USER_SPI_write+0xf0>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <USER_SPI_write+0x32>
 80085ce:	2303      	movs	r3, #3
 80085d0:	e05a      	b.n	8008688 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80085d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008690 <USER_SPI_write+0xf0>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <USER_SPI_write+0x44>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e051      	b.n	8008688 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80085e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008694 <USER_SPI_write+0xf4>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <USER_SPI_write+0x56>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	025b      	lsls	r3, r3, #9
 80085f4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d110      	bne.n	800861e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	2018      	movs	r0, #24
 8008600:	f7ff fdf7 	bl	80081f2 <send_cmd>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d136      	bne.n	8008678 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800860a:	21fe      	movs	r1, #254	@ 0xfe
 800860c:	68b8      	ldr	r0, [r7, #8]
 800860e:	f7ff fdbe 	bl	800818e <xmit_datablock>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d02f      	beq.n	8008678 <USER_SPI_write+0xd8>
			count = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	e02c      	b.n	8008678 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800861e:	4b1d      	ldr	r3, [pc, #116]	@ (8008694 <USER_SPI_write+0xf4>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	f003 0306 	and.w	r3, r3, #6
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <USER_SPI_write+0x92>
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	2097      	movs	r0, #151	@ 0x97
 800862e:	f7ff fde0 	bl	80081f2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	2019      	movs	r0, #25
 8008636:	f7ff fddc 	bl	80081f2 <send_cmd>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d11b      	bne.n	8008678 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8008640:	21fc      	movs	r1, #252	@ 0xfc
 8008642:	68b8      	ldr	r0, [r7, #8]
 8008644:	f7ff fda3 	bl	800818e <xmit_datablock>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <USER_SPI_write+0xc4>
				buff += 512;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008654:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	3b01      	subs	r3, #1
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1ee      	bne.n	8008640 <USER_SPI_write+0xa0>
 8008662:	e000      	b.n	8008666 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008664:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008666:	21fd      	movs	r1, #253	@ 0xfd
 8008668:	2000      	movs	r0, #0
 800866a:	f7ff fd90 	bl	800818e <xmit_datablock>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <USER_SPI_write+0xd8>
 8008674:	2301      	movs	r3, #1
 8008676:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008678:	f7ff fd38 	bl	80080ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	bf14      	ite	ne
 8008682:	2301      	movne	r3, #1
 8008684:	2300      	moveq	r3, #0
 8008686:	b2db      	uxtb	r3, r3
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	2000005c 	.word	0x2000005c
 8008694:	20001d5c 	.word	0x20001d5c

08008698 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08c      	sub	sp, #48	@ 0x30
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	603a      	str	r2, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
 80086a4:	460b      	mov	r3, r1
 80086a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <USER_SPI_ioctl+0x1a>
 80086ae:	2304      	movs	r3, #4
 80086b0:	e15a      	b.n	8008968 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80086b2:	4baf      	ldr	r3, [pc, #700]	@ (8008970 <USER_SPI_ioctl+0x2d8>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <USER_SPI_ioctl+0x2c>
 80086c0:	2303      	movs	r3, #3
 80086c2:	e151      	b.n	8008968 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80086ca:	79bb      	ldrb	r3, [r7, #6]
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	f200 8136 	bhi.w	800893e <USER_SPI_ioctl+0x2a6>
 80086d2:	a201      	add	r2, pc, #4	@ (adr r2, 80086d8 <USER_SPI_ioctl+0x40>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	080086ed 	.word	0x080086ed
 80086dc:	08008701 	.word	0x08008701
 80086e0:	0800893f 	.word	0x0800893f
 80086e4:	080087ad 	.word	0x080087ad
 80086e8:	080088a3 	.word	0x080088a3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80086ec:	f7ff fd0c 	bl	8008108 <spiselect>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 8127 	beq.w	8008946 <USER_SPI_ioctl+0x2ae>
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80086fe:	e122      	b.n	8008946 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008700:	2100      	movs	r1, #0
 8008702:	2009      	movs	r0, #9
 8008704:	f7ff fd75 	bl	80081f2 <send_cmd>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	f040 811d 	bne.w	800894a <USER_SPI_ioctl+0x2b2>
 8008710:	f107 030c 	add.w	r3, r7, #12
 8008714:	2110      	movs	r1, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fd10 	bl	800813c <rcvr_datablock>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 8113 	beq.w	800894a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008724:	7b3b      	ldrb	r3, [r7, #12]
 8008726:	099b      	lsrs	r3, r3, #6
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b01      	cmp	r3, #1
 800872c:	d111      	bne.n	8008752 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800872e:	7d7b      	ldrb	r3, [r7, #21]
 8008730:	461a      	mov	r2, r3
 8008732:	7d3b      	ldrb	r3, [r7, #20]
 8008734:	021b      	lsls	r3, r3, #8
 8008736:	4413      	add	r3, r2
 8008738:	461a      	mov	r2, r3
 800873a:	7cfb      	ldrb	r3, [r7, #19]
 800873c:	041b      	lsls	r3, r3, #16
 800873e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8008742:	4413      	add	r3, r2
 8008744:	3301      	adds	r3, #1
 8008746:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	029a      	lsls	r2, r3, #10
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	e028      	b.n	80087a4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008752:	7c7b      	ldrb	r3, [r7, #17]
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	b2da      	uxtb	r2, r3
 800875a:	7dbb      	ldrb	r3, [r7, #22]
 800875c:	09db      	lsrs	r3, r3, #7
 800875e:	b2db      	uxtb	r3, r3
 8008760:	4413      	add	r3, r2
 8008762:	b2da      	uxtb	r2, r3
 8008764:	7d7b      	ldrb	r3, [r7, #21]
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 0306 	and.w	r3, r3, #6
 800876e:	b2db      	uxtb	r3, r3
 8008770:	4413      	add	r3, r2
 8008772:	b2db      	uxtb	r3, r3
 8008774:	3302      	adds	r3, #2
 8008776:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800877a:	7d3b      	ldrb	r3, [r7, #20]
 800877c:	099b      	lsrs	r3, r3, #6
 800877e:	b2db      	uxtb	r3, r3
 8008780:	461a      	mov	r2, r3
 8008782:	7cfb      	ldrb	r3, [r7, #19]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	441a      	add	r2, r3
 8008788:	7cbb      	ldrb	r3, [r7, #18]
 800878a:	029b      	lsls	r3, r3, #10
 800878c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008790:	4413      	add	r3, r2
 8008792:	3301      	adds	r3, #1
 8008794:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008796:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800879a:	3b09      	subs	r3, #9
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	409a      	lsls	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80087aa:	e0ce      	b.n	800894a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80087ac:	4b71      	ldr	r3, [pc, #452]	@ (8008974 <USER_SPI_ioctl+0x2dc>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d031      	beq.n	800881c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80087b8:	2100      	movs	r1, #0
 80087ba:	208d      	movs	r0, #141	@ 0x8d
 80087bc:	f7ff fd19 	bl	80081f2 <send_cmd>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f040 80c3 	bne.w	800894e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80087c8:	20ff      	movs	r0, #255	@ 0xff
 80087ca:	f7ff fc25 	bl	8008018 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80087ce:	f107 030c 	add.w	r3, r7, #12
 80087d2:	2110      	movs	r1, #16
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fcb1 	bl	800813c <rcvr_datablock>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80b6 	beq.w	800894e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80087e2:	2330      	movs	r3, #48	@ 0x30
 80087e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80087e8:	e007      	b.n	80087fa <USER_SPI_ioctl+0x162>
 80087ea:	20ff      	movs	r0, #255	@ 0xff
 80087ec:	f7ff fc14 	bl	8008018 <xchg_spi>
 80087f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80087f4:	3b01      	subs	r3, #1
 80087f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80087fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1f3      	bne.n	80087ea <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008802:	7dbb      	ldrb	r3, [r7, #22]
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	b2db      	uxtb	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	2310      	movs	r3, #16
 800880c:	fa03 f202 	lsl.w	r2, r3, r2
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800881a:	e098      	b.n	800894e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800881c:	2100      	movs	r1, #0
 800881e:	2009      	movs	r0, #9
 8008820:	f7ff fce7 	bl	80081f2 <send_cmd>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	f040 8091 	bne.w	800894e <USER_SPI_ioctl+0x2b6>
 800882c:	f107 030c 	add.w	r3, r7, #12
 8008830:	2110      	movs	r1, #16
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff fc82 	bl	800813c <rcvr_datablock>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 8087 	beq.w	800894e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008840:	4b4c      	ldr	r3, [pc, #304]	@ (8008974 <USER_SPI_ioctl+0x2dc>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d012      	beq.n	8008872 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800884c:	7dbb      	ldrb	r3, [r7, #22]
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8008854:	7dfa      	ldrb	r2, [r7, #23]
 8008856:	09d2      	lsrs	r2, r2, #7
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	4413      	add	r3, r2
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	7e7b      	ldrb	r3, [r7, #25]
 8008860:	099b      	lsrs	r3, r3, #6
 8008862:	b2db      	uxtb	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	fa02 f303 	lsl.w	r3, r2, r3
 800886a:	461a      	mov	r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	e013      	b.n	800889a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008872:	7dbb      	ldrb	r3, [r7, #22]
 8008874:	109b      	asrs	r3, r3, #2
 8008876:	b29b      	uxth	r3, r3
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	3301      	adds	r3, #1
 800887e:	7dfa      	ldrb	r2, [r7, #23]
 8008880:	00d2      	lsls	r2, r2, #3
 8008882:	f002 0218 	and.w	r2, r2, #24
 8008886:	7df9      	ldrb	r1, [r7, #23]
 8008888:	0949      	lsrs	r1, r1, #5
 800888a:	b2c9      	uxtb	r1, r1
 800888c:	440a      	add	r2, r1
 800888e:	3201      	adds	r2, #1
 8008890:	fb02 f303 	mul.w	r3, r2, r3
 8008894:	461a      	mov	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80088a0:	e055      	b.n	800894e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80088a2:	4b34      	ldr	r3, [pc, #208]	@ (8008974 <USER_SPI_ioctl+0x2dc>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	f003 0306 	and.w	r3, r3, #6
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d051      	beq.n	8008952 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80088ae:	f107 020c 	add.w	r2, r7, #12
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	210b      	movs	r1, #11
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff feee 	bl	8008698 <USER_SPI_ioctl>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d149      	bne.n	8008956 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80088c2:	7b3b      	ldrb	r3, [r7, #12]
 80088c4:	099b      	lsrs	r3, r3, #6
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <USER_SPI_ioctl+0x23e>
 80088cc:	7dbb      	ldrb	r3, [r7, #22]
 80088ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d041      	beq.n	800895a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	623b      	str	r3, [r7, #32]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80088e6:	4b23      	ldr	r3, [pc, #140]	@ (8008974 <USER_SPI_ioctl+0x2dc>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	f003 0308 	and.w	r3, r3, #8
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d105      	bne.n	80088fe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	025b      	lsls	r3, r3, #9
 80088f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	025b      	lsls	r3, r3, #9
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80088fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008900:	2020      	movs	r0, #32
 8008902:	f7ff fc76 	bl	80081f2 <send_cmd>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d128      	bne.n	800895e <USER_SPI_ioctl+0x2c6>
 800890c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800890e:	2021      	movs	r0, #33	@ 0x21
 8008910:	f7ff fc6f 	bl	80081f2 <send_cmd>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d121      	bne.n	800895e <USER_SPI_ioctl+0x2c6>
 800891a:	2100      	movs	r1, #0
 800891c:	2026      	movs	r0, #38	@ 0x26
 800891e:	f7ff fc68 	bl	80081f2 <send_cmd>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11a      	bne.n	800895e <USER_SPI_ioctl+0x2c6>
 8008928:	f247 5030 	movw	r0, #30000	@ 0x7530
 800892c:	f7ff fbba 	bl	80080a4 <wait_ready>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d013      	beq.n	800895e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008936:	2300      	movs	r3, #0
 8008938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800893c:	e00f      	b.n	800895e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800893e:	2304      	movs	r3, #4
 8008940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008944:	e00c      	b.n	8008960 <USER_SPI_ioctl+0x2c8>
		break;
 8008946:	bf00      	nop
 8008948:	e00a      	b.n	8008960 <USER_SPI_ioctl+0x2c8>
		break;
 800894a:	bf00      	nop
 800894c:	e008      	b.n	8008960 <USER_SPI_ioctl+0x2c8>
		break;
 800894e:	bf00      	nop
 8008950:	e006      	b.n	8008960 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008952:	bf00      	nop
 8008954:	e004      	b.n	8008960 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008956:	bf00      	nop
 8008958:	e002      	b.n	8008960 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800895a:	bf00      	nop
 800895c:	e000      	b.n	8008960 <USER_SPI_ioctl+0x2c8>
		break;
 800895e:	bf00      	nop
	}

	despiselect();
 8008960:	f7ff fbc4 	bl	80080ec <despiselect>

	return res;
 8008964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008968:	4618      	mov	r0, r3
 800896a:	3730      	adds	r7, #48	@ 0x30
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	2000005c 	.word	0x2000005c
 8008974:	20001d5c 	.word	0x20001d5c

08008978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f103 0208 	add.w	r2, r3, #8
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f103 0208 	add.w	r2, r3, #8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f103 0208 	add.w	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d103      	bne.n	8008a3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e00c      	b.n	8008a54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e002      	b.n	8008a48 <vListInsert+0x2e>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d2f6      	bcs.n	8008a42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	601a      	str	r2, [r3, #0]
}
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6892      	ldr	r2, [r2, #8]
 8008aa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6852      	ldr	r2, [r2, #4]
 8008aac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d103      	bne.n	8008ac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	1e5a      	subs	r2, r3, #1
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	e7fd      	b.n	8008b08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b0c:	f002 fafc 	bl	800b108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	441a      	add	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b42:	fb01 f303 	mul.w	r3, r1, r3
 8008b46:	441a      	add	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	22ff      	movs	r2, #255	@ 0xff
 8008b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	22ff      	movs	r2, #255	@ 0xff
 8008b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d114      	bne.n	8008b8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d01a      	beq.n	8008ba0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 f9b0 	bl	8009ed4 <xTaskRemoveFromEventList>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d012      	beq.n	8008ba0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb0 <xQueueGenericReset+0xd0>)
 8008b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	e009      	b.n	8008ba0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3310      	adds	r3, #16
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fef1 	bl	8008978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3324      	adds	r3, #36	@ 0x24
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff feec 	bl	8008978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ba0:	f002 fae4 	bl	800b16c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ba4:	2301      	movs	r3, #1
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	e000ed04 	.word	0xe000ed04

08008bb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08a      	sub	sp, #40	@ 0x28
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10b      	bne.n	8008be0 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	613b      	str	r3, [r7, #16]
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	e004      	b.n	8008bf6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	fb02 f303 	mul.w	r3, r2, r3
 8008bf4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	3350      	adds	r3, #80	@ 0x50
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f002 fba6 	bl	800b34c <pvPortMalloc>
 8008c00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00d      	beq.n	8008c24 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	3350      	adds	r3, #80	@ 0x50
 8008c10:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c12:	79fa      	ldrb	r2, [r7, #7]
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f805 	bl	8008c2e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c24:	69bb      	ldr	r3, [r7, #24]
	}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
 8008c3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d103      	bne.n	8008c4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	e002      	b.n	8008c50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	69b8      	ldr	r0, [r7, #24]
 8008c60:	f7ff ff3e 	bl	8008ae0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00e      	beq.n	8008ca0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c94:	2300      	movs	r3, #0
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f81c 	bl	8008cd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6939      	ldr	r1, [r7, #16]
 8008cc0:	6978      	ldr	r0, [r7, #20]
 8008cc2:	f7ff ff77 	bl	8008bb4 <xQueueGenericCreate>
 8008cc6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7ff ffd3 	bl	8008c74 <prvInitialiseMutex>

		return xNewQueue;
 8008cce:	68fb      	ldr	r3, [r7, #12]
	}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08e      	sub	sp, #56	@ 0x38
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10b      	bne.n	8008d0c <xQueueGenericSend+0x34>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	e7fd      	b.n	8008d08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <xQueueGenericSend+0x42>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <xQueueGenericSend+0x46>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <xQueueGenericSend+0x48>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10b      	bne.n	8008d3c <xQueueGenericSend+0x64>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d103      	bne.n	8008d4a <xQueueGenericSend+0x72>
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <xQueueGenericSend+0x76>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e000      	b.n	8008d50 <xQueueGenericSend+0x78>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10b      	bne.n	8008d6c <xQueueGenericSend+0x94>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	623b      	str	r3, [r7, #32]
}
 8008d66:	bf00      	nop
 8008d68:	bf00      	nop
 8008d6a:	e7fd      	b.n	8008d68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d6c:	f001 fa52 	bl	800a214 <xTaskGetSchedulerState>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <xQueueGenericSend+0xa4>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <xQueueGenericSend+0xa8>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <xQueueGenericSend+0xaa>
 8008d80:	2300      	movs	r3, #0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <xQueueGenericSend+0xc6>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	61fb      	str	r3, [r7, #28]
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d9e:	f002 f9b3 	bl	800b108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d302      	bcc.n	8008db4 <xQueueGenericSend+0xdc>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d129      	bne.n	8008e08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dba:	f000 fb35 	bl	8009428 <prvCopyDataToQueue>
 8008dbe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d010      	beq.n	8008dea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	3324      	adds	r3, #36	@ 0x24
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 f881 	bl	8009ed4 <xTaskRemoveFromEventList>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ed8 <xQueueGenericSend+0x200>)
 8008dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	e00a      	b.n	8008e00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008df0:	4b39      	ldr	r3, [pc, #228]	@ (8008ed8 <xQueueGenericSend+0x200>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e00:	f002 f9b4 	bl	800b16c <vPortExitCritical>
				return pdPASS;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e063      	b.n	8008ed0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d103      	bne.n	8008e16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e0e:	f002 f9ad 	bl	800b16c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e05c      	b.n	8008ed0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 f8bb 	bl	8009f9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e26:	2301      	movs	r3, #1
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e2a:	f002 f99f 	bl	800b16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e2e:	f000 fe2d 	bl	8009a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e32:	f002 f969 	bl	800b108 <vPortEnterCritical>
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e42:	d103      	bne.n	8008e4c <xQueueGenericSend+0x174>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e52:	b25b      	sxtb	r3, r3
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e58:	d103      	bne.n	8008e62 <xQueueGenericSend+0x18a>
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e62:	f002 f983 	bl	800b16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e66:	1d3a      	adds	r2, r7, #4
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 f8aa 	bl	8009fc8 <xTaskCheckForTimeOut>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d124      	bne.n	8008ec4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e7c:	f000 fbcc 	bl	8009618 <prvIsQueueFull>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d018      	beq.n	8008eb8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	3310      	adds	r3, #16
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 ffce 	bl	8009e30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e96:	f000 fb57 	bl	8009548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e9a:	f000 fe05 	bl	8009aa8 <xTaskResumeAll>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f47f af7c 	bne.w	8008d9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed8 <xQueueGenericSend+0x200>)
 8008ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	e772      	b.n	8008d9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008eb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008eba:	f000 fb45 	bl	8009548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ebe:	f000 fdf3 	bl	8009aa8 <xTaskResumeAll>
 8008ec2:	e76c      	b.n	8008d9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ec6:	f000 fb3f 	bl	8009548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eca:	f000 fded 	bl	8009aa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3738      	adds	r7, #56	@ 0x38
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08e      	sub	sp, #56	@ 0x38
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10b      	bne.n	8008f0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	e7fd      	b.n	8008f08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d103      	bne.n	8008f1a <xQueueGenericSendFromISR+0x3e>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <xQueueGenericSendFromISR+0x42>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e000      	b.n	8008f20 <xQueueGenericSendFromISR+0x44>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	623b      	str	r3, [r7, #32]
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	e7fd      	b.n	8008f38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSendFromISR+0x6e>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <xQueueGenericSendFromISR+0x72>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <xQueueGenericSendFromISR+0x74>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10b      	bne.n	8008f6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	61fb      	str	r3, [r7, #28]
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f6c:	f002 f9ac 	bl	800b2c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f70:	f3ef 8211 	mrs	r2, BASEPRI
 8008f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	61ba      	str	r2, [r7, #24]
 8008f86:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f88:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <xQueueGenericSendFromISR+0xc2>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d12c      	bne.n	8008ff8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fae:	f000 fa3b 	bl	8009428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d112      	bne.n	8008fe2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d016      	beq.n	8008ff2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	3324      	adds	r3, #36	@ 0x24
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 ff83 	bl	8009ed4 <xTaskRemoveFromEventList>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00e      	beq.n	8008ff2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	e007      	b.n	8008ff2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	b25a      	sxtb	r2, r3
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008ff6:	e001      	b.n	8008ffc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009006:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800900a:	4618      	mov	r0, r3
 800900c:	3738      	adds	r7, #56	@ 0x38
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08c      	sub	sp, #48	@ 0x30
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009020:	2300      	movs	r3, #0
 8009022:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <xQueueReceive+0x32>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	623b      	str	r3, [r7, #32]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d103      	bne.n	8009054 <xQueueReceive+0x40>
 800904c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <xQueueReceive+0x44>
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <xQueueReceive+0x46>
 8009058:	2300      	movs	r3, #0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10b      	bne.n	8009076 <xQueueReceive+0x62>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	61fb      	str	r3, [r7, #28]
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	e7fd      	b.n	8009072 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009076:	f001 f8cd 	bl	800a214 <xTaskGetSchedulerState>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <xQueueReceive+0x72>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <xQueueReceive+0x76>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xQueueReceive+0x78>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <xQueueReceive+0x94>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	61bb      	str	r3, [r7, #24]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090a8:	f002 f82e 	bl	800b108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01f      	beq.n	80090f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090bc:	f000 fa1e 	bl	80094fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	1e5a      	subs	r2, r3, #1
 80090c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00f      	beq.n	80090f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d2:	3310      	adds	r3, #16
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fefd 	bl	8009ed4 <xTaskRemoveFromEventList>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d007      	beq.n	80090f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090e0:	4b3c      	ldr	r3, [pc, #240]	@ (80091d4 <xQueueReceive+0x1c0>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090f0:	f002 f83c 	bl	800b16c <vPortExitCritical>
				return pdPASS;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e069      	b.n	80091cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090fe:	f002 f835 	bl	800b16c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009102:	2300      	movs	r3, #0
 8009104:	e062      	b.n	80091cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d106      	bne.n	800911a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800910c:	f107 0310 	add.w	r3, r7, #16
 8009110:	4618      	mov	r0, r3
 8009112:	f000 ff43 	bl	8009f9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009116:	2301      	movs	r3, #1
 8009118:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800911a:	f002 f827 	bl	800b16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800911e:	f000 fcb5 	bl	8009a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009122:	f001 fff1 	bl	800b108 <vPortEnterCritical>
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800912c:	b25b      	sxtb	r3, r3
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009132:	d103      	bne.n	800913c <xQueueReceive+0x128>
 8009134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009142:	b25b      	sxtb	r3, r3
 8009144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009148:	d103      	bne.n	8009152 <xQueueReceive+0x13e>
 800914a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009152:	f002 f80b 	bl	800b16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009156:	1d3a      	adds	r2, r7, #4
 8009158:	f107 0310 	add.w	r3, r7, #16
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f000 ff32 	bl	8009fc8 <xTaskCheckForTimeOut>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d123      	bne.n	80091b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800916a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800916c:	f000 fa3e 	bl	80095ec <prvIsQueueEmpty>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d017      	beq.n	80091a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009178:	3324      	adds	r3, #36	@ 0x24
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fe56 	bl	8009e30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009186:	f000 f9df 	bl	8009548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800918a:	f000 fc8d 	bl	8009aa8 <xTaskResumeAll>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d189      	bne.n	80090a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009194:	4b0f      	ldr	r3, [pc, #60]	@ (80091d4 <xQueueReceive+0x1c0>)
 8009196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	e780      	b.n	80090a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091a8:	f000 f9ce 	bl	8009548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ac:	f000 fc7c 	bl	8009aa8 <xTaskResumeAll>
 80091b0:	e77a      	b.n	80090a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091b4:	f000 f9c8 	bl	8009548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091b8:	f000 fc76 	bl	8009aa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091be:	f000 fa15 	bl	80095ec <prvIsQueueEmpty>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f43f af6f 	beq.w	80090a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3730      	adds	r7, #48	@ 0x30
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08e      	sub	sp, #56	@ 0x38
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10b      	bne.n	800920c <xQueueSemaphoreTake+0x34>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	623b      	str	r3, [r7, #32]
}
 8009206:	bf00      	nop
 8009208:	bf00      	nop
 800920a:	e7fd      	b.n	8009208 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800920c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	61fb      	str	r3, [r7, #28]
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800922c:	f000 fff2 	bl	800a214 <xTaskGetSchedulerState>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d102      	bne.n	800923c <xQueueSemaphoreTake+0x64>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <xQueueSemaphoreTake+0x68>
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <xQueueSemaphoreTake+0x6a>
 8009240:	2300      	movs	r3, #0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	61bb      	str	r3, [r7, #24]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800925e:	f001 ff53 	bl	800b108 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009266:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	d024      	beq.n	80092b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	1e5a      	subs	r2, r3, #1
 8009272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009274:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d104      	bne.n	8009288 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800927e:	f001 f98b 	bl	800a598 <pvTaskIncrementMutexHeldCount>
 8009282:	4602      	mov	r2, r0
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00f      	beq.n	80092b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009292:	3310      	adds	r3, #16
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fe1d 	bl	8009ed4 <xTaskRemoveFromEventList>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092a0:	4b54      	ldr	r3, [pc, #336]	@ (80093f4 <xQueueSemaphoreTake+0x21c>)
 80092a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092b0:	f001 ff5c 	bl	800b16c <vPortExitCritical>
				return pdPASS;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e098      	b.n	80093ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d112      	bne.n	80092e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00b      	beq.n	80092dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80092c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	617b      	str	r3, [r7, #20]
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	e7fd      	b.n	80092d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80092dc:	f001 ff46 	bl	800b16c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092e0:	2300      	movs	r3, #0
 80092e2:	e082      	b.n	80093ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d106      	bne.n	80092f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092ea:	f107 030c 	add.w	r3, r7, #12
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fe54 	bl	8009f9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092f8:	f001 ff38 	bl	800b16c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092fc:	f000 fbc6 	bl	8009a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009300:	f001 ff02 	bl	800b108 <vPortEnterCritical>
 8009304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009306:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800930a:	b25b      	sxtb	r3, r3
 800930c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009310:	d103      	bne.n	800931a <xQueueSemaphoreTake+0x142>
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800931a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009320:	b25b      	sxtb	r3, r3
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009326:	d103      	bne.n	8009330 <xQueueSemaphoreTake+0x158>
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009330:	f001 ff1c 	bl	800b16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009334:	463a      	mov	r2, r7
 8009336:	f107 030c 	add.w	r3, r7, #12
 800933a:	4611      	mov	r1, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fe43 	bl	8009fc8 <xTaskCheckForTimeOut>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d132      	bne.n	80093ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009348:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800934a:	f000 f94f 	bl	80095ec <prvIsQueueEmpty>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d026      	beq.n	80093a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d109      	bne.n	8009370 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800935c:	f001 fed4 	bl	800b108 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	4618      	mov	r0, r3
 8009366:	f000 ff73 	bl	800a250 <xTaskPriorityInherit>
 800936a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800936c:	f001 fefe 	bl	800b16c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009372:	3324      	adds	r3, #36	@ 0x24
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fd59 	bl	8009e30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800937e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009380:	f000 f8e2 	bl	8009548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009384:	f000 fb90 	bl	8009aa8 <xTaskResumeAll>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	f47f af67 	bne.w	800925e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009390:	4b18      	ldr	r3, [pc, #96]	@ (80093f4 <xQueueSemaphoreTake+0x21c>)
 8009392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	e75d      	b.n	800925e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80093a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093a4:	f000 f8d0 	bl	8009548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093a8:	f000 fb7e 	bl	8009aa8 <xTaskResumeAll>
 80093ac:	e757      	b.n	800925e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80093ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093b0:	f000 f8ca 	bl	8009548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093b4:	f000 fb78 	bl	8009aa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093ba:	f000 f917 	bl	80095ec <prvIsQueueEmpty>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f43f af4c 	beq.w	800925e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00d      	beq.n	80093e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80093cc:	f001 fe9c 	bl	800b108 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80093d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093d2:	f000 f811 	bl	80093f8 <prvGetDisinheritPriorityAfterTimeout>
 80093d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80093d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 f83e 	bl	800a460 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80093e4:	f001 fec2 	bl	800b16c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3738      	adds	r7, #56	@ 0x38
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d006      	beq.n	8009416 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f1c3 0305 	rsb	r3, r3, #5
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e001      	b.n	800941a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800941a:	68fb      	ldr	r3, [r7, #12]
	}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10d      	bne.n	8009462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d14d      	bne.n	80094ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	4618      	mov	r0, r3
 8009454:	f000 ff7c 	bl	800a350 <xTaskPriorityDisinherit>
 8009458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	e043      	b.n	80094ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d119      	bne.n	800949c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6858      	ldr	r0, [r3, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	461a      	mov	r2, r3
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	f005 f872 	bl	800e55c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	429a      	cmp	r2, r3
 8009490:	d32b      	bcc.n	80094ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	605a      	str	r2, [r3, #4]
 800949a:	e026      	b.n	80094ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	68d8      	ldr	r0, [r3, #12]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a4:	461a      	mov	r2, r3
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	f005 f858 	bl	800e55c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	68da      	ldr	r2, [r3, #12]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b4:	425b      	negs	r3, r3
 80094b6:	441a      	add	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d207      	bcs.n	80094d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d0:	425b      	negs	r3, r3
 80094d2:	441a      	add	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d105      	bne.n	80094ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80094f2:	697b      	ldr	r3, [r7, #20]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d018      	beq.n	8009540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009516:	441a      	add	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	429a      	cmp	r2, r3
 8009526:	d303      	bcc.n	8009530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68d9      	ldr	r1, [r3, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009538:	461a      	mov	r2, r3
 800953a:	6838      	ldr	r0, [r7, #0]
 800953c:	f005 f80e 	bl	800e55c <memcpy>
	}
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009550:	f001 fdda 	bl	800b108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800955a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800955c:	e011      	b.n	8009582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d012      	beq.n	800958c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3324      	adds	r3, #36	@ 0x24
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fcb2 	bl	8009ed4 <xTaskRemoveFromEventList>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009576:	f000 fd8b 	bl	800a090 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	3b01      	subs	r3, #1
 800957e:	b2db      	uxtb	r3, r3
 8009580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009586:	2b00      	cmp	r3, #0
 8009588:	dce9      	bgt.n	800955e <prvUnlockQueue+0x16>
 800958a:	e000      	b.n	800958e <prvUnlockQueue+0x46>
					break;
 800958c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	22ff      	movs	r2, #255	@ 0xff
 8009592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009596:	f001 fde9 	bl	800b16c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800959a:	f001 fdb5 	bl	800b108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095a6:	e011      	b.n	80095cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d012      	beq.n	80095d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3310      	adds	r3, #16
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fc8d 	bl	8009ed4 <xTaskRemoveFromEventList>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095c0:	f000 fd66 	bl	800a090 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dce9      	bgt.n	80095a8 <prvUnlockQueue+0x60>
 80095d4:	e000      	b.n	80095d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	22ff      	movs	r2, #255	@ 0xff
 80095dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80095e0:	f001 fdc4 	bl	800b16c <vPortExitCritical>
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095f4:	f001 fd88 	bl	800b108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d102      	bne.n	8009606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	e001      	b.n	800960a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800960a:	f001 fdaf 	bl	800b16c <vPortExitCritical>

	return xReturn;
 800960e:	68fb      	ldr	r3, [r7, #12]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009620:	f001 fd72 	bl	800b108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800962c:	429a      	cmp	r2, r3
 800962e:	d102      	bne.n	8009636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009630:	2301      	movs	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	e001      	b.n	800963a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800963a:	f001 fd97 	bl	800b16c <vPortExitCritical>

	return xReturn;
 800963e:	68fb      	ldr	r3, [r7, #12]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e014      	b.n	8009682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009658:	4a0f      	ldr	r2, [pc, #60]	@ (8009698 <vQueueAddToRegistry+0x50>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10b      	bne.n	800967c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009664:	490c      	ldr	r1, [pc, #48]	@ (8009698 <vQueueAddToRegistry+0x50>)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800966e:	4a0a      	ldr	r2, [pc, #40]	@ (8009698 <vQueueAddToRegistry+0x50>)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	4413      	add	r3, r2
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800967a:	e006      	b.n	800968a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3301      	adds	r3, #1
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2b07      	cmp	r3, #7
 8009686:	d9e7      	bls.n	8009658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20001d68 	.word	0x20001d68

0800969c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096ac:	f001 fd2c 	bl	800b108 <vPortEnterCritical>
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096b6:	b25b      	sxtb	r3, r3
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096bc:	d103      	bne.n	80096c6 <vQueueWaitForMessageRestricted+0x2a>
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096cc:	b25b      	sxtb	r3, r3
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d2:	d103      	bne.n	80096dc <vQueueWaitForMessageRestricted+0x40>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096dc:	f001 fd46 	bl	800b16c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d106      	bne.n	80096f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	3324      	adds	r3, #36	@ 0x24
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fbc3 	bl	8009e7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096f6:	6978      	ldr	r0, [r7, #20]
 80096f8:	f7ff ff26 	bl	8009548 <prvUnlockQueue>
	}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08c      	sub	sp, #48	@ 0x30
 8009708:	af04      	add	r7, sp, #16
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	4613      	mov	r3, r2
 8009712:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009714:	88fb      	ldrh	r3, [r7, #6]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4618      	mov	r0, r3
 800971a:	f001 fe17 	bl	800b34c <pvPortMalloc>
 800971e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00e      	beq.n	8009744 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009726:	2058      	movs	r0, #88	@ 0x58
 8009728:	f001 fe10 	bl	800b34c <pvPortMalloc>
 800972c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	631a      	str	r2, [r3, #48]	@ 0x30
 800973a:	e005      	b.n	8009748 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800973c:	6978      	ldr	r0, [r7, #20]
 800973e:	f001 fecd 	bl	800b4dc <vPortFree>
 8009742:	e001      	b.n	8009748 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d013      	beq.n	8009776 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800974e:	88fa      	ldrh	r2, [r7, #6]
 8009750:	2300      	movs	r3, #0
 8009752:	9303      	str	r3, [sp, #12]
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	9302      	str	r3, [sp, #8]
 8009758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f80e 	bl	8009786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800976a:	69f8      	ldr	r0, [r7, #28]
 800976c:	f000 f89c 	bl	80098a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009770:	2301      	movs	r3, #1
 8009772:	61bb      	str	r3, [r7, #24]
 8009774:	e002      	b.n	800977c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009776:	f04f 33ff 	mov.w	r3, #4294967295
 800977a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800977c:	69bb      	ldr	r3, [r7, #24]
	}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b088      	sub	sp, #32
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	461a      	mov	r2, r3
 800979e:	21a5      	movs	r1, #165	@ 0xa5
 80097a0:	f004 fe7e 	bl	800e4a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80097ae:	3b01      	subs	r3, #1
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	f023 0307 	bic.w	r3, r3, #7
 80097bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	f003 0307 	and.w	r3, r3, #7
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	617b      	str	r3, [r7, #20]
}
 80097da:	bf00      	nop
 80097dc:	bf00      	nop
 80097de:	e7fd      	b.n	80097dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01f      	beq.n	8009826 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	e012      	b.n	8009812 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	7819      	ldrb	r1, [r3, #0]
 80097f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	3334      	adds	r3, #52	@ 0x34
 80097fc:	460a      	mov	r2, r1
 80097fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d006      	beq.n	800981a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	3301      	adds	r3, #1
 8009810:	61fb      	str	r3, [r7, #28]
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	2b09      	cmp	r3, #9
 8009816:	d9e9      	bls.n	80097ec <prvInitialiseNewTask+0x66>
 8009818:	e000      	b.n	800981c <prvInitialiseNewTask+0x96>
			{
				break;
 800981a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009824:	e003      	b.n	800982e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009830:	2b04      	cmp	r3, #4
 8009832:	d901      	bls.n	8009838 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009834:	2304      	movs	r3, #4
 8009836:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800983c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009842:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	2200      	movs	r2, #0
 8009848:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	3304      	adds	r3, #4
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff f8b2 	bl	80089b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	3318      	adds	r3, #24
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff f8ad 	bl	80089b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009866:	f1c3 0205 	rsb	r2, r3, #5
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009872:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	2200      	movs	r2, #0
 8009878:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	69b8      	ldr	r0, [r7, #24]
 8009888:	f001 fb0c 	bl	800aea4 <pxPortInitialiseStack>
 800988c:	4602      	mov	r2, r0
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800989c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800989e:	bf00      	nop
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098b0:	f001 fc2a 	bl	800b108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098b4:	4b2c      	ldr	r3, [pc, #176]	@ (8009968 <prvAddNewTaskToReadyList+0xc0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3301      	adds	r3, #1
 80098ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009968 <prvAddNewTaskToReadyList+0xc0>)
 80098bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098be:	4b2b      	ldr	r3, [pc, #172]	@ (800996c <prvAddNewTaskToReadyList+0xc4>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d109      	bne.n	80098da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098c6:	4a29      	ldr	r2, [pc, #164]	@ (800996c <prvAddNewTaskToReadyList+0xc4>)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098cc:	4b26      	ldr	r3, [pc, #152]	@ (8009968 <prvAddNewTaskToReadyList+0xc0>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d110      	bne.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098d4:	f000 fc00 	bl	800a0d8 <prvInitialiseTaskLists>
 80098d8:	e00d      	b.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098da:	4b25      	ldr	r3, [pc, #148]	@ (8009970 <prvAddNewTaskToReadyList+0xc8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098e2:	4b22      	ldr	r3, [pc, #136]	@ (800996c <prvAddNewTaskToReadyList+0xc4>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d802      	bhi.n	80098f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098f0:	4a1e      	ldr	r2, [pc, #120]	@ (800996c <prvAddNewTaskToReadyList+0xc4>)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009974 <prvAddNewTaskToReadyList+0xcc>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3301      	adds	r3, #1
 80098fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009974 <prvAddNewTaskToReadyList+0xcc>)
 80098fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009900:	4b1c      	ldr	r3, [pc, #112]	@ (8009974 <prvAddNewTaskToReadyList+0xcc>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990c:	2201      	movs	r2, #1
 800990e:	409a      	lsls	r2, r3
 8009910:	4b19      	ldr	r3, [pc, #100]	@ (8009978 <prvAddNewTaskToReadyList+0xd0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4313      	orrs	r3, r2
 8009916:	4a18      	ldr	r2, [pc, #96]	@ (8009978 <prvAddNewTaskToReadyList+0xd0>)
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4a15      	ldr	r2, [pc, #84]	@ (800997c <prvAddNewTaskToReadyList+0xd4>)
 8009928:	441a      	add	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3304      	adds	r3, #4
 800992e:	4619      	mov	r1, r3
 8009930:	4610      	mov	r0, r2
 8009932:	f7ff f84e 	bl	80089d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009936:	f001 fc19 	bl	800b16c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800993a:	4b0d      	ldr	r3, [pc, #52]	@ (8009970 <prvAddNewTaskToReadyList+0xc8>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00e      	beq.n	8009960 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009942:	4b0a      	ldr	r3, [pc, #40]	@ (800996c <prvAddNewTaskToReadyList+0xc4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994c:	429a      	cmp	r2, r3
 800994e:	d207      	bcs.n	8009960 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009950:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <prvAddNewTaskToReadyList+0xd8>)
 8009952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20001e80 	.word	0x20001e80
 800996c:	20001da8 	.word	0x20001da8
 8009970:	20001e8c 	.word	0x20001e8c
 8009974:	20001e9c 	.word	0x20001e9c
 8009978:	20001e88 	.word	0x20001e88
 800997c:	20001dac 	.word	0x20001dac
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800998c:	2300      	movs	r3, #0
 800998e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d018      	beq.n	80099c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009996:	4b14      	ldr	r3, [pc, #80]	@ (80099e8 <vTaskDelay+0x64>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00b      	beq.n	80099b6 <vTaskDelay+0x32>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	60bb      	str	r3, [r7, #8]
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	e7fd      	b.n	80099b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80099b6:	f000 f869 	bl	8009a8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099ba:	2100      	movs	r1, #0
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 feed 	bl	800a79c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099c2:	f000 f871 	bl	8009aa8 <xTaskResumeAll>
 80099c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d107      	bne.n	80099de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80099ce:	4b07      	ldr	r3, [pc, #28]	@ (80099ec <vTaskDelay+0x68>)
 80099d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20001ea8 	.word	0x20001ea8
 80099ec:	e000ed04 	.word	0xe000ed04

080099f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80099f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a74 <vTaskStartScheduler+0x84>)
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	2300      	movs	r3, #0
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	2300      	movs	r3, #0
 8009a00:	2282      	movs	r2, #130	@ 0x82
 8009a02:	491d      	ldr	r1, [pc, #116]	@ (8009a78 <vTaskStartScheduler+0x88>)
 8009a04:	481d      	ldr	r0, [pc, #116]	@ (8009a7c <vTaskStartScheduler+0x8c>)
 8009a06:	f7ff fe7d 	bl	8009704 <xTaskCreate>
 8009a0a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d102      	bne.n	8009a18 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009a12:	f000 ff29 	bl	800a868 <xTimerCreateTimerTask>
 8009a16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d116      	bne.n	8009a4c <vTaskStartScheduler+0x5c>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60bb      	str	r3, [r7, #8]
}
 8009a30:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a32:	4b13      	ldr	r3, [pc, #76]	@ (8009a80 <vTaskStartScheduler+0x90>)
 8009a34:	f04f 32ff 	mov.w	r2, #4294967295
 8009a38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a3a:	4b12      	ldr	r3, [pc, #72]	@ (8009a84 <vTaskStartScheduler+0x94>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a40:	4b11      	ldr	r3, [pc, #68]	@ (8009a88 <vTaskStartScheduler+0x98>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a46:	f001 fabb 	bl	800afc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a4a:	e00f      	b.n	8009a6c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a52:	d10b      	bne.n	8009a6c <vTaskStartScheduler+0x7c>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	607b      	str	r3, [r7, #4]
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	e7fd      	b.n	8009a68 <vTaskStartScheduler+0x78>
}
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20001ea4 	.word	0x20001ea4
 8009a78:	0800f374 	.word	0x0800f374
 8009a7c:	0800a0a9 	.word	0x0800a0a9
 8009a80:	20001ea0 	.word	0x20001ea0
 8009a84:	20001e8c 	.word	0x20001e8c
 8009a88:	20001e84 	.word	0x20001e84

08009a8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a90:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <vTaskSuspendAll+0x18>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3301      	adds	r3, #1
 8009a96:	4a03      	ldr	r2, [pc, #12]	@ (8009aa4 <vTaskSuspendAll+0x18>)
 8009a98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009a9a:	bf00      	nop
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr
 8009aa4:	20001ea8 	.word	0x20001ea8

08009aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ab6:	4b42      	ldr	r3, [pc, #264]	@ (8009bc0 <xTaskResumeAll+0x118>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10b      	bne.n	8009ad6 <xTaskResumeAll+0x2e>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	603b      	str	r3, [r7, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	e7fd      	b.n	8009ad2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ad6:	f001 fb17 	bl	800b108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ada:	4b39      	ldr	r3, [pc, #228]	@ (8009bc0 <xTaskResumeAll+0x118>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	4a37      	ldr	r2, [pc, #220]	@ (8009bc0 <xTaskResumeAll+0x118>)
 8009ae2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae4:	4b36      	ldr	r3, [pc, #216]	@ (8009bc0 <xTaskResumeAll+0x118>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d161      	bne.n	8009bb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aec:	4b35      	ldr	r3, [pc, #212]	@ (8009bc4 <xTaskResumeAll+0x11c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d05d      	beq.n	8009bb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009af4:	e02e      	b.n	8009b54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af6:	4b34      	ldr	r3, [pc, #208]	@ (8009bc8 <xTaskResumeAll+0x120>)
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3318      	adds	r3, #24
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe ffc2 	bl	8008a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe ffbd 	bl	8008a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b16:	2201      	movs	r2, #1
 8009b18:	409a      	lsls	r2, r3
 8009b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009bcc <xTaskResumeAll+0x124>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	4a2a      	ldr	r2, [pc, #168]	@ (8009bcc <xTaskResumeAll+0x124>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4a27      	ldr	r2, [pc, #156]	@ (8009bd0 <xTaskResumeAll+0x128>)
 8009b32:	441a      	add	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3304      	adds	r3, #4
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7fe ff49 	bl	80089d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b44:	4b23      	ldr	r3, [pc, #140]	@ (8009bd4 <xTaskResumeAll+0x12c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d302      	bcc.n	8009b54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b4e:	4b22      	ldr	r3, [pc, #136]	@ (8009bd8 <xTaskResumeAll+0x130>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b54:	4b1c      	ldr	r3, [pc, #112]	@ (8009bc8 <xTaskResumeAll+0x120>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1cc      	bne.n	8009af6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b62:	f000 fb37 	bl	800a1d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b66:	4b1d      	ldr	r3, [pc, #116]	@ (8009bdc <xTaskResumeAll+0x134>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d010      	beq.n	8009b94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b72:	f000 f847 	bl	8009c04 <xTaskIncrementTick>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b7c:	4b16      	ldr	r3, [pc, #88]	@ (8009bd8 <xTaskResumeAll+0x130>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f1      	bne.n	8009b72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009b8e:	4b13      	ldr	r3, [pc, #76]	@ (8009bdc <xTaskResumeAll+0x134>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b94:	4b10      	ldr	r3, [pc, #64]	@ (8009bd8 <xTaskResumeAll+0x130>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d009      	beq.n	8009bb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8009be0 <xTaskResumeAll+0x138>)
 8009ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bb0:	f001 fadc 	bl	800b16c <vPortExitCritical>

	return xAlreadyYielded;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20001ea8 	.word	0x20001ea8
 8009bc4:	20001e80 	.word	0x20001e80
 8009bc8:	20001e40 	.word	0x20001e40
 8009bcc:	20001e88 	.word	0x20001e88
 8009bd0:	20001dac 	.word	0x20001dac
 8009bd4:	20001da8 	.word	0x20001da8
 8009bd8:	20001e94 	.word	0x20001e94
 8009bdc:	20001e90 	.word	0x20001e90
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bea:	4b05      	ldr	r3, [pc, #20]	@ (8009c00 <xTaskGetTickCount+0x1c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bf0:	687b      	ldr	r3, [r7, #4]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	20001e84 	.word	0x20001e84

08009c04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009d4c <xTaskIncrementTick+0x148>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f040 8089 	bne.w	8009d2a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c18:	4b4d      	ldr	r3, [pc, #308]	@ (8009d50 <xTaskIncrementTick+0x14c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c20:	4a4b      	ldr	r2, [pc, #300]	@ (8009d50 <xTaskIncrementTick+0x14c>)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d121      	bne.n	8009c70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c2c:	4b49      	ldr	r3, [pc, #292]	@ (8009d54 <xTaskIncrementTick+0x150>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	603b      	str	r3, [r7, #0]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <xTaskIncrementTick+0x46>
 8009c4e:	4b41      	ldr	r3, [pc, #260]	@ (8009d54 <xTaskIncrementTick+0x150>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	4b40      	ldr	r3, [pc, #256]	@ (8009d58 <xTaskIncrementTick+0x154>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a3e      	ldr	r2, [pc, #248]	@ (8009d54 <xTaskIncrementTick+0x150>)
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8009d58 <xTaskIncrementTick+0x154>)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	4b3e      	ldr	r3, [pc, #248]	@ (8009d5c <xTaskIncrementTick+0x158>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3301      	adds	r3, #1
 8009c68:	4a3c      	ldr	r2, [pc, #240]	@ (8009d5c <xTaskIncrementTick+0x158>)
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	f000 fab2 	bl	800a1d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c70:	4b3b      	ldr	r3, [pc, #236]	@ (8009d60 <xTaskIncrementTick+0x15c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d348      	bcc.n	8009d0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c7a:	4b36      	ldr	r3, [pc, #216]	@ (8009d54 <xTaskIncrementTick+0x150>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d104      	bne.n	8009c8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c84:	4b36      	ldr	r3, [pc, #216]	@ (8009d60 <xTaskIncrementTick+0x15c>)
 8009c86:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8a:	601a      	str	r2, [r3, #0]
					break;
 8009c8c:	e03e      	b.n	8009d0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c8e:	4b31      	ldr	r3, [pc, #196]	@ (8009d54 <xTaskIncrementTick+0x150>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d203      	bcs.n	8009cae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8009d60 <xTaskIncrementTick+0x15c>)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cac:	e02e      	b.n	8009d0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe feea 	bl	8008a8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	3318      	adds	r3, #24
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe fee1 	bl	8008a8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cce:	2201      	movs	r2, #1
 8009cd0:	409a      	lsls	r2, r3
 8009cd2:	4b24      	ldr	r3, [pc, #144]	@ (8009d64 <xTaskIncrementTick+0x160>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	4a22      	ldr	r2, [pc, #136]	@ (8009d64 <xTaskIncrementTick+0x160>)
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d68 <xTaskIncrementTick+0x164>)
 8009cea:	441a      	add	r2, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe fe6d 	bl	80089d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8009d6c <xTaskIncrementTick+0x168>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d3b9      	bcc.n	8009c7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009d06:	2301      	movs	r3, #1
 8009d08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d0a:	e7b6      	b.n	8009c7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d0c:	4b17      	ldr	r3, [pc, #92]	@ (8009d6c <xTaskIncrementTick+0x168>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d12:	4915      	ldr	r1, [pc, #84]	@ (8009d68 <xTaskIncrementTick+0x164>)
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d907      	bls.n	8009d34 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	e004      	b.n	8009d34 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d2a:	4b11      	ldr	r3, [pc, #68]	@ (8009d70 <xTaskIncrementTick+0x16c>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	4a0f      	ldr	r2, [pc, #60]	@ (8009d70 <xTaskIncrementTick+0x16c>)
 8009d32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d34:	4b0f      	ldr	r3, [pc, #60]	@ (8009d74 <xTaskIncrementTick+0x170>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d40:	697b      	ldr	r3, [r7, #20]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20001ea8 	.word	0x20001ea8
 8009d50:	20001e84 	.word	0x20001e84
 8009d54:	20001e38 	.word	0x20001e38
 8009d58:	20001e3c 	.word	0x20001e3c
 8009d5c:	20001e98 	.word	0x20001e98
 8009d60:	20001ea0 	.word	0x20001ea0
 8009d64:	20001e88 	.word	0x20001e88
 8009d68:	20001dac 	.word	0x20001dac
 8009d6c:	20001da8 	.word	0x20001da8
 8009d70:	20001e90 	.word	0x20001e90
 8009d74:	20001e94 	.word	0x20001e94

08009d78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d7e:	4b27      	ldr	r3, [pc, #156]	@ (8009e1c <vTaskSwitchContext+0xa4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d86:	4b26      	ldr	r3, [pc, #152]	@ (8009e20 <vTaskSwitchContext+0xa8>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d8c:	e040      	b.n	8009e10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009d8e:	4b24      	ldr	r3, [pc, #144]	@ (8009e20 <vTaskSwitchContext+0xa8>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d94:	4b23      	ldr	r3, [pc, #140]	@ (8009e24 <vTaskSwitchContext+0xac>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	fab3 f383 	clz	r3, r3
 8009da0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	f1c3 031f 	rsb	r3, r3, #31
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	491f      	ldr	r1, [pc, #124]	@ (8009e28 <vTaskSwitchContext+0xb0>)
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	440b      	add	r3, r1
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10b      	bne.n	8009dd6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	607b      	str	r3, [r7, #4]
}
 8009dd0:	bf00      	nop
 8009dd2:	bf00      	nop
 8009dd4:	e7fd      	b.n	8009dd2 <vTaskSwitchContext+0x5a>
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4a11      	ldr	r2, [pc, #68]	@ (8009e28 <vTaskSwitchContext+0xb0>)
 8009de2:	4413      	add	r3, r2
 8009de4:	613b      	str	r3, [r7, #16]
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	605a      	str	r2, [r3, #4]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	3308      	adds	r3, #8
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d104      	bne.n	8009e06 <vTaskSwitchContext+0x8e>
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	605a      	str	r2, [r3, #4]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	4a07      	ldr	r2, [pc, #28]	@ (8009e2c <vTaskSwitchContext+0xb4>)
 8009e0e:	6013      	str	r3, [r2, #0]
}
 8009e10:	bf00      	nop
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	20001ea8 	.word	0x20001ea8
 8009e20:	20001e94 	.word	0x20001e94
 8009e24:	20001e88 	.word	0x20001e88
 8009e28:	20001dac 	.word	0x20001dac
 8009e2c:	20001da8 	.word	0x20001da8

08009e30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10b      	bne.n	8009e58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	60fb      	str	r3, [r7, #12]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e58:	4b07      	ldr	r3, [pc, #28]	@ (8009e78 <vTaskPlaceOnEventList+0x48>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3318      	adds	r3, #24
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7fe fdda 	bl	8008a1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e66:	2101      	movs	r1, #1
 8009e68:	6838      	ldr	r0, [r7, #0]
 8009e6a:	f000 fc97 	bl	800a79c <prvAddCurrentTaskToDelayedList>
}
 8009e6e:	bf00      	nop
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20001da8 	.word	0x20001da8

08009e7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	617b      	str	r3, [r7, #20]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3318      	adds	r3, #24
 8009eac:	4619      	mov	r1, r3
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7fe fd8f 	bl	80089d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009eba:	f04f 33ff 	mov.w	r3, #4294967295
 8009ebe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	68b8      	ldr	r0, [r7, #8]
 8009ec4:	f000 fc6a 	bl	800a79c <prvAddCurrentTaskToDelayedList>
	}
 8009ec8:	bf00      	nop
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20001da8 	.word	0x20001da8

08009ed4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	60fb      	str	r3, [r7, #12]
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	e7fd      	b.n	8009efe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	3318      	adds	r3, #24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fdc0 	bl	8008a8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009f84 <xTaskRemoveFromEventList+0xb0>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11c      	bne.n	8009f4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	3304      	adds	r3, #4
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fdb7 	bl	8008a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f22:	2201      	movs	r2, #1
 8009f24:	409a      	lsls	r2, r3
 8009f26:	4b18      	ldr	r3, [pc, #96]	@ (8009f88 <xTaskRemoveFromEventList+0xb4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	4a16      	ldr	r2, [pc, #88]	@ (8009f88 <xTaskRemoveFromEventList+0xb4>)
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4a13      	ldr	r2, [pc, #76]	@ (8009f8c <xTaskRemoveFromEventList+0xb8>)
 8009f3e:	441a      	add	r2, r3
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fe fd43 	bl	80089d2 <vListInsertEnd>
 8009f4c:	e005      	b.n	8009f5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3318      	adds	r3, #24
 8009f52:	4619      	mov	r1, r3
 8009f54:	480e      	ldr	r0, [pc, #56]	@ (8009f90 <xTaskRemoveFromEventList+0xbc>)
 8009f56:	f7fe fd3c 	bl	80089d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f94 <xTaskRemoveFromEventList+0xc0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d905      	bls.n	8009f74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f98 <xTaskRemoveFromEventList+0xc4>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e001      	b.n	8009f78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f74:	2300      	movs	r3, #0
 8009f76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f78:	697b      	ldr	r3, [r7, #20]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20001ea8 	.word	0x20001ea8
 8009f88:	20001e88 	.word	0x20001e88
 8009f8c:	20001dac 	.word	0x20001dac
 8009f90:	20001e40 	.word	0x20001e40
 8009f94:	20001da8 	.word	0x20001da8
 8009f98:	20001e94 	.word	0x20001e94

08009f9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fa4:	4b06      	ldr	r3, [pc, #24]	@ (8009fc0 <vTaskInternalSetTimeOutState+0x24>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fac:	4b05      	ldr	r3, [pc, #20]	@ (8009fc4 <vTaskInternalSetTimeOutState+0x28>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	605a      	str	r2, [r3, #4]
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	20001e98 	.word	0x20001e98
 8009fc4:	20001e84 	.word	0x20001e84

08009fc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	613b      	str	r3, [r7, #16]
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10b      	bne.n	800a00e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60fb      	str	r3, [r7, #12]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a00e:	f001 f87b 	bl	800b108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a012:	4b1d      	ldr	r3, [pc, #116]	@ (800a088 <xTaskCheckForTimeOut+0xc0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02a:	d102      	bne.n	800a032 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	61fb      	str	r3, [r7, #28]
 800a030:	e023      	b.n	800a07a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	4b15      	ldr	r3, [pc, #84]	@ (800a08c <xTaskCheckForTimeOut+0xc4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d007      	beq.n	800a04e <xTaskCheckForTimeOut+0x86>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	429a      	cmp	r2, r3
 800a046:	d302      	bcc.n	800a04e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a048:	2301      	movs	r3, #1
 800a04a:	61fb      	str	r3, [r7, #28]
 800a04c:	e015      	b.n	800a07a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	429a      	cmp	r2, r3
 800a056:	d20b      	bcs.n	800a070 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	1ad2      	subs	r2, r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7ff ff99 	bl	8009f9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]
 800a06e:	e004      	b.n	800a07a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a07a:	f001 f877 	bl	800b16c <vPortExitCritical>

	return xReturn;
 800a07e:	69fb      	ldr	r3, [r7, #28]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3720      	adds	r7, #32
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20001e84 	.word	0x20001e84
 800a08c:	20001e98 	.word	0x20001e98

0800a090 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a090:	b480      	push	{r7}
 800a092:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a094:	4b03      	ldr	r3, [pc, #12]	@ (800a0a4 <vTaskMissedYield+0x14>)
 800a096:	2201      	movs	r2, #1
 800a098:	601a      	str	r2, [r3, #0]
}
 800a09a:	bf00      	nop
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	20001e94 	.word	0x20001e94

0800a0a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0b0:	f000 f852 	bl	800a158 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0b4:	4b06      	ldr	r3, [pc, #24]	@ (800a0d0 <prvIdleTask+0x28>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d9f9      	bls.n	800a0b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0bc:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <prvIdleTask+0x2c>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0cc:	e7f0      	b.n	800a0b0 <prvIdleTask+0x8>
 800a0ce:	bf00      	nop
 800a0d0:	20001dac 	.word	0x20001dac
 800a0d4:	e000ed04 	.word	0xe000ed04

0800a0d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0de:	2300      	movs	r3, #0
 800a0e0:	607b      	str	r3, [r7, #4]
 800a0e2:	e00c      	b.n	800a0fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4a12      	ldr	r2, [pc, #72]	@ (800a138 <prvInitialiseTaskLists+0x60>)
 800a0f0:	4413      	add	r3, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe fc40 	bl	8008978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	607b      	str	r3, [r7, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b04      	cmp	r3, #4
 800a102:	d9ef      	bls.n	800a0e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a104:	480d      	ldr	r0, [pc, #52]	@ (800a13c <prvInitialiseTaskLists+0x64>)
 800a106:	f7fe fc37 	bl	8008978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a10a:	480d      	ldr	r0, [pc, #52]	@ (800a140 <prvInitialiseTaskLists+0x68>)
 800a10c:	f7fe fc34 	bl	8008978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a110:	480c      	ldr	r0, [pc, #48]	@ (800a144 <prvInitialiseTaskLists+0x6c>)
 800a112:	f7fe fc31 	bl	8008978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a116:	480c      	ldr	r0, [pc, #48]	@ (800a148 <prvInitialiseTaskLists+0x70>)
 800a118:	f7fe fc2e 	bl	8008978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a11c:	480b      	ldr	r0, [pc, #44]	@ (800a14c <prvInitialiseTaskLists+0x74>)
 800a11e:	f7fe fc2b 	bl	8008978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a122:	4b0b      	ldr	r3, [pc, #44]	@ (800a150 <prvInitialiseTaskLists+0x78>)
 800a124:	4a05      	ldr	r2, [pc, #20]	@ (800a13c <prvInitialiseTaskLists+0x64>)
 800a126:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a128:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <prvInitialiseTaskLists+0x7c>)
 800a12a:	4a05      	ldr	r2, [pc, #20]	@ (800a140 <prvInitialiseTaskLists+0x68>)
 800a12c:	601a      	str	r2, [r3, #0]
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20001dac 	.word	0x20001dac
 800a13c:	20001e10 	.word	0x20001e10
 800a140:	20001e24 	.word	0x20001e24
 800a144:	20001e40 	.word	0x20001e40
 800a148:	20001e54 	.word	0x20001e54
 800a14c:	20001e6c 	.word	0x20001e6c
 800a150:	20001e38 	.word	0x20001e38
 800a154:	20001e3c 	.word	0x20001e3c

0800a158 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a15e:	e019      	b.n	800a194 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a160:	f000 ffd2 	bl	800b108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a164:	4b10      	ldr	r3, [pc, #64]	@ (800a1a8 <prvCheckTasksWaitingTermination+0x50>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3304      	adds	r3, #4
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe fc8b 	bl	8008a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a176:	4b0d      	ldr	r3, [pc, #52]	@ (800a1ac <prvCheckTasksWaitingTermination+0x54>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	4a0b      	ldr	r2, [pc, #44]	@ (800a1ac <prvCheckTasksWaitingTermination+0x54>)
 800a17e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a180:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b0 <prvCheckTasksWaitingTermination+0x58>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3b01      	subs	r3, #1
 800a186:	4a0a      	ldr	r2, [pc, #40]	@ (800a1b0 <prvCheckTasksWaitingTermination+0x58>)
 800a188:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a18a:	f000 ffef 	bl	800b16c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f810 	bl	800a1b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a194:	4b06      	ldr	r3, [pc, #24]	@ (800a1b0 <prvCheckTasksWaitingTermination+0x58>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e1      	bne.n	800a160 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20001e54 	.word	0x20001e54
 800a1ac:	20001e80 	.word	0x20001e80
 800a1b0:	20001e68 	.word	0x20001e68

0800a1b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f001 f98b 	bl	800b4dc <vPortFree>
			vPortFree( pxTCB );
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f001 f988 	bl	800b4dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1da:	4b0c      	ldr	r3, [pc, #48]	@ (800a20c <prvResetNextTaskUnblockTime+0x38>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a210 <prvResetNextTaskUnblockTime+0x3c>)
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1ec:	e008      	b.n	800a200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ee:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <prvResetNextTaskUnblockTime+0x38>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	4a04      	ldr	r2, [pc, #16]	@ (800a210 <prvResetNextTaskUnblockTime+0x3c>)
 800a1fe:	6013      	str	r3, [r2, #0]
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20001e38 	.word	0x20001e38
 800a210:	20001ea0 	.word	0x20001ea0

0800a214 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a21a:	4b0b      	ldr	r3, [pc, #44]	@ (800a248 <xTaskGetSchedulerState+0x34>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a222:	2301      	movs	r3, #1
 800a224:	607b      	str	r3, [r7, #4]
 800a226:	e008      	b.n	800a23a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a228:	4b08      	ldr	r3, [pc, #32]	@ (800a24c <xTaskGetSchedulerState+0x38>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a230:	2302      	movs	r3, #2
 800a232:	607b      	str	r3, [r7, #4]
 800a234:	e001      	b.n	800a23a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a236:	2300      	movs	r3, #0
 800a238:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a23a:	687b      	ldr	r3, [r7, #4]
	}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20001e8c 	.word	0x20001e8c
 800a24c:	20001ea8 	.word	0x20001ea8

0800a250 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d069      	beq.n	800a33a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26a:	4b36      	ldr	r3, [pc, #216]	@ (800a344 <xTaskPriorityInherit+0xf4>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a270:	429a      	cmp	r2, r3
 800a272:	d259      	bcs.n	800a328 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	db06      	blt.n	800a28a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a27c:	4b31      	ldr	r3, [pc, #196]	@ (800a344 <xTaskPriorityInherit+0xf4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a282:	f1c3 0205 	rsb	r2, r3, #5
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	6959      	ldr	r1, [r3, #20]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a292:	4613      	mov	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4a2b      	ldr	r2, [pc, #172]	@ (800a348 <xTaskPriorityInherit+0xf8>)
 800a29c:	4413      	add	r3, r2
 800a29e:	4299      	cmp	r1, r3
 800a2a0:	d13a      	bne.n	800a318 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe fbf0 	bl	8008a8c <uxListRemove>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d115      	bne.n	800a2de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b6:	4924      	ldr	r1, [pc, #144]	@ (800a348 <xTaskPriorityInherit+0xf8>)
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	440b      	add	r3, r1
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <xTaskPriorityInherit+0x8e>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43da      	mvns	r2, r3
 800a2d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a34c <xTaskPriorityInherit+0xfc>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	4a1c      	ldr	r2, [pc, #112]	@ (800a34c <xTaskPriorityInherit+0xfc>)
 800a2dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2de:	4b19      	ldr	r3, [pc, #100]	@ (800a344 <xTaskPriorityInherit+0xf4>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	409a      	lsls	r2, r3
 800a2f0:	4b16      	ldr	r3, [pc, #88]	@ (800a34c <xTaskPriorityInherit+0xfc>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	4a15      	ldr	r2, [pc, #84]	@ (800a34c <xTaskPriorityInherit+0xfc>)
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4a10      	ldr	r2, [pc, #64]	@ (800a348 <xTaskPriorityInherit+0xf8>)
 800a308:	441a      	add	r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f7fe fb5e 	bl	80089d2 <vListInsertEnd>
 800a316:	e004      	b.n	800a322 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a318:	4b0a      	ldr	r3, [pc, #40]	@ (800a344 <xTaskPriorityInherit+0xf4>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a322:	2301      	movs	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	e008      	b.n	800a33a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a32c:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <xTaskPriorityInherit+0xf4>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a332:	429a      	cmp	r2, r3
 800a334:	d201      	bcs.n	800a33a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a336:	2301      	movs	r3, #1
 800a338:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a33a:	68fb      	ldr	r3, [r7, #12]
	}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20001da8 	.word	0x20001da8
 800a348:	20001dac 	.word	0x20001dac
 800a34c:	20001e88 	.word	0x20001e88

0800a350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d070      	beq.n	800a448 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a366:	4b3b      	ldr	r3, [pc, #236]	@ (800a454 <xTaskPriorityDisinherit+0x104>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d00b      	beq.n	800a388 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	60fb      	str	r3, [r7, #12]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10b      	bne.n	800a3a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	60bb      	str	r3, [r7, #8]
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	e7fd      	b.n	800a3a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ac:	1e5a      	subs	r2, r3, #1
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d044      	beq.n	800a448 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d140      	bne.n	800a448 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fb5e 	bl	8008a8c <uxListRemove>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d115      	bne.n	800a402 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3da:	491f      	ldr	r1, [pc, #124]	@ (800a458 <xTaskPriorityDisinherit+0x108>)
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <xTaskPriorityDisinherit+0xb2>
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f6:	43da      	mvns	r2, r3
 800a3f8:	4b18      	ldr	r3, [pc, #96]	@ (800a45c <xTaskPriorityDisinherit+0x10c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	4a17      	ldr	r2, [pc, #92]	@ (800a45c <xTaskPriorityDisinherit+0x10c>)
 800a400:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40e:	f1c3 0205 	rsb	r2, r3, #5
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41a:	2201      	movs	r2, #1
 800a41c:	409a      	lsls	r2, r3
 800a41e:	4b0f      	ldr	r3, [pc, #60]	@ (800a45c <xTaskPriorityDisinherit+0x10c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4313      	orrs	r3, r2
 800a424:	4a0d      	ldr	r2, [pc, #52]	@ (800a45c <xTaskPriorityDisinherit+0x10c>)
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a42c:	4613      	mov	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4a08      	ldr	r2, [pc, #32]	@ (800a458 <xTaskPriorityDisinherit+0x108>)
 800a436:	441a      	add	r2, r3
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	3304      	adds	r3, #4
 800a43c:	4619      	mov	r1, r3
 800a43e:	4610      	mov	r0, r2
 800a440:	f7fe fac7 	bl	80089d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a444:	2301      	movs	r3, #1
 800a446:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a448:	697b      	ldr	r3, [r7, #20]
	}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20001da8 	.word	0x20001da8
 800a458:	20001dac 	.word	0x20001dac
 800a45c:	20001e88 	.word	0x20001e88

0800a460 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a46e:	2301      	movs	r3, #1
 800a470:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8085 	beq.w	800a584 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10b      	bne.n	800a49a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60fb      	str	r3, [r7, #12]
}
 800a494:	bf00      	nop
 800a496:	bf00      	nop
 800a498:	e7fd      	b.n	800a496 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d902      	bls.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	61fb      	str	r3, [r7, #28]
 800a4a8:	e002      	b.n	800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d064      	beq.n	800a584 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d15f      	bne.n	800a584 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a4c4:	4b31      	ldr	r3, [pc, #196]	@ (800a58c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d10b      	bne.n	800a4e6 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60bb      	str	r3, [r7, #8]
}
 800a4e0:	bf00      	nop
 800a4e2:	bf00      	nop
 800a4e4:	e7fd      	b.n	800a4e2 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	db04      	blt.n	800a504 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	f1c3 0205 	rsb	r2, r3, #5
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	6959      	ldr	r1, [r3, #20]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4613      	mov	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4a1f      	ldr	r2, [pc, #124]	@ (800a590 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a514:	4413      	add	r3, r2
 800a516:	4299      	cmp	r1, r3
 800a518:	d134      	bne.n	800a584 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	3304      	adds	r3, #4
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe fab4 	bl	8008a8c <uxListRemove>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d115      	bne.n	800a556 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a52e:	4918      	ldr	r1, [pc, #96]	@ (800a590 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	440b      	add	r3, r1
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a544:	2201      	movs	r2, #1
 800a546:	fa02 f303 	lsl.w	r3, r2, r3
 800a54a:	43da      	mvns	r2, r3
 800a54c:	4b11      	ldr	r3, [pc, #68]	@ (800a594 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4013      	ands	r3, r2
 800a552:	4a10      	ldr	r2, [pc, #64]	@ (800a594 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a554:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55a:	2201      	movs	r2, #1
 800a55c:	409a      	lsls	r2, r3
 800a55e:	4b0d      	ldr	r3, [pc, #52]	@ (800a594 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4313      	orrs	r3, r2
 800a564:	4a0b      	ldr	r2, [pc, #44]	@ (800a594 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a566:	6013      	str	r3, [r2, #0]
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a56c:	4613      	mov	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4a06      	ldr	r2, [pc, #24]	@ (800a590 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a576:	441a      	add	r2, r3
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	f7fe fa27 	bl	80089d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a584:	bf00      	nop
 800a586:	3720      	adds	r7, #32
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	20001da8 	.word	0x20001da8
 800a590:	20001dac 	.word	0x20001dac
 800a594:	20001e88 	.word	0x20001e88

0800a598 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a59c:	4b07      	ldr	r3, [pc, #28]	@ (800a5bc <pvTaskIncrementMutexHeldCount+0x24>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a5a4:	4b05      	ldr	r3, [pc, #20]	@ (800a5bc <pvTaskIncrementMutexHeldCount+0x24>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5aa:	3201      	adds	r2, #1
 800a5ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 800a5ae:	4b03      	ldr	r3, [pc, #12]	@ (800a5bc <pvTaskIncrementMutexHeldCount+0x24>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
	}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	20001da8 	.word	0x20001da8

0800a5c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a5ce:	f000 fd9b 	bl	800b108 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a5d2:	4b26      	ldr	r3, [pc, #152]	@ (800a66c <xTaskNotifyWait+0xac>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d01a      	beq.n	800a616 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a5e0:	4b22      	ldr	r3, [pc, #136]	@ (800a66c <xTaskNotifyWait+0xac>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	43d2      	mvns	r2, r2
 800a5ea:	400a      	ands	r2, r1
 800a5ec:	651a      	str	r2, [r3, #80]	@ 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a5ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a66c <xTaskNotifyWait+0xac>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00b      	beq.n	800a616 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5fe:	2101      	movs	r1, #1
 800a600:	6838      	ldr	r0, [r7, #0]
 800a602:	f000 f8cb 	bl	800a79c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a606:	4b1a      	ldr	r3, [pc, #104]	@ (800a670 <xTaskNotifyWait+0xb0>)
 800a608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a616:	f000 fda9 	bl	800b16c <vPortExitCritical>

		taskENTER_CRITICAL();
 800a61a:	f000 fd75 	bl	800b108 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d004      	beq.n	800a62e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a624:	4b11      	ldr	r3, [pc, #68]	@ (800a66c <xTaskNotifyWait+0xac>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a62e:	4b0f      	ldr	r3, [pc, #60]	@ (800a66c <xTaskNotifyWait+0xac>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d002      	beq.n	800a642 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a63c:	2300      	movs	r3, #0
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	e008      	b.n	800a654 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a642:	4b0a      	ldr	r3, [pc, #40]	@ (800a66c <xTaskNotifyWait+0xac>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	43d2      	mvns	r2, r2
 800a64c:	400a      	ands	r2, r1
 800a64e:	651a      	str	r2, [r3, #80]	@ 0x50
				xReturn = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a654:	4b05      	ldr	r3, [pc, #20]	@ (800a66c <xTaskNotifyWait+0xac>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		}
		taskEXIT_CRITICAL();
 800a65e:	f000 fd85 	bl	800b16c <vPortExitCritical>

		return xReturn;
 800a662:	697b      	ldr	r3, [r7, #20]
	}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20001da8 	.word	0x20001da8
 800a670:	e000ed04 	.word	0xe000ed04

0800a674 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a674:	b580      	push	{r7, lr}
 800a676:	b08a      	sub	sp, #40	@ 0x28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10b      	bne.n	800a69c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61bb      	str	r3, [r7, #24]
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	e7fd      	b.n	800a698 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a69c:	f000 fe14 	bl	800b2c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800a6a4:	f3ef 8211 	mrs	r2, BASEPRI
 800a6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	617a      	str	r2, [r7, #20]
 800a6ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a6bc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6be:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a6c6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	651a      	str	r2, [r3, #80]	@ 0x50

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a6da:	7ffb      	ldrb	r3, [r7, #31]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d146      	bne.n	800a76e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00b      	beq.n	800a700 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a700:	4b20      	ldr	r3, [pc, #128]	@ (800a784 <vTaskNotifyGiveFromISR+0x110>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11c      	bne.n	800a742 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70a:	3304      	adds	r3, #4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe f9bd 	bl	8008a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a716:	2201      	movs	r2, #1
 800a718:	409a      	lsls	r2, r3
 800a71a:	4b1b      	ldr	r3, [pc, #108]	@ (800a788 <vTaskNotifyGiveFromISR+0x114>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4313      	orrs	r3, r2
 800a720:	4a19      	ldr	r2, [pc, #100]	@ (800a788 <vTaskNotifyGiveFromISR+0x114>)
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a16      	ldr	r2, [pc, #88]	@ (800a78c <vTaskNotifyGiveFromISR+0x118>)
 800a732:	441a      	add	r2, r3
 800a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7fe f949 	bl	80089d2 <vListInsertEnd>
 800a740:	e005      	b.n	800a74e <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a744:	3318      	adds	r3, #24
 800a746:	4619      	mov	r1, r3
 800a748:	4811      	ldr	r0, [pc, #68]	@ (800a790 <vTaskNotifyGiveFromISR+0x11c>)
 800a74a:	f7fe f942 	bl	80089d2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a752:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <vTaskNotifyGiveFromISR+0x120>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a758:	429a      	cmp	r2, r3
 800a75a:	d908      	bls.n	800a76e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2201      	movs	r2, #1
 800a766:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a768:	4b0b      	ldr	r3, [pc, #44]	@ (800a798 <vTaskNotifyGiveFromISR+0x124>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f383 8811 	msr	BASEPRI, r3
}
 800a778:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800a77a:	bf00      	nop
 800a77c:	3728      	adds	r7, #40	@ 0x28
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20001ea8 	.word	0x20001ea8
 800a788:	20001e88 	.word	0x20001e88
 800a78c:	20001dac 	.word	0x20001dac
 800a790:	20001e40 	.word	0x20001e40
 800a794:	20001da8 	.word	0x20001da8
 800a798:	20001e94 	.word	0x20001e94

0800a79c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7a6:	4b29      	ldr	r3, [pc, #164]	@ (800a84c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7ac:	4b28      	ldr	r3, [pc, #160]	@ (800a850 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe f96a 	bl	8008a8c <uxListRemove>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10b      	bne.n	800a7d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a7be:	4b24      	ldr	r3, [pc, #144]	@ (800a850 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ca:	43da      	mvns	r2, r3
 800a7cc:	4b21      	ldr	r3, [pc, #132]	@ (800a854 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	4a20      	ldr	r2, [pc, #128]	@ (800a854 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7dc:	d10a      	bne.n	800a7f4 <prvAddCurrentTaskToDelayedList+0x58>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d007      	beq.n	800a7f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a850 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	481a      	ldr	r0, [pc, #104]	@ (800a858 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a7ee:	f7fe f8f0 	bl	80089d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7f2:	e026      	b.n	800a842 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7fc:	4b14      	ldr	r3, [pc, #80]	@ (800a850 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d209      	bcs.n	800a820 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a80c:	4b13      	ldr	r3, [pc, #76]	@ (800a85c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b0f      	ldr	r3, [pc, #60]	@ (800a850 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3304      	adds	r3, #4
 800a816:	4619      	mov	r1, r3
 800a818:	4610      	mov	r0, r2
 800a81a:	f7fe f8fe 	bl	8008a1a <vListInsert>
}
 800a81e:	e010      	b.n	800a842 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a820:	4b0f      	ldr	r3, [pc, #60]	@ (800a860 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	4b0a      	ldr	r3, [pc, #40]	@ (800a850 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3304      	adds	r3, #4
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f7fe f8f4 	bl	8008a1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a832:	4b0c      	ldr	r3, [pc, #48]	@ (800a864 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d202      	bcs.n	800a842 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a83c:	4a09      	ldr	r2, [pc, #36]	@ (800a864 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6013      	str	r3, [r2, #0]
}
 800a842:	bf00      	nop
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20001e84 	.word	0x20001e84
 800a850:	20001da8 	.word	0x20001da8
 800a854:	20001e88 	.word	0x20001e88
 800a858:	20001e6c 	.word	0x20001e6c
 800a85c:	20001e3c 	.word	0x20001e3c
 800a860:	20001e38 	.word	0x20001e38
 800a864:	20001ea0 	.word	0x20001ea0

0800a868 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a86e:	2300      	movs	r3, #0
 800a870:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a872:	f000 fae1 	bl	800ae38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a876:	4b12      	ldr	r3, [pc, #72]	@ (800a8c0 <xTimerCreateTimerTask+0x58>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00b      	beq.n	800a896 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a87e:	4b11      	ldr	r3, [pc, #68]	@ (800a8c4 <xTimerCreateTimerTask+0x5c>)
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	2302      	movs	r3, #2
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	2300      	movs	r3, #0
 800a888:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a88c:	490e      	ldr	r1, [pc, #56]	@ (800a8c8 <xTimerCreateTimerTask+0x60>)
 800a88e:	480f      	ldr	r0, [pc, #60]	@ (800a8cc <xTimerCreateTimerTask+0x64>)
 800a890:	f7fe ff38 	bl	8009704 <xTaskCreate>
 800a894:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10b      	bne.n	800a8b4 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	603b      	str	r3, [r7, #0]
}
 800a8ae:	bf00      	nop
 800a8b0:	bf00      	nop
 800a8b2:	e7fd      	b.n	800a8b0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800a8b4:	687b      	ldr	r3, [r7, #4]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20001edc 	.word	0x20001edc
 800a8c4:	20001ee0 	.word	0x20001ee0
 800a8c8:	0800f37c 	.word	0x0800f37c
 800a8cc:	0800aa09 	.word	0x0800aa09

0800a8d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08a      	sub	sp, #40	@ 0x28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10b      	bne.n	800a900 <xTimerGenericCommand+0x30>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	623b      	str	r3, [r7, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	bf00      	nop
 800a8fe:	e7fd      	b.n	800a8fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a900:	4b19      	ldr	r3, [pc, #100]	@ (800a968 <xTimerGenericCommand+0x98>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d02a      	beq.n	800a95e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b05      	cmp	r3, #5
 800a918:	dc18      	bgt.n	800a94c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a91a:	f7ff fc7b 	bl	800a214 <xTaskGetSchedulerState>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b02      	cmp	r3, #2
 800a922:	d109      	bne.n	800a938 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a924:	4b10      	ldr	r3, [pc, #64]	@ (800a968 <xTimerGenericCommand+0x98>)
 800a926:	6818      	ldr	r0, [r3, #0]
 800a928:	f107 0114 	add.w	r1, r7, #20
 800a92c:	2300      	movs	r3, #0
 800a92e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a930:	f7fe f9d2 	bl	8008cd8 <xQueueGenericSend>
 800a934:	6278      	str	r0, [r7, #36]	@ 0x24
 800a936:	e012      	b.n	800a95e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a938:	4b0b      	ldr	r3, [pc, #44]	@ (800a968 <xTimerGenericCommand+0x98>)
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	f107 0114 	add.w	r1, r7, #20
 800a940:	2300      	movs	r3, #0
 800a942:	2200      	movs	r2, #0
 800a944:	f7fe f9c8 	bl	8008cd8 <xQueueGenericSend>
 800a948:	6278      	str	r0, [r7, #36]	@ 0x24
 800a94a:	e008      	b.n	800a95e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a94c:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <xTimerGenericCommand+0x98>)
 800a94e:	6818      	ldr	r0, [r3, #0]
 800a950:	f107 0114 	add.w	r1, r7, #20
 800a954:	2300      	movs	r3, #0
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	f7fe fac0 	bl	8008edc <xQueueGenericSendFromISR>
 800a95c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a960:	4618      	mov	r0, r3
 800a962:	3728      	adds	r7, #40	@ 0x28
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20001edc 	.word	0x20001edc

0800a96c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af02      	add	r7, sp, #8
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a976:	4b23      	ldr	r3, [pc, #140]	@ (800aa04 <prvProcessExpiredTimer+0x98>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	3304      	adds	r3, #4
 800a984:	4618      	mov	r0, r3
 800a986:	f7fe f881 	bl	8008a8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a990:	f003 0304 	and.w	r3, r3, #4
 800a994:	2b00      	cmp	r3, #0
 800a996:	d023      	beq.n	800a9e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	699a      	ldr	r2, [r3, #24]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	18d1      	adds	r1, r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	6978      	ldr	r0, [r7, #20]
 800a9a6:	f000 f8d5 	bl	800ab54 <prvInsertTimerInActiveList>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d020      	beq.n	800a9f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	6978      	ldr	r0, [r7, #20]
 800a9bc:	f7ff ff88 	bl	800a8d0 <xTimerGenericCommand>
 800a9c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d114      	bne.n	800a9f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	60fb      	str	r3, [r7, #12]
}
 800a9da:	bf00      	nop
 800a9dc:	bf00      	nop
 800a9de:	e7fd      	b.n	800a9dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9e6:	f023 0301 	bic.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	6978      	ldr	r0, [r7, #20]
 800a9f8:	4798      	blx	r3
}
 800a9fa:	bf00      	nop
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20001ed4 	.word	0x20001ed4

0800aa08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa10:	f107 0308 	add.w	r3, r7, #8
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 f859 	bl	800aacc <prvGetNextExpireTime>
 800aa1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 f805 	bl	800aa30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa26:	f000 f8d7 	bl	800abd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa2a:	bf00      	nop
 800aa2c:	e7f0      	b.n	800aa10 <prvTimerTask+0x8>
	...

0800aa30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa3a:	f7ff f827 	bl	8009a8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa3e:	f107 0308 	add.w	r3, r7, #8
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 f866 	bl	800ab14 <prvSampleTimeNow>
 800aa48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d130      	bne.n	800aab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <prvProcessTimerOrBlockTask+0x3c>
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d806      	bhi.n	800aa6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa5e:	f7ff f823 	bl	8009aa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff ff81 	bl	800a96c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa6a:	e024      	b.n	800aab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d008      	beq.n	800aa84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa72:	4b13      	ldr	r3, [pc, #76]	@ (800aac0 <prvProcessTimerOrBlockTask+0x90>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <prvProcessTimerOrBlockTask+0x50>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e000      	b.n	800aa82 <prvProcessTimerOrBlockTask+0x52>
 800aa80:	2300      	movs	r3, #0
 800aa82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa84:	4b0f      	ldr	r3, [pc, #60]	@ (800aac4 <prvProcessTimerOrBlockTask+0x94>)
 800aa86:	6818      	ldr	r0, [r3, #0]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	4619      	mov	r1, r3
 800aa92:	f7fe fe03 	bl	800969c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa96:	f7ff f807 	bl	8009aa8 <xTaskResumeAll>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aaa0:	4b09      	ldr	r3, [pc, #36]	@ (800aac8 <prvProcessTimerOrBlockTask+0x98>)
 800aaa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	f3bf 8f6f 	isb	sy
}
 800aab0:	e001      	b.n	800aab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aab2:	f7fe fff9 	bl	8009aa8 <xTaskResumeAll>
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20001ed8 	.word	0x20001ed8
 800aac4:	20001edc 	.word	0x20001edc
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aad4:	4b0e      	ldr	r3, [pc, #56]	@ (800ab10 <prvGetNextExpireTime+0x44>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <prvGetNextExpireTime+0x16>
 800aade:	2201      	movs	r2, #1
 800aae0:	e000      	b.n	800aae4 <prvGetNextExpireTime+0x18>
 800aae2:	2200      	movs	r2, #0
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaf0:	4b07      	ldr	r3, [pc, #28]	@ (800ab10 <prvGetNextExpireTime+0x44>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	e001      	b.n	800ab00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab00:	68fb      	ldr	r3, [r7, #12]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	20001ed4 	.word	0x20001ed4

0800ab14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab1c:	f7ff f862 	bl	8009be4 <xTaskGetTickCount>
 800ab20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab22:	4b0b      	ldr	r3, [pc, #44]	@ (800ab50 <prvSampleTimeNow+0x3c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d205      	bcs.n	800ab38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab2c:	f000 f91e 	bl	800ad6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	e002      	b.n	800ab3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab3e:	4a04      	ldr	r2, [pc, #16]	@ (800ab50 <prvSampleTimeNow+0x3c>)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab44:	68fb      	ldr	r3, [r7, #12]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20001ee4 	.word	0x20001ee4

0800ab54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d812      	bhi.n	800aba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	1ad2      	subs	r2, r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e01b      	b.n	800abc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab8e:	4b10      	ldr	r3, [pc, #64]	@ (800abd0 <prvInsertTimerInActiveList+0x7c>)
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7fd ff3e 	bl	8008a1a <vListInsert>
 800ab9e:	e012      	b.n	800abc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d206      	bcs.n	800abb6 <prvInsertTimerInActiveList+0x62>
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d302      	bcc.n	800abb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800abb0:	2301      	movs	r3, #1
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	e007      	b.n	800abc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abb6:	4b07      	ldr	r3, [pc, #28]	@ (800abd4 <prvInsertTimerInActiveList+0x80>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4619      	mov	r1, r3
 800abc0:	4610      	mov	r0, r2
 800abc2:	f7fd ff2a 	bl	8008a1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800abc6:	697b      	ldr	r3, [r7, #20]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20001ed8 	.word	0x20001ed8
 800abd4:	20001ed4 	.word	0x20001ed4

0800abd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08c      	sub	sp, #48	@ 0x30
 800abdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abde:	e0b2      	b.n	800ad46 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f2c0 80af 	blt.w	800ad46 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	695b      	ldr	r3, [r3, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf6:	3304      	adds	r3, #4
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fd ff47 	bl	8008a8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abfe:	1d3b      	adds	r3, r7, #4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff ff87 	bl	800ab14 <prvSampleTimeNow>
 800ac06:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2b09      	cmp	r3, #9
 800ac0c:	f200 8098 	bhi.w	800ad40 <prvProcessReceivedCommands+0x168>
 800ac10:	a201      	add	r2, pc, #4	@ (adr r2, 800ac18 <prvProcessReceivedCommands+0x40>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ac41 	.word	0x0800ac41
 800ac1c:	0800ac41 	.word	0x0800ac41
 800ac20:	0800ac41 	.word	0x0800ac41
 800ac24:	0800acb7 	.word	0x0800acb7
 800ac28:	0800accb 	.word	0x0800accb
 800ac2c:	0800ad17 	.word	0x0800ad17
 800ac30:	0800ac41 	.word	0x0800ac41
 800ac34:	0800ac41 	.word	0x0800ac41
 800ac38:	0800acb7 	.word	0x0800acb7
 800ac3c:	0800accb 	.word	0x0800accb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac46:	f043 0301 	orr.w	r3, r3, #1
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	18d1      	adds	r1, r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a3a      	ldr	r2, [r7, #32]
 800ac5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac60:	f7ff ff78 	bl	800ab54 <prvInsertTimerInActiveList>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d06c      	beq.n	800ad44 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d061      	beq.n	800ad44 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	441a      	add	r2, r3
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	2100      	movs	r1, #0
 800ac90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac92:	f7ff fe1d 	bl	800a8d0 <xTimerGenericCommand>
 800ac96:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d152      	bne.n	800ad44 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	61bb      	str	r3, [r7, #24]
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	e7fd      	b.n	800acb2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acbc:	f023 0301 	bic.w	r3, r3, #1
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800acc8:	e03d      	b.n	800ad46 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acd0:	f043 0301 	orr.w	r3, r3, #1
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10b      	bne.n	800ad02 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	617b      	str	r3, [r7, #20]
}
 800acfc:	bf00      	nop
 800acfe:	bf00      	nop
 800ad00:	e7fd      	b.n	800acfe <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	18d1      	adds	r1, r2, r3
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	6a3a      	ldr	r2, [r7, #32]
 800ad0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad10:	f7ff ff20 	bl	800ab54 <prvInsertTimerInActiveList>
					break;
 800ad14:	e017      	b.n	800ad46 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad1c:	f003 0302 	and.w	r3, r3, #2
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d103      	bne.n	800ad2c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800ad24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad26:	f000 fbd9 	bl	800b4dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad2a:	e00c      	b.n	800ad46 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad32:	f023 0301 	bic.w	r3, r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ad3e:	e002      	b.n	800ad46 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800ad40:	bf00      	nop
 800ad42:	e000      	b.n	800ad46 <prvProcessReceivedCommands+0x16e>
					break;
 800ad44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad46:	4b08      	ldr	r3, [pc, #32]	@ (800ad68 <prvProcessReceivedCommands+0x190>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f107 0108 	add.w	r1, r7, #8
 800ad4e:	2200      	movs	r2, #0
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fe f95f 	bl	8009014 <xQueueReceive>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f47f af41 	bne.w	800abe0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	3728      	adds	r7, #40	@ 0x28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20001edc 	.word	0x20001edc

0800ad6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad72:	e049      	b.n	800ae08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad74:	4b2e      	ldr	r3, [pc, #184]	@ (800ae30 <prvSwitchTimerLists+0xc4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad7e:	4b2c      	ldr	r3, [pc, #176]	@ (800ae30 <prvSwitchTimerLists+0xc4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fd fe7d 	bl	8008a8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d02f      	beq.n	800ae08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4413      	add	r3, r2
 800adb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d90e      	bls.n	800add8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adc6:	4b1a      	ldr	r3, [pc, #104]	@ (800ae30 <prvSwitchTimerLists+0xc4>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3304      	adds	r3, #4
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f7fd fe22 	bl	8008a1a <vListInsert>
 800add6:	e017      	b.n	800ae08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	2300      	movs	r3, #0
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	2100      	movs	r1, #0
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff fd74 	bl	800a8d0 <xTimerGenericCommand>
 800ade8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10b      	bne.n	800ae08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	603b      	str	r3, [r7, #0]
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae08:	4b09      	ldr	r3, [pc, #36]	@ (800ae30 <prvSwitchTimerLists+0xc4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1b0      	bne.n	800ad74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae12:	4b07      	ldr	r3, [pc, #28]	@ (800ae30 <prvSwitchTimerLists+0xc4>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae18:	4b06      	ldr	r3, [pc, #24]	@ (800ae34 <prvSwitchTimerLists+0xc8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a04      	ldr	r2, [pc, #16]	@ (800ae30 <prvSwitchTimerLists+0xc4>)
 800ae1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae20:	4a04      	ldr	r2, [pc, #16]	@ (800ae34 <prvSwitchTimerLists+0xc8>)
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	6013      	str	r3, [r2, #0]
}
 800ae26:	bf00      	nop
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20001ed4 	.word	0x20001ed4
 800ae34:	20001ed8 	.word	0x20001ed8

0800ae38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae3c:	f000 f964 	bl	800b108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae40:	4b12      	ldr	r3, [pc, #72]	@ (800ae8c <prvCheckForValidListAndQueue+0x54>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11d      	bne.n	800ae84 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae48:	4811      	ldr	r0, [pc, #68]	@ (800ae90 <prvCheckForValidListAndQueue+0x58>)
 800ae4a:	f7fd fd95 	bl	8008978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae4e:	4811      	ldr	r0, [pc, #68]	@ (800ae94 <prvCheckForValidListAndQueue+0x5c>)
 800ae50:	f7fd fd92 	bl	8008978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae54:	4b10      	ldr	r3, [pc, #64]	@ (800ae98 <prvCheckForValidListAndQueue+0x60>)
 800ae56:	4a0e      	ldr	r2, [pc, #56]	@ (800ae90 <prvCheckForValidListAndQueue+0x58>)
 800ae58:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae5a:	4b10      	ldr	r3, [pc, #64]	@ (800ae9c <prvCheckForValidListAndQueue+0x64>)
 800ae5c:	4a0d      	ldr	r2, [pc, #52]	@ (800ae94 <prvCheckForValidListAndQueue+0x5c>)
 800ae5e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ae60:	2200      	movs	r2, #0
 800ae62:	210c      	movs	r1, #12
 800ae64:	200a      	movs	r0, #10
 800ae66:	f7fd fea5 	bl	8008bb4 <xQueueGenericCreate>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	4a07      	ldr	r2, [pc, #28]	@ (800ae8c <prvCheckForValidListAndQueue+0x54>)
 800ae6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae70:	4b06      	ldr	r3, [pc, #24]	@ (800ae8c <prvCheckForValidListAndQueue+0x54>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae78:	4b04      	ldr	r3, [pc, #16]	@ (800ae8c <prvCheckForValidListAndQueue+0x54>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4908      	ldr	r1, [pc, #32]	@ (800aea0 <prvCheckForValidListAndQueue+0x68>)
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fbe2 	bl	8009648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae84:	f000 f972 	bl	800b16c <vPortExitCritical>
}
 800ae88:	bf00      	nop
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	20001edc 	.word	0x20001edc
 800ae90:	20001eac 	.word	0x20001eac
 800ae94:	20001ec0 	.word	0x20001ec0
 800ae98:	20001ed4 	.word	0x20001ed4
 800ae9c:	20001ed8 	.word	0x20001ed8
 800aea0:	0800f384 	.word	0x0800f384

0800aea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3b04      	subs	r3, #4
 800aeb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3b04      	subs	r3, #4
 800aec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f023 0201 	bic.w	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3b04      	subs	r3, #4
 800aed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aed4:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <pxPortInitialiseStack+0x64>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	3b14      	subs	r3, #20
 800aede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3b04      	subs	r3, #4
 800aeea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f06f 0202 	mvn.w	r2, #2
 800aef2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3b20      	subs	r3, #32
 800aef8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aefa:	68fb      	ldr	r3, [r7, #12]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	0800af0d 	.word	0x0800af0d

0800af0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af16:	4b13      	ldr	r3, [pc, #76]	@ (800af64 <prvTaskExitError+0x58>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1e:	d00b      	beq.n	800af38 <prvTaskExitError+0x2c>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60fb      	str	r3, [r7, #12]
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	e7fd      	b.n	800af34 <prvTaskExitError+0x28>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60bb      	str	r3, [r7, #8]
}
 800af4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af4c:	bf00      	nop
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0fc      	beq.n	800af4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000060 	.word	0x20000060
	...

0800af70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af70:	4b07      	ldr	r3, [pc, #28]	@ (800af90 <pxCurrentTCBConst2>)
 800af72:	6819      	ldr	r1, [r3, #0]
 800af74:	6808      	ldr	r0, [r1, #0]
 800af76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7a:	f380 8809 	msr	PSP, r0
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8811 	msr	BASEPRI, r0
 800af8a:	4770      	bx	lr
 800af8c:	f3af 8000 	nop.w

0800af90 <pxCurrentTCBConst2>:
 800af90:	20001da8 	.word	0x20001da8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop

0800af98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af98:	4808      	ldr	r0, [pc, #32]	@ (800afbc <prvPortStartFirstTask+0x24>)
 800af9a:	6800      	ldr	r0, [r0, #0]
 800af9c:	6800      	ldr	r0, [r0, #0]
 800af9e:	f380 8808 	msr	MSP, r0
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8814 	msr	CONTROL, r0
 800afaa:	b662      	cpsie	i
 800afac:	b661      	cpsie	f
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	df00      	svc	0
 800afb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afba:	bf00      	nop
 800afbc:	e000ed08 	.word	0xe000ed08

0800afc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afc6:	4b47      	ldr	r3, [pc, #284]	@ (800b0e4 <xPortStartScheduler+0x124>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a47      	ldr	r2, [pc, #284]	@ (800b0e8 <xPortStartScheduler+0x128>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d10b      	bne.n	800afe8 <xPortStartScheduler+0x28>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	613b      	str	r3, [r7, #16]
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afe8:	4b3e      	ldr	r3, [pc, #248]	@ (800b0e4 <xPortStartScheduler+0x124>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a3f      	ldr	r2, [pc, #252]	@ (800b0ec <xPortStartScheduler+0x12c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d10b      	bne.n	800b00a <xPortStartScheduler+0x4a>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	60fb      	str	r3, [r7, #12]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b00a:	4b39      	ldr	r3, [pc, #228]	@ (800b0f0 <xPortStartScheduler+0x130>)
 800b00c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	22ff      	movs	r2, #255	@ 0xff
 800b01a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b2db      	uxtb	r3, r3
 800b022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	4b31      	ldr	r3, [pc, #196]	@ (800b0f4 <xPortStartScheduler+0x134>)
 800b030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b032:	4b31      	ldr	r3, [pc, #196]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b034:	2207      	movs	r2, #7
 800b036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b038:	e009      	b.n	800b04e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b03a:	4b2f      	ldr	r3, [pc, #188]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3b01      	subs	r3, #1
 800b040:	4a2d      	ldr	r2, [pc, #180]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	b2db      	uxtb	r3, r3
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b04e:	78fb      	ldrb	r3, [r7, #3]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b056:	2b80      	cmp	r3, #128	@ 0x80
 800b058:	d0ef      	beq.n	800b03a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b05a:	4b27      	ldr	r3, [pc, #156]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f1c3 0307 	rsb	r3, r3, #7
 800b062:	2b04      	cmp	r3, #4
 800b064:	d00b      	beq.n	800b07e <xPortStartScheduler+0xbe>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60bb      	str	r3, [r7, #8]
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	e7fd      	b.n	800b07a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b07e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	021b      	lsls	r3, r3, #8
 800b084:	4a1c      	ldr	r2, [pc, #112]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b088:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b090:	4a19      	ldr	r2, [pc, #100]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	b2da      	uxtb	r2, r3
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b09c:	4b17      	ldr	r3, [pc, #92]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a16      	ldr	r2, [pc, #88]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b0a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b0a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0a8:	4b14      	ldr	r3, [pc, #80]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a13      	ldr	r2, [pc, #76]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b0ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b0b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0b4:	f000 f8da 	bl	800b26c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0b8:	4b11      	ldr	r3, [pc, #68]	@ (800b100 <xPortStartScheduler+0x140>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0be:	f000 f8f9 	bl	800b2b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0c2:	4b10      	ldr	r3, [pc, #64]	@ (800b104 <xPortStartScheduler+0x144>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b104 <xPortStartScheduler+0x144>)
 800b0c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b0cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0ce:	f7ff ff63 	bl	800af98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0d2:	f7fe fe51 	bl	8009d78 <vTaskSwitchContext>
	prvTaskExitError();
 800b0d6:	f7ff ff19 	bl	800af0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	e000ed00 	.word	0xe000ed00
 800b0e8:	410fc271 	.word	0x410fc271
 800b0ec:	410fc270 	.word	0x410fc270
 800b0f0:	e000e400 	.word	0xe000e400
 800b0f4:	20001ee8 	.word	0x20001ee8
 800b0f8:	20001eec 	.word	0x20001eec
 800b0fc:	e000ed20 	.word	0xe000ed20
 800b100:	20000060 	.word	0x20000060
 800b104:	e000ef34 	.word	0xe000ef34

0800b108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	607b      	str	r3, [r7, #4]
}
 800b120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b122:	4b10      	ldr	r3, [pc, #64]	@ (800b164 <vPortEnterCritical+0x5c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3301      	adds	r3, #1
 800b128:	4a0e      	ldr	r2, [pc, #56]	@ (800b164 <vPortEnterCritical+0x5c>)
 800b12a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b12c:	4b0d      	ldr	r3, [pc, #52]	@ (800b164 <vPortEnterCritical+0x5c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d110      	bne.n	800b156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b134:	4b0c      	ldr	r3, [pc, #48]	@ (800b168 <vPortEnterCritical+0x60>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00b      	beq.n	800b156 <vPortEnterCritical+0x4e>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	603b      	str	r3, [r7, #0]
}
 800b150:	bf00      	nop
 800b152:	bf00      	nop
 800b154:	e7fd      	b.n	800b152 <vPortEnterCritical+0x4a>
	}
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20000060 	.word	0x20000060
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b172:	4b12      	ldr	r3, [pc, #72]	@ (800b1bc <vPortExitCritical+0x50>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10b      	bne.n	800b192 <vPortExitCritical+0x26>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	607b      	str	r3, [r7, #4]
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	e7fd      	b.n	800b18e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b192:	4b0a      	ldr	r3, [pc, #40]	@ (800b1bc <vPortExitCritical+0x50>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3b01      	subs	r3, #1
 800b198:	4a08      	ldr	r2, [pc, #32]	@ (800b1bc <vPortExitCritical+0x50>)
 800b19a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b19c:	4b07      	ldr	r3, [pc, #28]	@ (800b1bc <vPortExitCritical+0x50>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d105      	bne.n	800b1b0 <vPortExitCritical+0x44>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	f383 8811 	msr	BASEPRI, r3
}
 800b1ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	20000060 	.word	0x20000060

0800b1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1c0:	f3ef 8009 	mrs	r0, PSP
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	4b15      	ldr	r3, [pc, #84]	@ (800b220 <pxCurrentTCBConst>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	f01e 0f10 	tst.w	lr, #16
 800b1d0:	bf08      	it	eq
 800b1d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1da:	6010      	str	r0, [r2, #0]
 800b1dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b1e4:	f380 8811 	msr	BASEPRI, r0
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f7fe fdc2 	bl	8009d78 <vTaskSwitchContext>
 800b1f4:	f04f 0000 	mov.w	r0, #0
 800b1f8:	f380 8811 	msr	BASEPRI, r0
 800b1fc:	bc09      	pop	{r0, r3}
 800b1fe:	6819      	ldr	r1, [r3, #0]
 800b200:	6808      	ldr	r0, [r1, #0]
 800b202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b206:	f01e 0f10 	tst.w	lr, #16
 800b20a:	bf08      	it	eq
 800b20c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b210:	f380 8809 	msr	PSP, r0
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	f3af 8000 	nop.w

0800b220 <pxCurrentTCBConst>:
 800b220:	20001da8 	.word	0x20001da8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop

0800b228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	607b      	str	r3, [r7, #4]
}
 800b240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b242:	f7fe fcdf 	bl	8009c04 <xTaskIncrementTick>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b24c:	4b06      	ldr	r3, [pc, #24]	@ (800b268 <SysTick_Handler+0x40>)
 800b24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	2300      	movs	r3, #0
 800b256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	f383 8811 	msr	BASEPRI, r3
}
 800b25e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	e000ed04 	.word	0xe000ed04

0800b26c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b270:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a0 <vPortSetupTimerInterrupt+0x34>)
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b276:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a4 <vPortSetupTimerInterrupt+0x38>)
 800b278:	2200      	movs	r2, #0
 800b27a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b27c:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a8 <vPortSetupTimerInterrupt+0x3c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a0a      	ldr	r2, [pc, #40]	@ (800b2ac <vPortSetupTimerInterrupt+0x40>)
 800b282:	fba2 2303 	umull	r2, r3, r2, r3
 800b286:	099b      	lsrs	r3, r3, #6
 800b288:	4a09      	ldr	r2, [pc, #36]	@ (800b2b0 <vPortSetupTimerInterrupt+0x44>)
 800b28a:	3b01      	subs	r3, #1
 800b28c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b28e:	4b04      	ldr	r3, [pc, #16]	@ (800b2a0 <vPortSetupTimerInterrupt+0x34>)
 800b290:	2207      	movs	r2, #7
 800b292:	601a      	str	r2, [r3, #0]
}
 800b294:	bf00      	nop
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	e000e010 	.word	0xe000e010
 800b2a4:	e000e018 	.word	0xe000e018
 800b2a8:	20000038 	.word	0x20000038
 800b2ac:	10624dd3 	.word	0x10624dd3
 800b2b0:	e000e014 	.word	0xe000e014

0800b2b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b2c4 <vPortEnableVFP+0x10>
 800b2b8:	6801      	ldr	r1, [r0, #0]
 800b2ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b2be:	6001      	str	r1, [r0, #0]
 800b2c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2c2:	bf00      	nop
 800b2c4:	e000ed88 	.word	0xe000ed88

0800b2c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ce:	f3ef 8305 	mrs	r3, IPSR
 800b2d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b0f      	cmp	r3, #15
 800b2d8:	d915      	bls.n	800b306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2da:	4a18      	ldr	r2, [pc, #96]	@ (800b33c <vPortValidateInterruptPriority+0x74>)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4413      	add	r3, r2
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2e4:	4b16      	ldr	r3, [pc, #88]	@ (800b340 <vPortValidateInterruptPriority+0x78>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	7afa      	ldrb	r2, [r7, #11]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d20b      	bcs.n	800b306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	607b      	str	r3, [r7, #4]
}
 800b300:	bf00      	nop
 800b302:	bf00      	nop
 800b304:	e7fd      	b.n	800b302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b306:	4b0f      	ldr	r3, [pc, #60]	@ (800b344 <vPortValidateInterruptPriority+0x7c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b30e:	4b0e      	ldr	r3, [pc, #56]	@ (800b348 <vPortValidateInterruptPriority+0x80>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d90b      	bls.n	800b32e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	603b      	str	r3, [r7, #0]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <vPortValidateInterruptPriority+0x62>
	}
 800b32e:	bf00      	nop
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	e000e3f0 	.word	0xe000e3f0
 800b340:	20001ee8 	.word	0x20001ee8
 800b344:	e000ed0c 	.word	0xe000ed0c
 800b348:	20001eec 	.word	0x20001eec

0800b34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08a      	sub	sp, #40	@ 0x28
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b358:	f7fe fb98 	bl	8009a8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b35c:	4b5a      	ldr	r3, [pc, #360]	@ (800b4c8 <pvPortMalloc+0x17c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b364:	f000 f916 	bl	800b594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b368:	4b58      	ldr	r3, [pc, #352]	@ (800b4cc <pvPortMalloc+0x180>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4013      	ands	r3, r2
 800b370:	2b00      	cmp	r3, #0
 800b372:	f040 8090 	bne.w	800b496 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01e      	beq.n	800b3ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b37c:	2208      	movs	r2, #8
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4413      	add	r3, r2
 800b382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d015      	beq.n	800b3ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f023 0307 	bic.w	r3, r3, #7
 800b394:	3308      	adds	r3, #8
 800b396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00b      	beq.n	800b3ba <pvPortMalloc+0x6e>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	617b      	str	r3, [r7, #20]
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	e7fd      	b.n	800b3b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d06a      	beq.n	800b496 <pvPortMalloc+0x14a>
 800b3c0:	4b43      	ldr	r3, [pc, #268]	@ (800b4d0 <pvPortMalloc+0x184>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d865      	bhi.n	800b496 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3ca:	4b42      	ldr	r3, [pc, #264]	@ (800b4d4 <pvPortMalloc+0x188>)
 800b3cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3ce:	4b41      	ldr	r3, [pc, #260]	@ (800b4d4 <pvPortMalloc+0x188>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3d4:	e004      	b.n	800b3e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d903      	bls.n	800b3f2 <pvPortMalloc+0xa6>
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1f1      	bne.n	800b3d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3f2:	4b35      	ldr	r3, [pc, #212]	@ (800b4c8 <pvPortMalloc+0x17c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d04c      	beq.n	800b496 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2208      	movs	r2, #8
 800b402:	4413      	add	r3, r2
 800b404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	1ad2      	subs	r2, r2, r3
 800b416:	2308      	movs	r3, #8
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d920      	bls.n	800b460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b41e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4413      	add	r3, r2
 800b424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	f003 0307 	and.w	r3, r3, #7
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <pvPortMalloc+0xfc>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	613b      	str	r3, [r7, #16]
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	1ad2      	subs	r2, r2, r3
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b45a:	69b8      	ldr	r0, [r7, #24]
 800b45c:	f000 f8fc 	bl	800b658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b460:	4b1b      	ldr	r3, [pc, #108]	@ (800b4d0 <pvPortMalloc+0x184>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	4a19      	ldr	r2, [pc, #100]	@ (800b4d0 <pvPortMalloc+0x184>)
 800b46c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b46e:	4b18      	ldr	r3, [pc, #96]	@ (800b4d0 <pvPortMalloc+0x184>)
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	4b19      	ldr	r3, [pc, #100]	@ (800b4d8 <pvPortMalloc+0x18c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d203      	bcs.n	800b482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b47a:	4b15      	ldr	r3, [pc, #84]	@ (800b4d0 <pvPortMalloc+0x184>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a16      	ldr	r2, [pc, #88]	@ (800b4d8 <pvPortMalloc+0x18c>)
 800b480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	685a      	ldr	r2, [r3, #4]
 800b486:	4b11      	ldr	r3, [pc, #68]	@ (800b4cc <pvPortMalloc+0x180>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	431a      	orrs	r2, r3
 800b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b496:	f7fe fb07 	bl	8009aa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	f003 0307 	and.w	r3, r3, #7
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00b      	beq.n	800b4bc <pvPortMalloc+0x170>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	60fb      	str	r3, [r7, #12]
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	e7fd      	b.n	800b4b8 <pvPortMalloc+0x16c>
	return pvReturn;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3728      	adds	r7, #40	@ 0x28
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20014af8 	.word	0x20014af8
 800b4cc:	20014b04 	.word	0x20014b04
 800b4d0:	20014afc 	.word	0x20014afc
 800b4d4:	20014af0 	.word	0x20014af0
 800b4d8:	20014b00 	.word	0x20014b00

0800b4dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d04a      	beq.n	800b584 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4ee:	2308      	movs	r3, #8
 800b4f0:	425b      	negs	r3, r3
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	4b22      	ldr	r3, [pc, #136]	@ (800b58c <vPortFree+0xb0>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4013      	ands	r3, r2
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10b      	bne.n	800b522 <vPortFree+0x46>
	__asm volatile
 800b50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b50e:	f383 8811 	msr	BASEPRI, r3
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	f3bf 8f4f 	dsb	sy
 800b51a:	60fb      	str	r3, [r7, #12]
}
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	e7fd      	b.n	800b51e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00b      	beq.n	800b542 <vPortFree+0x66>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	60bb      	str	r3, [r7, #8]
}
 800b53c:	bf00      	nop
 800b53e:	bf00      	nop
 800b540:	e7fd      	b.n	800b53e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	4b11      	ldr	r3, [pc, #68]	@ (800b58c <vPortFree+0xb0>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4013      	ands	r3, r2
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d019      	beq.n	800b584 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d115      	bne.n	800b584 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	4b0b      	ldr	r3, [pc, #44]	@ (800b58c <vPortFree+0xb0>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	43db      	mvns	r3, r3
 800b562:	401a      	ands	r2, r3
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b568:	f7fe fa90 	bl	8009a8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	4b07      	ldr	r3, [pc, #28]	@ (800b590 <vPortFree+0xb4>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4413      	add	r3, r2
 800b576:	4a06      	ldr	r2, [pc, #24]	@ (800b590 <vPortFree+0xb4>)
 800b578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b57a:	6938      	ldr	r0, [r7, #16]
 800b57c:	f000 f86c 	bl	800b658 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b580:	f7fe fa92 	bl	8009aa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b584:	bf00      	nop
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	20014b04 	.word	0x20014b04
 800b590:	20014afc 	.word	0x20014afc

0800b594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b59a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800b59e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5a0:	4b27      	ldr	r3, [pc, #156]	@ (800b640 <prvHeapInit+0xac>)
 800b5a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00c      	beq.n	800b5c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3307      	adds	r3, #7
 800b5b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	4a1f      	ldr	r2, [pc, #124]	@ (800b640 <prvHeapInit+0xac>)
 800b5c4:	4413      	add	r3, r2
 800b5c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b644 <prvHeapInit+0xb0>)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	@ (800b644 <prvHeapInit+0xb0>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	4413      	add	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f023 0307 	bic.w	r3, r3, #7
 800b5ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4a15      	ldr	r2, [pc, #84]	@ (800b648 <prvHeapInit+0xb4>)
 800b5f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5f6:	4b14      	ldr	r3, [pc, #80]	@ (800b648 <prvHeapInit+0xb4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5fe:	4b12      	ldr	r3, [pc, #72]	@ (800b648 <prvHeapInit+0xb4>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	1ad2      	subs	r2, r2, r3
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b614:	4b0c      	ldr	r3, [pc, #48]	@ (800b648 <prvHeapInit+0xb4>)
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	4a0a      	ldr	r2, [pc, #40]	@ (800b64c <prvHeapInit+0xb8>)
 800b622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	4a09      	ldr	r2, [pc, #36]	@ (800b650 <prvHeapInit+0xbc>)
 800b62a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b62c:	4b09      	ldr	r3, [pc, #36]	@ (800b654 <prvHeapInit+0xc0>)
 800b62e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b632:	601a      	str	r2, [r3, #0]
}
 800b634:	bf00      	nop
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	20001ef0 	.word	0x20001ef0
 800b644:	20014af0 	.word	0x20014af0
 800b648:	20014af8 	.word	0x20014af8
 800b64c:	20014b00 	.word	0x20014b00
 800b650:	20014afc 	.word	0x20014afc
 800b654:	20014b04 	.word	0x20014b04

0800b658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b660:	4b28      	ldr	r3, [pc, #160]	@ (800b704 <prvInsertBlockIntoFreeList+0xac>)
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	e002      	b.n	800b66c <prvInsertBlockIntoFreeList+0x14>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	429a      	cmp	r2, r3
 800b674:	d8f7      	bhi.n	800b666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	4413      	add	r3, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d108      	bne.n	800b69a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	441a      	add	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	441a      	add	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d118      	bne.n	800b6e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4b15      	ldr	r3, [pc, #84]	@ (800b708 <prvInsertBlockIntoFreeList+0xb0>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d00d      	beq.n	800b6d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	441a      	add	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e008      	b.n	800b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b708 <prvInsertBlockIntoFreeList+0xb0>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	e003      	b.n	800b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d002      	beq.n	800b6f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20014af0 	.word	0x20014af0
 800b708:	20014af8 	.word	0x20014af8

0800b70c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	4a08      	ldr	r2, [pc, #32]	@ (800b73c <disk_status+0x30>)
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4413      	add	r3, r2
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	79fa      	ldrb	r2, [r7, #7]
 800b724:	4905      	ldr	r1, [pc, #20]	@ (800b73c <disk_status+0x30>)
 800b726:	440a      	add	r2, r1
 800b728:	7a12      	ldrb	r2, [r2, #8]
 800b72a:	4610      	mov	r0, r2
 800b72c:	4798      	blx	r3
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b732:	7bfb      	ldrb	r3, [r7, #15]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	20014b30 	.word	0x20014b30

0800b740 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b74e:	79fb      	ldrb	r3, [r7, #7]
 800b750:	4a0e      	ldr	r2, [pc, #56]	@ (800b78c <disk_initialize+0x4c>)
 800b752:	5cd3      	ldrb	r3, [r2, r3]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d114      	bne.n	800b782 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	4a0c      	ldr	r2, [pc, #48]	@ (800b78c <disk_initialize+0x4c>)
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	79fa      	ldrb	r2, [r7, #7]
 800b766:	4909      	ldr	r1, [pc, #36]	@ (800b78c <disk_initialize+0x4c>)
 800b768:	440a      	add	r2, r1
 800b76a:	7a12      	ldrb	r2, [r2, #8]
 800b76c:	4610      	mov	r0, r2
 800b76e:	4798      	blx	r3
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d103      	bne.n	800b782 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b77a:	79fb      	ldrb	r3, [r7, #7]
 800b77c:	4a03      	ldr	r2, [pc, #12]	@ (800b78c <disk_initialize+0x4c>)
 800b77e:	2101      	movs	r1, #1
 800b780:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b782:	7bfb      	ldrb	r3, [r7, #15]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20014b30 	.word	0x20014b30

0800b790 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	607a      	str	r2, [r7, #4]
 800b79a:	603b      	str	r3, [r7, #0]
 800b79c:	4603      	mov	r3, r0
 800b79e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	4a0a      	ldr	r2, [pc, #40]	@ (800b7cc <disk_read+0x3c>)
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	689c      	ldr	r4, [r3, #8]
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	4a07      	ldr	r2, [pc, #28]	@ (800b7cc <disk_read+0x3c>)
 800b7b0:	4413      	add	r3, r2
 800b7b2:	7a18      	ldrb	r0, [r3, #8]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	68b9      	ldr	r1, [r7, #8]
 800b7ba:	47a0      	blx	r4
 800b7bc:	4603      	mov	r3, r0
 800b7be:	75fb      	strb	r3, [r7, #23]
  return res;
 800b7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	371c      	adds	r7, #28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd90      	pop	{r4, r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20014b30 	.word	0x20014b30

0800b7d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	607a      	str	r2, [r7, #4]
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	4603      	mov	r3, r0
 800b7de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b80c <disk_write+0x3c>)
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	68dc      	ldr	r4, [r3, #12]
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
 800b7ee:	4a07      	ldr	r2, [pc, #28]	@ (800b80c <disk_write+0x3c>)
 800b7f0:	4413      	add	r3, r2
 800b7f2:	7a18      	ldrb	r0, [r3, #8]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	68b9      	ldr	r1, [r7, #8]
 800b7fa:	47a0      	blx	r4
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800b800:	7dfb      	ldrb	r3, [r7, #23]
}
 800b802:	4618      	mov	r0, r3
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	bd90      	pop	{r4, r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20014b30 	.word	0x20014b30

0800b810 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	603a      	str	r2, [r7, #0]
 800b81a:	71fb      	strb	r3, [r7, #7]
 800b81c:	460b      	mov	r3, r1
 800b81e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b820:	79fb      	ldrb	r3, [r7, #7]
 800b822:	4a09      	ldr	r2, [pc, #36]	@ (800b848 <disk_ioctl+0x38>)
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	79fa      	ldrb	r2, [r7, #7]
 800b82e:	4906      	ldr	r1, [pc, #24]	@ (800b848 <disk_ioctl+0x38>)
 800b830:	440a      	add	r2, r1
 800b832:	7a10      	ldrb	r0, [r2, #8]
 800b834:	79b9      	ldrb	r1, [r7, #6]
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	4798      	blx	r3
 800b83a:	4603      	mov	r3, r0
 800b83c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20014b30 	.word	0x20014b30

0800b84c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3301      	adds	r3, #1
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b85c:	89fb      	ldrh	r3, [r7, #14]
 800b85e:	021b      	lsls	r3, r3, #8
 800b860:	b21a      	sxth	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b21b      	sxth	r3, r3
 800b868:	4313      	orrs	r3, r2
 800b86a:	b21b      	sxth	r3, r3
 800b86c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b86e:	89fb      	ldrh	r3, [r7, #14]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3303      	adds	r3, #3
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	021b      	lsls	r3, r3, #8
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	3202      	adds	r2, #2
 800b894:	7812      	ldrb	r2, [r2, #0]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	021b      	lsls	r3, r3, #8
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	3201      	adds	r2, #1
 800b8a2:	7812      	ldrb	r2, [r2, #0]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	021b      	lsls	r3, r3, #8
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	7812      	ldrb	r2, [r2, #0]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	1c5a      	adds	r2, r3, #1
 800b8d2:	607a      	str	r2, [r7, #4]
 800b8d4:	887a      	ldrh	r2, [r7, #2]
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
 800b8da:	887b      	ldrh	r3, [r7, #2]
 800b8dc:	0a1b      	lsrs	r3, r3, #8
 800b8de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	887a      	ldrh	r2, [r7, #2]
 800b8e8:	b2d2      	uxtb	r2, r2
 800b8ea:	701a      	strb	r2, [r3, #0]
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	b2d2      	uxtb	r2, r2
 800b90c:	701a      	strb	r2, [r3, #0]
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	0a1b      	lsrs	r3, r3, #8
 800b912:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	1c5a      	adds	r2, r3, #1
 800b918:	607a      	str	r2, [r7, #4]
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	b2d2      	uxtb	r2, r2
 800b91e:	701a      	strb	r2, [r3, #0]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	0a1b      	lsrs	r3, r3, #8
 800b924:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	b2d2      	uxtb	r2, r2
 800b930:	701a      	strb	r2, [r3, #0]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	0a1b      	lsrs	r3, r3, #8
 800b936:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	1c5a      	adds	r2, r3, #1
 800b93c:	607a      	str	r2, [r7, #4]
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	b2d2      	uxtb	r2, r2
 800b942:	701a      	strb	r2, [r3, #0]
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00d      	beq.n	800b986 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	1c53      	adds	r3, r2, #1
 800b96e:	613b      	str	r3, [r7, #16]
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	1c59      	adds	r1, r3, #1
 800b974:	6179      	str	r1, [r7, #20]
 800b976:	7812      	ldrb	r2, [r2, #0]
 800b978:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	607b      	str	r3, [r7, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1f1      	bne.n	800b96a <mem_cpy+0x1a>
	}
}
 800b986:	bf00      	nop
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b992:	b480      	push	{r7}
 800b994:	b087      	sub	sp, #28
 800b996:	af00      	add	r7, sp, #0
 800b998:	60f8      	str	r0, [r7, #12]
 800b99a:	60b9      	str	r1, [r7, #8]
 800b99c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	1c5a      	adds	r2, r3, #1
 800b9a6:	617a      	str	r2, [r7, #20]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	b2d2      	uxtb	r2, r2
 800b9ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	607b      	str	r3, [r7, #4]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1f3      	bne.n	800b9a2 <mem_set+0x10>
}
 800b9ba:	bf00      	nop
 800b9bc:	bf00      	nop
 800b9be:	371c      	adds	r7, #28
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b9c8:	b480      	push	{r7}
 800b9ca:	b089      	sub	sp, #36	@ 0x24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	61fb      	str	r3, [r7, #28]
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	61fa      	str	r2, [r7, #28]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	1c5a      	adds	r2, r3, #1
 800b9ee:	61ba      	str	r2, [r7, #24]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	1acb      	subs	r3, r1, r3
 800b9f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	607b      	str	r3, [r7, #4]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <mem_cmp+0x40>
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d0eb      	beq.n	800b9e0 <mem_cmp+0x18>

	return r;
 800ba08:	697b      	ldr	r3, [r7, #20]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3724      	adds	r7, #36	@ 0x24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ba16:	b480      	push	{r7}
 800ba18:	b083      	sub	sp, #12
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ba20:	e002      	b.n	800ba28 <chk_chr+0x12>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3301      	adds	r3, #1
 800ba26:	607b      	str	r3, [r7, #4]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d005      	beq.n	800ba3c <chk_chr+0x26>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	461a      	mov	r2, r3
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d1f2      	bne.n	800ba22 <chk_chr+0xc>
	return *str;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba56:	2300      	movs	r3, #0
 800ba58:	60bb      	str	r3, [r7, #8]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	e029      	b.n	800bab4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ba60:	4a27      	ldr	r2, [pc, #156]	@ (800bb00 <chk_lock+0xb4>)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	4413      	add	r3, r2
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d01d      	beq.n	800baaa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ba6e:	4a24      	ldr	r2, [pc, #144]	@ (800bb00 <chk_lock+0xb4>)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	4413      	add	r3, r2
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d116      	bne.n	800baae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ba80:	4a1f      	ldr	r2, [pc, #124]	@ (800bb00 <chk_lock+0xb4>)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	011b      	lsls	r3, r3, #4
 800ba86:	4413      	add	r3, r2
 800ba88:	3304      	adds	r3, #4
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d10c      	bne.n	800baae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ba94:	4a1a      	ldr	r2, [pc, #104]	@ (800bb00 <chk_lock+0xb4>)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	011b      	lsls	r3, r3, #4
 800ba9a:	4413      	add	r3, r2
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d102      	bne.n	800baae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800baa8:	e007      	b.n	800baba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800baaa:	2301      	movs	r3, #1
 800baac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3301      	adds	r3, #1
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d9d2      	bls.n	800ba60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2b02      	cmp	r3, #2
 800babe:	d109      	bne.n	800bad4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d102      	bne.n	800bacc <chk_lock+0x80>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d101      	bne.n	800bad0 <chk_lock+0x84>
 800bacc:	2300      	movs	r3, #0
 800bace:	e010      	b.n	800baf2 <chk_lock+0xa6>
 800bad0:	2312      	movs	r3, #18
 800bad2:	e00e      	b.n	800baf2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d108      	bne.n	800baec <chk_lock+0xa0>
 800bada:	4a09      	ldr	r2, [pc, #36]	@ (800bb00 <chk_lock+0xb4>)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	011b      	lsls	r3, r3, #4
 800bae0:	4413      	add	r3, r2
 800bae2:	330c      	adds	r3, #12
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baea:	d101      	bne.n	800baf0 <chk_lock+0xa4>
 800baec:	2310      	movs	r3, #16
 800baee:	e000      	b.n	800baf2 <chk_lock+0xa6>
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	20014b10 	.word	0x20014b10

0800bb04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	607b      	str	r3, [r7, #4]
 800bb0e:	e002      	b.n	800bb16 <enq_lock+0x12>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3301      	adds	r3, #1
 800bb14:	607b      	str	r3, [r7, #4]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d806      	bhi.n	800bb2a <enq_lock+0x26>
 800bb1c:	4a09      	ldr	r2, [pc, #36]	@ (800bb44 <enq_lock+0x40>)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	011b      	lsls	r3, r3, #4
 800bb22:	4413      	add	r3, r2
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1f2      	bne.n	800bb10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	bf14      	ite	ne
 800bb30:	2301      	movne	r3, #1
 800bb32:	2300      	moveq	r3, #0
 800bb34:	b2db      	uxtb	r3, r3
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	20014b10 	.word	0x20014b10

0800bb48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]
 800bb56:	e01f      	b.n	800bb98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bb58:	4a41      	ldr	r2, [pc, #260]	@ (800bc60 <inc_lock+0x118>)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	4413      	add	r3, r2
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d113      	bne.n	800bb92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bb6a:	4a3d      	ldr	r2, [pc, #244]	@ (800bc60 <inc_lock+0x118>)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	011b      	lsls	r3, r3, #4
 800bb70:	4413      	add	r3, r2
 800bb72:	3304      	adds	r3, #4
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d109      	bne.n	800bb92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bb7e:	4a38      	ldr	r2, [pc, #224]	@ (800bc60 <inc_lock+0x118>)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	4413      	add	r3, r2
 800bb86:	3308      	adds	r3, #8
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d006      	beq.n	800bba0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3301      	adds	r3, #1
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d9dc      	bls.n	800bb58 <inc_lock+0x10>
 800bb9e:	e000      	b.n	800bba2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bba0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d132      	bne.n	800bc0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	60fb      	str	r3, [r7, #12]
 800bbac:	e002      	b.n	800bbb4 <inc_lock+0x6c>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d806      	bhi.n	800bbc8 <inc_lock+0x80>
 800bbba:	4a29      	ldr	r2, [pc, #164]	@ (800bc60 <inc_lock+0x118>)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	4413      	add	r3, r2
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1f2      	bne.n	800bbae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d101      	bne.n	800bbd2 <inc_lock+0x8a>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e040      	b.n	800bc54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	4922      	ldr	r1, [pc, #136]	@ (800bc60 <inc_lock+0x118>)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	011b      	lsls	r3, r3, #4
 800bbdc:	440b      	add	r3, r1
 800bbde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	689a      	ldr	r2, [r3, #8]
 800bbe4:	491e      	ldr	r1, [pc, #120]	@ (800bc60 <inc_lock+0x118>)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	011b      	lsls	r3, r3, #4
 800bbea:	440b      	add	r3, r1
 800bbec:	3304      	adds	r3, #4
 800bbee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	695a      	ldr	r2, [r3, #20]
 800bbf4:	491a      	ldr	r1, [pc, #104]	@ (800bc60 <inc_lock+0x118>)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	011b      	lsls	r3, r3, #4
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bc00:	4a17      	ldr	r2, [pc, #92]	@ (800bc60 <inc_lock+0x118>)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	4413      	add	r3, r2
 800bc08:	330c      	adds	r3, #12
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d009      	beq.n	800bc28 <inc_lock+0xe0>
 800bc14:	4a12      	ldr	r2, [pc, #72]	@ (800bc60 <inc_lock+0x118>)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	4413      	add	r3, r2
 800bc1c:	330c      	adds	r3, #12
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <inc_lock+0xe0>
 800bc24:	2300      	movs	r3, #0
 800bc26:	e015      	b.n	800bc54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d108      	bne.n	800bc40 <inc_lock+0xf8>
 800bc2e:	4a0c      	ldr	r2, [pc, #48]	@ (800bc60 <inc_lock+0x118>)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	4413      	add	r3, r2
 800bc36:	330c      	adds	r3, #12
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	e001      	b.n	800bc44 <inc_lock+0xfc>
 800bc40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc44:	4906      	ldr	r1, [pc, #24]	@ (800bc60 <inc_lock+0x118>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	011b      	lsls	r3, r3, #4
 800bc4a:	440b      	add	r3, r1
 800bc4c:	330c      	adds	r3, #12
 800bc4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	3301      	adds	r3, #1
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	20014b10 	.word	0x20014b10

0800bc64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	607b      	str	r3, [r7, #4]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d825      	bhi.n	800bcc4 <dec_lock+0x60>
		n = Files[i].ctr;
 800bc78:	4a17      	ldr	r2, [pc, #92]	@ (800bcd8 <dec_lock+0x74>)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	011b      	lsls	r3, r3, #4
 800bc7e:	4413      	add	r3, r2
 800bc80:	330c      	adds	r3, #12
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bc86:	89fb      	ldrh	r3, [r7, #14]
 800bc88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc8c:	d101      	bne.n	800bc92 <dec_lock+0x2e>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bc92:	89fb      	ldrh	r3, [r7, #14]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <dec_lock+0x3a>
 800bc98:	89fb      	ldrh	r3, [r7, #14]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bc9e:	4a0e      	ldr	r2, [pc, #56]	@ (800bcd8 <dec_lock+0x74>)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	4413      	add	r3, r2
 800bca6:	330c      	adds	r3, #12
 800bca8:	89fa      	ldrh	r2, [r7, #14]
 800bcaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bcac:	89fb      	ldrh	r3, [r7, #14]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d105      	bne.n	800bcbe <dec_lock+0x5a>
 800bcb2:	4a09      	ldr	r2, [pc, #36]	@ (800bcd8 <dec_lock+0x74>)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	011b      	lsls	r3, r3, #4
 800bcb8:	4413      	add	r3, r2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	737b      	strb	r3, [r7, #13]
 800bcc2:	e001      	b.n	800bcc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bcc8:	7b7b      	ldrb	r3, [r7, #13]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	20014b10 	.word	0x20014b10

0800bcdc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e010      	b.n	800bd0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bcea:	4a0d      	ldr	r2, [pc, #52]	@ (800bd20 <clear_lock+0x44>)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	4413      	add	r3, r2
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d105      	bne.n	800bd06 <clear_lock+0x2a>
 800bcfa:	4a09      	ldr	r2, [pc, #36]	@ (800bd20 <clear_lock+0x44>)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	4413      	add	r3, r2
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	60fb      	str	r3, [r7, #12]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d9eb      	bls.n	800bcea <clear_lock+0xe>
	}
}
 800bd12:	bf00      	nop
 800bd14:	bf00      	nop
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20014b10 	.word	0x20014b10

0800bd24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	78db      	ldrb	r3, [r3, #3]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d034      	beq.n	800bda2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	7858      	ldrb	r0, [r3, #1]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd48:	2301      	movs	r3, #1
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	f7ff fd40 	bl	800b7d0 <disk_write>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	73fb      	strb	r3, [r7, #15]
 800bd5a:	e022      	b.n	800bda2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	1ad2      	subs	r2, r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d217      	bcs.n	800bda2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	789b      	ldrb	r3, [r3, #2]
 800bd76:	613b      	str	r3, [r7, #16]
 800bd78:	e010      	b.n	800bd9c <sync_window+0x78>
					wsect += fs->fsize;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	4413      	add	r3, r2
 800bd82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	7858      	ldrb	r0, [r3, #1]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd8e:	2301      	movs	r3, #1
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	f7ff fd1d 	bl	800b7d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	613b      	str	r3, [r7, #16]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d8eb      	bhi.n	800bd7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d01b      	beq.n	800bdfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff ffad 	bl	800bd24 <sync_window>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d113      	bne.n	800bdfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	7858      	ldrb	r0, [r3, #1]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bdde:	2301      	movs	r3, #1
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	f7ff fcd5 	bl	800b790 <disk_read>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d004      	beq.n	800bdf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bdec:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
	...

0800be08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff ff87 	bl	800bd24 <sync_window>
 800be16:	4603      	mov	r3, r0
 800be18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d158      	bne.n	800bed2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b03      	cmp	r3, #3
 800be26:	d148      	bne.n	800beba <sync_fs+0xb2>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	791b      	ldrb	r3, [r3, #4]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d144      	bne.n	800beba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3330      	adds	r3, #48	@ 0x30
 800be34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be38:	2100      	movs	r1, #0
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff fda9 	bl	800b992 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3330      	adds	r3, #48	@ 0x30
 800be44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800be48:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff fd38 	bl	800b8c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3330      	adds	r3, #48	@ 0x30
 800be56:	4921      	ldr	r1, [pc, #132]	@ (800bedc <sync_fs+0xd4>)
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff fd4d 	bl	800b8f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	3330      	adds	r3, #48	@ 0x30
 800be62:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800be66:	491e      	ldr	r1, [pc, #120]	@ (800bee0 <sync_fs+0xd8>)
 800be68:	4618      	mov	r0, r3
 800be6a:	f7ff fd45 	bl	800b8f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3330      	adds	r3, #48	@ 0x30
 800be72:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	4619      	mov	r1, r3
 800be7c:	4610      	mov	r0, r2
 800be7e:	f7ff fd3b 	bl	800b8f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	3330      	adds	r3, #48	@ 0x30
 800be86:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f7ff fd31 	bl	800b8f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	7858      	ldrb	r0, [r3, #1]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beae:	2301      	movs	r3, #1
 800beb0:	f7ff fc8e 	bl	800b7d0 <disk_write>
			fs->fsi_flag = 0;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	785b      	ldrb	r3, [r3, #1]
 800bebe:	2200      	movs	r2, #0
 800bec0:	2100      	movs	r1, #0
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff fca4 	bl	800b810 <disk_ioctl>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <sync_fs+0xca>
 800bece:	2301      	movs	r3, #1
 800bed0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	41615252 	.word	0x41615252
 800bee0:	61417272 	.word	0x61417272

0800bee4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	3b02      	subs	r3, #2
 800bef2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	3b02      	subs	r3, #2
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d301      	bcc.n	800bf04 <clust2sect+0x20>
 800bf00:	2300      	movs	r3, #0
 800bf02:	e008      	b.n	800bf16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	895b      	ldrh	r3, [r3, #10]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	fb03 f202 	mul.w	r2, r3, r2
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf14:	4413      	add	r3, r2
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d904      	bls.n	800bf42 <get_fat+0x20>
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d302      	bcc.n	800bf48 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bf42:	2301      	movs	r3, #1
 800bf44:	617b      	str	r3, [r7, #20]
 800bf46:	e08e      	b.n	800c066 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bf48:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d061      	beq.n	800c01a <get_fat+0xf8>
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	dc7b      	bgt.n	800c052 <get_fat+0x130>
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d002      	beq.n	800bf64 <get_fat+0x42>
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d041      	beq.n	800bfe6 <get_fat+0xc4>
 800bf62:	e076      	b.n	800c052 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	085b      	lsrs	r3, r3, #1
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	4413      	add	r3, r2
 800bf70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6a1a      	ldr	r2, [r3, #32]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	0a5b      	lsrs	r3, r3, #9
 800bf7a:	4413      	add	r3, r2
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6938      	ldr	r0, [r7, #16]
 800bf80:	f7ff ff14 	bl	800bdac <move_window>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d166      	bne.n	800c058 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	1c5a      	adds	r2, r3, #1
 800bf8e:	60fa      	str	r2, [r7, #12]
 800bf90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	6a1a      	ldr	r2, [r3, #32]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	0a5b      	lsrs	r3, r3, #9
 800bfa6:	4413      	add	r3, r2
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f7ff fefe 	bl	800bdac <move_window>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d152      	bne.n	800c05c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfc4:	021b      	lsls	r3, r3, #8
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <get_fat+0xba>
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	091b      	lsrs	r3, r3, #4
 800bfda:	e002      	b.n	800bfe2 <get_fat+0xc0>
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfe2:	617b      	str	r3, [r7, #20]
			break;
 800bfe4:	e03f      	b.n	800c066 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	6a1a      	ldr	r2, [r3, #32]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	0a1b      	lsrs	r3, r3, #8
 800bfee:	4413      	add	r3, r2
 800bff0:	4619      	mov	r1, r3
 800bff2:	6938      	ldr	r0, [r7, #16]
 800bff4:	f7ff feda 	bl	800bdac <move_window>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d130      	bne.n	800c060 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c00c:	4413      	add	r3, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff fc1c 	bl	800b84c <ld_word>
 800c014:	4603      	mov	r3, r0
 800c016:	617b      	str	r3, [r7, #20]
			break;
 800c018:	e025      	b.n	800c066 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	6a1a      	ldr	r2, [r3, #32]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	09db      	lsrs	r3, r3, #7
 800c022:	4413      	add	r3, r2
 800c024:	4619      	mov	r1, r3
 800c026:	6938      	ldr	r0, [r7, #16]
 800c028:	f7ff fec0 	bl	800bdac <move_window>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d118      	bne.n	800c064 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c040:	4413      	add	r3, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff fc1a 	bl	800b87c <ld_dword>
 800c048:	4603      	mov	r3, r0
 800c04a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c04e:	617b      	str	r3, [r7, #20]
			break;
 800c050:	e009      	b.n	800c066 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c052:	2301      	movs	r3, #1
 800c054:	617b      	str	r3, [r7, #20]
 800c056:	e006      	b.n	800c066 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c058:	bf00      	nop
 800c05a:	e004      	b.n	800c066 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c05c:	bf00      	nop
 800c05e:	e002      	b.n	800c066 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c060:	bf00      	nop
 800c062:	e000      	b.n	800c066 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c064:	bf00      	nop
		}
	}

	return val;
 800c066:	697b      	ldr	r3, [r7, #20]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3718      	adds	r7, #24
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c070:	b590      	push	{r4, r7, lr}
 800c072:	b089      	sub	sp, #36	@ 0x24
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c07c:	2302      	movs	r3, #2
 800c07e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b01      	cmp	r3, #1
 800c084:	f240 80d9 	bls.w	800c23a <put_fat+0x1ca>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	429a      	cmp	r2, r3
 800c090:	f080 80d3 	bcs.w	800c23a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	2b03      	cmp	r3, #3
 800c09a:	f000 8096 	beq.w	800c1ca <put_fat+0x15a>
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	f300 80cb 	bgt.w	800c23a <put_fat+0x1ca>
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d002      	beq.n	800c0ae <put_fat+0x3e>
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d06e      	beq.n	800c18a <put_fat+0x11a>
 800c0ac:	e0c5      	b.n	800c23a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	61bb      	str	r3, [r7, #24]
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	085b      	lsrs	r3, r3, #1
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6a1a      	ldr	r2, [r3, #32]
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	0a5b      	lsrs	r3, r3, #9
 800c0c4:	4413      	add	r3, r2
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f7ff fe6f 	bl	800bdac <move_window>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0d2:	7ffb      	ldrb	r3, [r7, #31]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f040 80a9 	bne.w	800c22c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	1c59      	adds	r1, r3, #1
 800c0e4:	61b9      	str	r1, [r7, #24]
 800c0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ea:	4413      	add	r3, r2
 800c0ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00d      	beq.n	800c114 <put_fat+0xa4>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	b25b      	sxtb	r3, r3
 800c0fe:	f003 030f 	and.w	r3, r3, #15
 800c102:	b25a      	sxtb	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	b2db      	uxtb	r3, r3
 800c108:	011b      	lsls	r3, r3, #4
 800c10a:	b25b      	sxtb	r3, r3
 800c10c:	4313      	orrs	r3, r2
 800c10e:	b25b      	sxtb	r3, r3
 800c110:	b2db      	uxtb	r3, r3
 800c112:	e001      	b.n	800c118 <put_fat+0xa8>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2201      	movs	r2, #1
 800c120:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6a1a      	ldr	r2, [r3, #32]
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	0a5b      	lsrs	r3, r3, #9
 800c12a:	4413      	add	r3, r2
 800c12c:	4619      	mov	r1, r3
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f7ff fe3c 	bl	800bdac <move_window>
 800c134:	4603      	mov	r3, r0
 800c136:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c138:	7ffb      	ldrb	r3, [r7, #31]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d178      	bne.n	800c230 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14a:	4413      	add	r3, r2
 800c14c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d003      	beq.n	800c160 <put_fat+0xf0>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	091b      	lsrs	r3, r3, #4
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	e00e      	b.n	800c17e <put_fat+0x10e>
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	b25b      	sxtb	r3, r3
 800c166:	f023 030f 	bic.w	r3, r3, #15
 800c16a:	b25a      	sxtb	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	0a1b      	lsrs	r3, r3, #8
 800c170:	b25b      	sxtb	r3, r3
 800c172:	f003 030f 	and.w	r3, r3, #15
 800c176:	b25b      	sxtb	r3, r3
 800c178:	4313      	orrs	r3, r2
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2201      	movs	r2, #1
 800c186:	70da      	strb	r2, [r3, #3]
			break;
 800c188:	e057      	b.n	800c23a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6a1a      	ldr	r2, [r3, #32]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	0a1b      	lsrs	r3, r3, #8
 800c192:	4413      	add	r3, r2
 800c194:	4619      	mov	r1, r3
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff fe08 	bl	800bdac <move_window>
 800c19c:	4603      	mov	r3, r0
 800c19e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1a0:	7ffb      	ldrb	r3, [r7, #31]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d146      	bne.n	800c234 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c1b4:	4413      	add	r3, r2
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	b292      	uxth	r2, r2
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff fb80 	bl	800b8c2 <st_word>
			fs->wflag = 1;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	70da      	strb	r2, [r3, #3]
			break;
 800c1c8:	e037      	b.n	800c23a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a1a      	ldr	r2, [r3, #32]
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	09db      	lsrs	r3, r3, #7
 800c1d2:	4413      	add	r3, r2
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7ff fde8 	bl	800bdac <move_window>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1e0:	7ffb      	ldrb	r3, [r7, #31]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d128      	bne.n	800c238 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c1fa:	4413      	add	r3, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff fb3d 	bl	800b87c <ld_dword>
 800c202:	4603      	mov	r3, r0
 800c204:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c208:	4323      	orrs	r3, r4
 800c20a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c21a:	4413      	add	r3, r2
 800c21c:	6879      	ldr	r1, [r7, #4]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fb6a 	bl	800b8f8 <st_dword>
			fs->wflag = 1;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2201      	movs	r2, #1
 800c228:	70da      	strb	r2, [r3, #3]
			break;
 800c22a:	e006      	b.n	800c23a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c22c:	bf00      	nop
 800c22e:	e004      	b.n	800c23a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c230:	bf00      	nop
 800c232:	e002      	b.n	800c23a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c234:	bf00      	nop
 800c236:	e000      	b.n	800c23a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c238:	bf00      	nop
		}
	}
	return res;
 800c23a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3724      	adds	r7, #36	@ 0x24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd90      	pop	{r4, r7, pc}

0800c244 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d904      	bls.n	800c26a <remove_chain+0x26>
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	429a      	cmp	r2, r3
 800c268:	d301      	bcc.n	800c26e <remove_chain+0x2a>
 800c26a:	2302      	movs	r3, #2
 800c26c:	e04b      	b.n	800c306 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00c      	beq.n	800c28e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c274:	f04f 32ff 	mov.w	r2, #4294967295
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	69b8      	ldr	r0, [r7, #24]
 800c27c:	f7ff fef8 	bl	800c070 <put_fat>
 800c280:	4603      	mov	r3, r0
 800c282:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c284:	7ffb      	ldrb	r3, [r7, #31]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <remove_chain+0x4a>
 800c28a:	7ffb      	ldrb	r3, [r7, #31]
 800c28c:	e03b      	b.n	800c306 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c28e:	68b9      	ldr	r1, [r7, #8]
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f7ff fe46 	bl	800bf22 <get_fat>
 800c296:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d031      	beq.n	800c302 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d101      	bne.n	800c2a8 <remove_chain+0x64>
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	e02e      	b.n	800c306 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d101      	bne.n	800c2b4 <remove_chain+0x70>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e028      	b.n	800c306 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	69b8      	ldr	r0, [r7, #24]
 800c2ba:	f7ff fed9 	bl	800c070 <put_fat>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c2c2:	7ffb      	ldrb	r3, [r7, #31]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <remove_chain+0x88>
 800c2c8:	7ffb      	ldrb	r3, [r7, #31]
 800c2ca:	e01c      	b.n	800c306 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	691a      	ldr	r2, [r3, #16]
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	695b      	ldr	r3, [r3, #20]
 800c2d4:	3b02      	subs	r3, #2
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d20b      	bcs.n	800c2f2 <remove_chain+0xae>
			fs->free_clst++;
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	791b      	ldrb	r3, [r3, #4]
 800c2e8:	f043 0301 	orr.w	r3, r3, #1
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d3c6      	bcc.n	800c28e <remove_chain+0x4a>
 800c300:	e000      	b.n	800c304 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c302:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3720      	adds	r7, #32
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b088      	sub	sp, #32
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10d      	bne.n	800c340 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d004      	beq.n	800c33a <create_chain+0x2c>
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	429a      	cmp	r2, r3
 800c338:	d31b      	bcc.n	800c372 <create_chain+0x64>
 800c33a:	2301      	movs	r3, #1
 800c33c:	61bb      	str	r3, [r7, #24]
 800c33e:	e018      	b.n	800c372 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff fded 	bl	800bf22 <get_fat>
 800c348:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d801      	bhi.n	800c354 <create_chain+0x46>
 800c350:	2301      	movs	r3, #1
 800c352:	e070      	b.n	800c436 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35a:	d101      	bne.n	800c360 <create_chain+0x52>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	e06a      	b.n	800c436 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	429a      	cmp	r2, r3
 800c368:	d201      	bcs.n	800c36e <create_chain+0x60>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	e063      	b.n	800c436 <create_chain+0x128>
		scl = clst;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	3301      	adds	r3, #1
 800c37a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	695b      	ldr	r3, [r3, #20]
 800c380:	69fa      	ldr	r2, [r7, #28]
 800c382:	429a      	cmp	r2, r3
 800c384:	d307      	bcc.n	800c396 <create_chain+0x88>
				ncl = 2;
 800c386:	2302      	movs	r3, #2
 800c388:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c38a:	69fa      	ldr	r2, [r7, #28]
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d901      	bls.n	800c396 <create_chain+0x88>
 800c392:	2300      	movs	r3, #0
 800c394:	e04f      	b.n	800c436 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c396:	69f9      	ldr	r1, [r7, #28]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff fdc2 	bl	800bf22 <get_fat>
 800c39e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00e      	beq.n	800c3c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d003      	beq.n	800c3b4 <create_chain+0xa6>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b2:	d101      	bne.n	800c3b8 <create_chain+0xaa>
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	e03e      	b.n	800c436 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c3b8:	69fa      	ldr	r2, [r7, #28]
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d1da      	bne.n	800c376 <create_chain+0x68>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	e038      	b.n	800c436 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c3c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ca:	69f9      	ldr	r1, [r7, #28]
 800c3cc:	6938      	ldr	r0, [r7, #16]
 800c3ce:	f7ff fe4f 	bl	800c070 <put_fat>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d109      	bne.n	800c3f0 <create_chain+0xe2>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d006      	beq.n	800c3f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6938      	ldr	r0, [r7, #16]
 800c3e8:	f7ff fe42 	bl	800c070 <put_fat>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d116      	bne.n	800c424 <create_chain+0x116>
		fs->last_clst = ncl;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	691a      	ldr	r2, [r3, #16]
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	3b02      	subs	r3, #2
 800c406:	429a      	cmp	r2, r3
 800c408:	d804      	bhi.n	800c414 <create_chain+0x106>
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	1e5a      	subs	r2, r3, #1
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	791b      	ldrb	r3, [r3, #4]
 800c418:	f043 0301 	orr.w	r3, r3, #1
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	711a      	strb	r2, [r3, #4]
 800c422:	e007      	b.n	800c434 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d102      	bne.n	800c430 <create_chain+0x122>
 800c42a:	f04f 33ff 	mov.w	r3, #4294967295
 800c42e:	e000      	b.n	800c432 <create_chain+0x124>
 800c430:	2301      	movs	r3, #1
 800c432:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c434:	69fb      	ldr	r3, [r7, #28]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3720      	adds	r7, #32
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c43e:	b480      	push	{r7}
 800c440:	b087      	sub	sp, #28
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c452:	3304      	adds	r3, #4
 800c454:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	0a5b      	lsrs	r3, r3, #9
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	8952      	ldrh	r2, [r2, #10]
 800c45e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c462:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	1d1a      	adds	r2, r3, #4
 800c468:	613a      	str	r2, [r7, #16]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <clmt_clust+0x3a>
 800c474:	2300      	movs	r3, #0
 800c476:	e010      	b.n	800c49a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d307      	bcc.n	800c490 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	617b      	str	r3, [r7, #20]
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	3304      	adds	r3, #4
 800c48c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c48e:	e7e9      	b.n	800c464 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c490:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	4413      	add	r3, r2
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	371c      	adds	r7, #28
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b086      	sub	sp, #24
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c4bc:	d204      	bcs.n	800c4c8 <dir_sdi+0x22>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	f003 031f 	and.w	r3, r3, #31
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <dir_sdi+0x26>
		return FR_INT_ERR;
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	e063      	b.n	800c594 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d106      	bne.n	800c4ec <dir_sdi+0x46>
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d902      	bls.n	800c4ec <dir_sdi+0x46>
		clst = fs->dirbase;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10c      	bne.n	800c50c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	095b      	lsrs	r3, r3, #5
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	8912      	ldrh	r2, [r2, #8]
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d301      	bcc.n	800c502 <dir_sdi+0x5c>
 800c4fe:	2302      	movs	r3, #2
 800c500:	e048      	b.n	800c594 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	61da      	str	r2, [r3, #28]
 800c50a:	e029      	b.n	800c560 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	895b      	ldrh	r3, [r3, #10]
 800c510:	025b      	lsls	r3, r3, #9
 800c512:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c514:	e019      	b.n	800c54a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6979      	ldr	r1, [r7, #20]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff fd01 	bl	800bf22 <get_fat>
 800c520:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c528:	d101      	bne.n	800c52e <dir_sdi+0x88>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e032      	b.n	800c594 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d904      	bls.n	800c53e <dir_sdi+0x98>
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	697a      	ldr	r2, [r7, #20]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d301      	bcc.n	800c542 <dir_sdi+0x9c>
 800c53e:	2302      	movs	r3, #2
 800c540:	e028      	b.n	800c594 <dir_sdi+0xee>
			ofs -= csz;
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d2e1      	bcs.n	800c516 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c552:	6979      	ldr	r1, [r7, #20]
 800c554:	6938      	ldr	r0, [r7, #16]
 800c556:	f7ff fcc5 	bl	800bee4 <clust2sect>
 800c55a:	4602      	mov	r2, r0
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	69db      	ldr	r3, [r3, #28]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <dir_sdi+0xcc>
 800c56e:	2302      	movs	r3, #2
 800c570:	e010      	b.n	800c594 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	69da      	ldr	r2, [r3, #28]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	0a5b      	lsrs	r3, r3, #9
 800c57a:	441a      	add	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c58c:	441a      	add	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	3320      	adds	r3, #32
 800c5b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	69db      	ldr	r3, [r3, #28]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <dir_next+0x28>
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5c2:	d301      	bcc.n	800c5c8 <dir_next+0x2c>
 800c5c4:	2304      	movs	r3, #4
 800c5c6:	e0aa      	b.n	800c71e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f040 8098 	bne.w	800c704 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	69db      	ldr	r3, [r3, #28]
 800c5d8:	1c5a      	adds	r2, r3, #1
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10b      	bne.n	800c5fe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	095b      	lsrs	r3, r3, #5
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	8912      	ldrh	r2, [r2, #8]
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	f0c0 8088 	bcc.w	800c704 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	61da      	str	r2, [r3, #28]
 800c5fa:	2304      	movs	r3, #4
 800c5fc:	e08f      	b.n	800c71e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	0a5b      	lsrs	r3, r3, #9
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	8952      	ldrh	r2, [r2, #10]
 800c606:	3a01      	subs	r2, #1
 800c608:	4013      	ands	r3, r2
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d17a      	bne.n	800c704 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	4619      	mov	r1, r3
 800c616:	4610      	mov	r0, r2
 800c618:	f7ff fc83 	bl	800bf22 <get_fat>
 800c61c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d801      	bhi.n	800c628 <dir_next+0x8c>
 800c624:	2302      	movs	r3, #2
 800c626:	e07a      	b.n	800c71e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62e:	d101      	bne.n	800c634 <dir_next+0x98>
 800c630:	2301      	movs	r3, #1
 800c632:	e074      	b.n	800c71e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d358      	bcc.n	800c6f0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d104      	bne.n	800c64e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	61da      	str	r2, [r3, #28]
 800c64a:	2304      	movs	r3, #4
 800c64c:	e067      	b.n	800c71e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	4619      	mov	r1, r3
 800c656:	4610      	mov	r0, r2
 800c658:	f7ff fe59 	bl	800c30e <create_chain>
 800c65c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <dir_next+0xcc>
 800c664:	2307      	movs	r3, #7
 800c666:	e05a      	b.n	800c71e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d101      	bne.n	800c672 <dir_next+0xd6>
 800c66e:	2302      	movs	r3, #2
 800c670:	e055      	b.n	800c71e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c678:	d101      	bne.n	800c67e <dir_next+0xe2>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e04f      	b.n	800c71e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f7ff fb50 	bl	800bd24 <sync_window>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <dir_next+0xf2>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e047      	b.n	800c71e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3330      	adds	r3, #48	@ 0x30
 800c692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c696:	2100      	movs	r1, #0
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff f97a 	bl	800b992 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c69e:	2300      	movs	r3, #0
 800c6a0:	613b      	str	r3, [r7, #16]
 800c6a2:	6979      	ldr	r1, [r7, #20]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff fc1d 	bl	800bee4 <clust2sect>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c6b0:	e012      	b.n	800c6d8 <dir_next+0x13c>
						fs->wflag = 1;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f7ff fb33 	bl	800bd24 <sync_window>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <dir_next+0x12c>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e02a      	b.n	800c71e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	613b      	str	r3, [r7, #16]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	895b      	ldrh	r3, [r3, #10]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d3e6      	bcc.n	800c6b2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	1ad2      	subs	r2, r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c6f6:	6979      	ldr	r1, [r7, #20]
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f7ff fbf3 	bl	800bee4 <clust2sect>
 800c6fe:	4602      	mov	r2, r0
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c716:	441a      	add	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b086      	sub	sp, #24
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c736:	2100      	movs	r1, #0
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7ff feb4 	bl	800c4a6 <dir_sdi>
 800c73e:	4603      	mov	r3, r0
 800c740:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d12b      	bne.n	800c7a0 <dir_alloc+0x7a>
		n = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	69db      	ldr	r3, [r3, #28]
 800c750:	4619      	mov	r1, r3
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f7ff fb2a 	bl	800bdac <move_window>
 800c758:	4603      	mov	r3, r0
 800c75a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d11d      	bne.n	800c79e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	2be5      	cmp	r3, #229	@ 0xe5
 800c76a:	d004      	beq.n	800c776 <dir_alloc+0x50>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a1b      	ldr	r3, [r3, #32]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d107      	bne.n	800c786 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3301      	adds	r3, #1
 800c77a:	613b      	str	r3, [r7, #16]
 800c77c:	693a      	ldr	r2, [r7, #16]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	429a      	cmp	r2, r3
 800c782:	d102      	bne.n	800c78a <dir_alloc+0x64>
 800c784:	e00c      	b.n	800c7a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c786:	2300      	movs	r3, #0
 800c788:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c78a:	2101      	movs	r1, #1
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff ff05 	bl	800c59c <dir_next>
 800c792:	4603      	mov	r3, r0
 800c794:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c796:	7dfb      	ldrb	r3, [r7, #23]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0d7      	beq.n	800c74c <dir_alloc+0x26>
 800c79c:	e000      	b.n	800c7a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c79e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	d101      	bne.n	800c7aa <dir_alloc+0x84>
 800c7a6:	2307      	movs	r3, #7
 800c7a8:	75fb      	strb	r3, [r7, #23]
	return res;
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3718      	adds	r7, #24
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	331a      	adds	r3, #26
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff f842 	bl	800b84c <ld_word>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d109      	bne.n	800c7e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	3314      	adds	r3, #20
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff f837 	bl	800b84c <ld_word>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	041b      	lsls	r3, r3, #16
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	331a      	adds	r3, #26
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	b292      	uxth	r2, r2
 800c806:	4611      	mov	r1, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff f85a 	bl	800b8c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	2b03      	cmp	r3, #3
 800c814:	d109      	bne.n	800c82a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	f103 0214 	add.w	r2, r3, #20
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	0c1b      	lsrs	r3, r3, #16
 800c820:	b29b      	uxth	r3, r3
 800c822:	4619      	mov	r1, r3
 800c824:	4610      	mov	r0, r2
 800c826:	f7ff f84c 	bl	800b8c2 <st_word>
	}
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b086      	sub	sp, #24
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c83c:	2304      	movs	r3, #4
 800c83e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800c846:	e03c      	b.n	800c8c2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	69db      	ldr	r3, [r3, #28]
 800c84c:	4619      	mov	r1, r3
 800c84e:	6938      	ldr	r0, [r7, #16]
 800c850:	f7ff faac 	bl	800bdac <move_window>
 800c854:	4603      	mov	r3, r0
 800c856:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c858:	7dfb      	ldrb	r3, [r7, #23]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d136      	bne.n	800c8cc <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800c866:	7bfb      	ldrb	r3, [r7, #15]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d102      	bne.n	800c872 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c86c:	2304      	movs	r3, #4
 800c86e:	75fb      	strb	r3, [r7, #23]
 800c870:	e031      	b.n	800c8d6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	330b      	adds	r3, #11
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c87e:	73bb      	strb	r3, [r7, #14]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	7bba      	ldrb	r2, [r7, #14]
 800c884:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800c886:	7bfb      	ldrb	r3, [r7, #15]
 800c888:	2be5      	cmp	r3, #229	@ 0xe5
 800c88a:	d011      	beq.n	800c8b0 <dir_read+0x7e>
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
 800c88e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c890:	d00e      	beq.n	800c8b0 <dir_read+0x7e>
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	2b0f      	cmp	r3, #15
 800c896:	d00b      	beq.n	800c8b0 <dir_read+0x7e>
 800c898:	7bbb      	ldrb	r3, [r7, #14]
 800c89a:	f023 0320 	bic.w	r3, r3, #32
 800c89e:	2b08      	cmp	r3, #8
 800c8a0:	bf0c      	ite	eq
 800c8a2:	2301      	moveq	r3, #1
 800c8a4:	2300      	movne	r3, #0
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d00f      	beq.n	800c8d0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7ff fe72 	bl	800c59c <dir_next>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c8bc:	7dfb      	ldrb	r3, [r7, #23]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d108      	bne.n	800c8d4 <dir_read+0xa2>
	while (dp->sect) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	69db      	ldr	r3, [r3, #28]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1be      	bne.n	800c848 <dir_read+0x16>
 800c8ca:	e004      	b.n	800c8d6 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c8cc:	bf00      	nop
 800c8ce:	e002      	b.n	800c8d6 <dir_read+0xa4>
				break;
 800c8d0:	bf00      	nop
 800c8d2:	e000      	b.n	800c8d6 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c8d4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <dir_read+0xb0>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	61da      	str	r2, [r3, #28]
	return res;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3718      	adds	r7, #24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff fdd2 	bl	800c4a6 <dir_sdi>
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <dir_find+0x24>
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	e03e      	b.n	800c98e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	69db      	ldr	r3, [r3, #28]
 800c914:	4619      	mov	r1, r3
 800c916:	6938      	ldr	r0, [r7, #16]
 800c918:	f7ff fa48 	bl	800bdac <move_window>
 800c91c:	4603      	mov	r3, r0
 800c91e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d12f      	bne.n	800c986 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <dir_find+0x4e>
 800c934:	2304      	movs	r3, #4
 800c936:	75fb      	strb	r3, [r7, #23]
 800c938:	e028      	b.n	800c98c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	330b      	adds	r3, #11
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c946:	b2da      	uxtb	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a1b      	ldr	r3, [r3, #32]
 800c950:	330b      	adds	r3, #11
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	f003 0308 	and.w	r3, r3, #8
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <dir_find+0x86>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a18      	ldr	r0, [r3, #32]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	3324      	adds	r3, #36	@ 0x24
 800c964:	220b      	movs	r2, #11
 800c966:	4619      	mov	r1, r3
 800c968:	f7ff f82e 	bl	800b9c8 <mem_cmp>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00b      	beq.n	800c98a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c972:	2100      	movs	r1, #0
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff fe11 	bl	800c59c <dir_next>
 800c97a:	4603      	mov	r3, r0
 800c97c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d0c5      	beq.n	800c910 <dir_find+0x24>
 800c984:	e002      	b.n	800c98c <dir_find+0xa0>
		if (res != FR_OK) break;
 800c986:	bf00      	nop
 800c988:	e000      	b.n	800c98c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c98a:	bf00      	nop

	return res;
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b084      	sub	sp, #16
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c9a4:	2101      	movs	r1, #1
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff febd 	bl	800c726 <dir_alloc>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d11c      	bne.n	800c9f0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	68b8      	ldr	r0, [r7, #8]
 800c9be:	f7ff f9f5 	bl	800bdac <move_window>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d111      	bne.n	800c9f0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	2220      	movs	r2, #32
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe ffdc 	bl	800b992 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a18      	ldr	r0, [r3, #32]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3324      	adds	r3, #36	@ 0x24
 800c9e2:	220b      	movs	r2, #11
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	f7fe ffb3 	bl	800b950 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b086      	sub	sp, #24
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2200      	movs	r2, #0
 800ca08:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d04f      	beq.n	800cab2 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ca1a:	e022      	b.n	800ca62 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a1a      	ldr	r2, [r3, #32]
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	1c59      	adds	r1, r3, #1
 800ca24:	6179      	str	r1, [r7, #20]
 800ca26:	4413      	add	r3, r2
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	2b20      	cmp	r3, #32
 800ca30:	d016      	beq.n	800ca60 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	2b05      	cmp	r3, #5
 800ca36:	d101      	bne.n	800ca3c <get_fileinfo+0x42>
 800ca38:	23e5      	movs	r3, #229	@ 0xe5
 800ca3a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2b09      	cmp	r3, #9
 800ca40:	d106      	bne.n	800ca50 <get_fileinfo+0x56>
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	613a      	str	r2, [r7, #16]
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	222e      	movs	r2, #46	@ 0x2e
 800ca4e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	613a      	str	r2, [r7, #16]
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	4413      	add	r3, r2
 800ca5a:	7bfa      	ldrb	r2, [r7, #15]
 800ca5c:	725a      	strb	r2, [r3, #9]
 800ca5e:	e000      	b.n	800ca62 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca60:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2b0a      	cmp	r3, #10
 800ca66:	d9d9      	bls.n	800ca1c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	3309      	adds	r3, #9
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a1b      	ldr	r3, [r3, #32]
 800ca78:	7ada      	ldrb	r2, [r3, #11]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	331c      	adds	r3, #28
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fe fef9 	bl	800b87c <ld_dword>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	3316      	adds	r3, #22
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fef0 	bl	800b87c <ld_dword>
 800ca9c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	80da      	strh	r2, [r3, #6]
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	0c1b      	lsrs	r3, r3, #16
 800caaa:	b29a      	uxth	r2, r3
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	809a      	strh	r2, [r3, #4]
 800cab0:	e000      	b.n	800cab4 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cab2:	bf00      	nop
}
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3324      	adds	r3, #36	@ 0x24
 800cad0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cad2:	220b      	movs	r2, #11
 800cad4:	2120      	movs	r1, #32
 800cad6:	68b8      	ldr	r0, [r7, #8]
 800cad8:	f7fe ff5b 	bl	800b992 <mem_set>
	si = i = 0; ni = 8;
 800cadc:	2300      	movs	r3, #0
 800cade:	613b      	str	r3, [r7, #16]
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	61fb      	str	r3, [r7, #28]
 800cae4:	2308      	movs	r3, #8
 800cae6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	1c5a      	adds	r2, r3, #1
 800caec:	61fa      	str	r2, [r7, #28]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	4413      	add	r3, r2
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800caf6:	7efb      	ldrb	r3, [r7, #27]
 800caf8:	2b20      	cmp	r3, #32
 800cafa:	d94e      	bls.n	800cb9a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cafc:	7efb      	ldrb	r3, [r7, #27]
 800cafe:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb00:	d006      	beq.n	800cb10 <create_name+0x54>
 800cb02:	7efb      	ldrb	r3, [r7, #27]
 800cb04:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb06:	d110      	bne.n	800cb2a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb08:	e002      	b.n	800cb10 <create_name+0x54>
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	61fb      	str	r3, [r7, #28]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	4413      	add	r3, r2
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb1a:	d0f6      	beq.n	800cb0a <create_name+0x4e>
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	4413      	add	r3, r2
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb26:	d0f0      	beq.n	800cb0a <create_name+0x4e>
			break;
 800cb28:	e038      	b.n	800cb9c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cb2a:	7efb      	ldrb	r3, [r7, #27]
 800cb2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb2e:	d003      	beq.n	800cb38 <create_name+0x7c>
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d30c      	bcc.n	800cb52 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2b0b      	cmp	r3, #11
 800cb3c:	d002      	beq.n	800cb44 <create_name+0x88>
 800cb3e:	7efb      	ldrb	r3, [r7, #27]
 800cb40:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb42:	d001      	beq.n	800cb48 <create_name+0x8c>
 800cb44:	2306      	movs	r3, #6
 800cb46:	e044      	b.n	800cbd2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb48:	2308      	movs	r3, #8
 800cb4a:	613b      	str	r3, [r7, #16]
 800cb4c:	230b      	movs	r3, #11
 800cb4e:	617b      	str	r3, [r7, #20]
			continue;
 800cb50:	e022      	b.n	800cb98 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	da04      	bge.n	800cb64 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cb5a:	7efb      	ldrb	r3, [r7, #27]
 800cb5c:	3b80      	subs	r3, #128	@ 0x80
 800cb5e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbdc <create_name+0x120>)
 800cb60:	5cd3      	ldrb	r3, [r2, r3]
 800cb62:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cb64:	7efb      	ldrb	r3, [r7, #27]
 800cb66:	4619      	mov	r1, r3
 800cb68:	481d      	ldr	r0, [pc, #116]	@ (800cbe0 <create_name+0x124>)
 800cb6a:	f7fe ff54 	bl	800ba16 <chk_chr>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d001      	beq.n	800cb78 <create_name+0xbc>
 800cb74:	2306      	movs	r3, #6
 800cb76:	e02c      	b.n	800cbd2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cb78:	7efb      	ldrb	r3, [r7, #27]
 800cb7a:	2b60      	cmp	r3, #96	@ 0x60
 800cb7c:	d905      	bls.n	800cb8a <create_name+0xce>
 800cb7e:	7efb      	ldrb	r3, [r7, #27]
 800cb80:	2b7a      	cmp	r3, #122	@ 0x7a
 800cb82:	d802      	bhi.n	800cb8a <create_name+0xce>
 800cb84:	7efb      	ldrb	r3, [r7, #27]
 800cb86:	3b20      	subs	r3, #32
 800cb88:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	1c5a      	adds	r2, r3, #1
 800cb8e:	613a      	str	r2, [r7, #16]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	4413      	add	r3, r2
 800cb94:	7efa      	ldrb	r2, [r7, #27]
 800cb96:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cb98:	e7a6      	b.n	800cae8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb9a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	441a      	add	r2, r3
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d101      	bne.n	800cbb0 <create_name+0xf4>
 800cbac:	2306      	movs	r3, #6
 800cbae:	e010      	b.n	800cbd2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2be5      	cmp	r3, #229	@ 0xe5
 800cbb6:	d102      	bne.n	800cbbe <create_name+0x102>
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2205      	movs	r2, #5
 800cbbc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cbbe:	7efb      	ldrb	r3, [r7, #27]
 800cbc0:	2b20      	cmp	r3, #32
 800cbc2:	d801      	bhi.n	800cbc8 <create_name+0x10c>
 800cbc4:	2204      	movs	r2, #4
 800cbc6:	e000      	b.n	800cbca <create_name+0x10e>
 800cbc8:	2200      	movs	r2, #0
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	330b      	adds	r3, #11
 800cbce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cbd0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3720      	adds	r7, #32
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	0800f458 	.word	0x0800f458
 800cbe0:	0800f38c 	.word	0x0800f38c

0800cbe4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cbf8:	e002      	b.n	800cc00 <follow_path+0x1c>
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	603b      	str	r3, [r7, #0]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc06:	d0f8      	beq.n	800cbfa <follow_path+0x16>
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800cc0e:	d0f4      	beq.n	800cbfa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	2200      	movs	r2, #0
 800cc14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	2b1f      	cmp	r3, #31
 800cc1c:	d80a      	bhi.n	800cc34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2280      	movs	r2, #128	@ 0x80
 800cc22:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cc26:	2100      	movs	r1, #0
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff fc3c 	bl	800c4a6 <dir_sdi>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	75fb      	strb	r3, [r7, #23]
 800cc32:	e043      	b.n	800ccbc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc34:	463b      	mov	r3, r7
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff ff3f 	bl	800cabc <create_name>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d134      	bne.n	800ccb2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7ff fe4f 	bl	800c8ec <dir_find>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cc58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b04      	cmp	r3, #4
 800cc64:	d127      	bne.n	800ccb6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc66:	7afb      	ldrb	r3, [r7, #11]
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d122      	bne.n	800ccb6 <follow_path+0xd2>
 800cc70:	2305      	movs	r3, #5
 800cc72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cc74:	e01f      	b.n	800ccb6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc76:	7afb      	ldrb	r3, [r7, #11]
 800cc78:	f003 0304 	and.w	r3, r3, #4
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d11c      	bne.n	800ccba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	799b      	ldrb	r3, [r3, #6]
 800cc84:	f003 0310 	and.w	r3, r3, #16
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d102      	bne.n	800cc92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cc8c:	2305      	movs	r3, #5
 800cc8e:	75fb      	strb	r3, [r7, #23]
 800cc90:	e014      	b.n	800ccbc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	695b      	ldr	r3, [r3, #20]
 800cc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca0:	4413      	add	r3, r2
 800cca2:	4619      	mov	r1, r3
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff fd85 	bl	800c7b4 <ld_clust>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccb0:	e7c0      	b.n	800cc34 <follow_path+0x50>
			if (res != FR_OK) break;
 800ccb2:	bf00      	nop
 800ccb4:	e002      	b.n	800ccbc <follow_path+0xd8>
				break;
 800ccb6:	bf00      	nop
 800ccb8:	e000      	b.n	800ccbc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccba:	bf00      	nop
			}
		}
	}

	return res;
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b087      	sub	sp, #28
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ccce:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d031      	beq.n	800cd40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	617b      	str	r3, [r7, #20]
 800cce2:	e002      	b.n	800ccea <get_ldnumber+0x24>
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	3301      	adds	r3, #1
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b20      	cmp	r3, #32
 800ccf0:	d903      	bls.n	800ccfa <get_ldnumber+0x34>
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	2b3a      	cmp	r3, #58	@ 0x3a
 800ccf8:	d1f4      	bne.n	800cce4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd00:	d11c      	bne.n	800cd3c <get_ldnumber+0x76>
			tp = *path;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	60fa      	str	r2, [r7, #12]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	3b30      	subs	r3, #48	@ 0x30
 800cd12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d80e      	bhi.n	800cd38 <get_ldnumber+0x72>
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d10a      	bne.n	800cd38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d107      	bne.n	800cd38 <get_ldnumber+0x72>
					vol = (int)i;
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	e002      	b.n	800cd42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd40:	693b      	ldr	r3, [r7, #16]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
	...

0800cd50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	70da      	strb	r2, [r3, #3]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f04f 32ff 	mov.w	r2, #4294967295
 800cd66:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7ff f81e 	bl	800bdac <move_window>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <check_fs+0x2a>
 800cd76:	2304      	movs	r3, #4
 800cd78:	e038      	b.n	800cdec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3330      	adds	r3, #48	@ 0x30
 800cd7e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fd62 	bl	800b84c <ld_word>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d001      	beq.n	800cd98 <check_fs+0x48>
 800cd94:	2303      	movs	r3, #3
 800cd96:	e029      	b.n	800cdec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd9e:	2be9      	cmp	r3, #233	@ 0xe9
 800cda0:	d009      	beq.n	800cdb6 <check_fs+0x66>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cda8:	2beb      	cmp	r3, #235	@ 0xeb
 800cdaa:	d11e      	bne.n	800cdea <check_fs+0x9a>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800cdb2:	2b90      	cmp	r3, #144	@ 0x90
 800cdb4:	d119      	bne.n	800cdea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	3330      	adds	r3, #48	@ 0x30
 800cdba:	3336      	adds	r3, #54	@ 0x36
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fe fd5d 	bl	800b87c <ld_dword>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cdc8:	4a0a      	ldr	r2, [pc, #40]	@ (800cdf4 <check_fs+0xa4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d101      	bne.n	800cdd2 <check_fs+0x82>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e00c      	b.n	800cdec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	3330      	adds	r3, #48	@ 0x30
 800cdd6:	3352      	adds	r3, #82	@ 0x52
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fe fd4f 	bl	800b87c <ld_dword>
 800cdde:	4603      	mov	r3, r0
 800cde0:	4a05      	ldr	r2, [pc, #20]	@ (800cdf8 <check_fs+0xa8>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d101      	bne.n	800cdea <check_fs+0x9a>
 800cde6:	2300      	movs	r3, #0
 800cde8:	e000      	b.n	800cdec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cdea:	2302      	movs	r3, #2
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	00544146 	.word	0x00544146
 800cdf8:	33544146 	.word	0x33544146

0800cdfc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b096      	sub	sp, #88	@ 0x58
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	4613      	mov	r3, r2
 800ce08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7ff ff58 	bl	800ccc6 <get_ldnumber>
 800ce16:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	da01      	bge.n	800ce22 <find_volume+0x26>
 800ce1e:	230b      	movs	r3, #11
 800ce20:	e22d      	b.n	800d27e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce22:	4aa1      	ldr	r2, [pc, #644]	@ (800d0a8 <find_volume+0x2ac>)
 800ce24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <find_volume+0x3a>
 800ce32:	230c      	movs	r3, #12
 800ce34:	e223      	b.n	800d27e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce3a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce3c:	79fb      	ldrb	r3, [r7, #7]
 800ce3e:	f023 0301 	bic.w	r3, r3, #1
 800ce42:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d01a      	beq.n	800ce82 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	785b      	ldrb	r3, [r3, #1]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fe fc5b 	bl	800b70c <disk_status>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ce5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10c      	bne.n	800ce82 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ce68:	79fb      	ldrb	r3, [r7, #7]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d007      	beq.n	800ce7e <find_volume+0x82>
 800ce6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce72:	f003 0304 	and.w	r3, r3, #4
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ce7a:	230a      	movs	r3, #10
 800ce7c:	e1ff      	b.n	800d27e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e1fd      	b.n	800d27e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce84:	2200      	movs	r2, #0
 800ce86:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ce88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ce90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe fc53 	bl	800b740 <disk_initialize>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cea0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ceac:	2303      	movs	r3, #3
 800ceae:	e1e6      	b.n	800d27e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d007      	beq.n	800cec6 <find_volume+0xca>
 800ceb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cec2:	230a      	movs	r3, #10
 800cec4:	e1db      	b.n	800d27e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ceca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cecc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cece:	f7ff ff3f 	bl	800cd50 <check_fs>
 800ced2:	4603      	mov	r3, r0
 800ced4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ced8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d149      	bne.n	800cf74 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cee0:	2300      	movs	r3, #0
 800cee2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cee4:	e01e      	b.n	800cf24 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ceec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceee:	011b      	lsls	r3, r3, #4
 800cef0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cef4:	4413      	add	r3, r2
 800cef6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefa:	3304      	adds	r3, #4
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d006      	beq.n	800cf10 <find_volume+0x114>
 800cf02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf04:	3308      	adds	r3, #8
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fcb8 	bl	800b87c <ld_dword>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	e000      	b.n	800cf12 <find_volume+0x116>
 800cf10:	2200      	movs	r2, #0
 800cf12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	3358      	adds	r3, #88	@ 0x58
 800cf18:	443b      	add	r3, r7
 800cf1a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf20:	3301      	adds	r3, #1
 800cf22:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d9dd      	bls.n	800cee6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cf2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <find_volume+0x13e>
 800cf34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf36:	3b01      	subs	r3, #1
 800cf38:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cf3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	3358      	adds	r3, #88	@ 0x58
 800cf40:	443b      	add	r3, r7
 800cf42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf46:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d005      	beq.n	800cf5a <find_volume+0x15e>
 800cf4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf52:	f7ff fefd 	bl	800cd50 <check_fs>
 800cf56:	4603      	mov	r3, r0
 800cf58:	e000      	b.n	800cf5c <find_volume+0x160>
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d905      	bls.n	800cf74 <find_volume+0x178>
 800cf68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf70:	2b03      	cmp	r3, #3
 800cf72:	d9e2      	bls.n	800cf3a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cf74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	d101      	bne.n	800cf80 <find_volume+0x184>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e17e      	b.n	800d27e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d901      	bls.n	800cf8c <find_volume+0x190>
 800cf88:	230d      	movs	r3, #13
 800cf8a:	e178      	b.n	800d27e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8e:	3330      	adds	r3, #48	@ 0x30
 800cf90:	330b      	adds	r3, #11
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe fc5a 	bl	800b84c <ld_word>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf9e:	d001      	beq.n	800cfa4 <find_volume+0x1a8>
 800cfa0:	230d      	movs	r3, #13
 800cfa2:	e16c      	b.n	800d27e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa6:	3330      	adds	r3, #48	@ 0x30
 800cfa8:	3316      	adds	r3, #22
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fe fc4e 	bl	800b84c <ld_word>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cfb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d106      	bne.n	800cfc8 <find_volume+0x1cc>
 800cfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbc:	3330      	adds	r3, #48	@ 0x30
 800cfbe:	3324      	adds	r3, #36	@ 0x24
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fc5b 	bl	800b87c <ld_dword>
 800cfc6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cfcc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfda:	789b      	ldrb	r3, [r3, #2]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d005      	beq.n	800cfec <find_volume+0x1f0>
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe2:	789b      	ldrb	r3, [r3, #2]
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d001      	beq.n	800cfec <find_volume+0x1f0>
 800cfe8:	230d      	movs	r3, #13
 800cfea:	e148      	b.n	800d27e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfee:	789b      	ldrb	r3, [r3, #2]
 800cff0:	461a      	mov	r2, r3
 800cff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cff4:	fb02 f303 	mul.w	r3, r2, r3
 800cff8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d000:	461a      	mov	r2, r3
 800d002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d004:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d008:	895b      	ldrh	r3, [r3, #10]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d008      	beq.n	800d020 <find_volume+0x224>
 800d00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d010:	895b      	ldrh	r3, [r3, #10]
 800d012:	461a      	mov	r2, r3
 800d014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d016:	895b      	ldrh	r3, [r3, #10]
 800d018:	3b01      	subs	r3, #1
 800d01a:	4013      	ands	r3, r2
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <find_volume+0x228>
 800d020:	230d      	movs	r3, #13
 800d022:	e12c      	b.n	800d27e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d026:	3330      	adds	r3, #48	@ 0x30
 800d028:	3311      	adds	r3, #17
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fc0e 	bl	800b84c <ld_word>
 800d030:	4603      	mov	r3, r0
 800d032:	461a      	mov	r2, r3
 800d034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d036:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03a:	891b      	ldrh	r3, [r3, #8]
 800d03c:	f003 030f 	and.w	r3, r3, #15
 800d040:	b29b      	uxth	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <find_volume+0x24e>
 800d046:	230d      	movs	r3, #13
 800d048:	e119      	b.n	800d27e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04c:	3330      	adds	r3, #48	@ 0x30
 800d04e:	3313      	adds	r3, #19
 800d050:	4618      	mov	r0, r3
 800d052:	f7fe fbfb 	bl	800b84c <ld_word>
 800d056:	4603      	mov	r3, r0
 800d058:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d05a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d106      	bne.n	800d06e <find_volume+0x272>
 800d060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d062:	3330      	adds	r3, #48	@ 0x30
 800d064:	3320      	adds	r3, #32
 800d066:	4618      	mov	r0, r3
 800d068:	f7fe fc08 	bl	800b87c <ld_dword>
 800d06c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d070:	3330      	adds	r3, #48	@ 0x30
 800d072:	330e      	adds	r3, #14
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe fbe9 	bl	800b84c <ld_word>
 800d07a:	4603      	mov	r3, r0
 800d07c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d07e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <find_volume+0x28c>
 800d084:	230d      	movs	r3, #13
 800d086:	e0fa      	b.n	800d27e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d088:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d08a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d08c:	4413      	add	r3, r2
 800d08e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d090:	8912      	ldrh	r2, [r2, #8]
 800d092:	0912      	lsrs	r2, r2, #4
 800d094:	b292      	uxth	r2, r2
 800d096:	4413      	add	r3, r2
 800d098:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d09a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d204      	bcs.n	800d0ac <find_volume+0x2b0>
 800d0a2:	230d      	movs	r3, #13
 800d0a4:	e0eb      	b.n	800d27e <find_volume+0x482>
 800d0a6:	bf00      	nop
 800d0a8:	20014b08 	.word	0x20014b08
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0b4:	8952      	ldrh	r2, [r2, #10]
 800d0b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0ba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d101      	bne.n	800d0c6 <find_volume+0x2ca>
 800d0c2:	230d      	movs	r3, #13
 800d0c4:	e0db      	b.n	800d27e <find_volume+0x482>
		fmt = FS_FAT32;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ce:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d802      	bhi.n	800d0dc <find_volume+0x2e0>
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0de:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d802      	bhi.n	800d0ec <find_volume+0x2f0>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ee:	1c9a      	adds	r2, r3, #2
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d0f8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d0fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fe:	441a      	add	r2, r3
 800d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d102:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d104:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d108:	441a      	add	r2, r3
 800d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d10e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d112:	2b03      	cmp	r3, #3
 800d114:	d11e      	bne.n	800d154 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d118:	3330      	adds	r3, #48	@ 0x30
 800d11a:	332a      	adds	r3, #42	@ 0x2a
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe fb95 	bl	800b84c <ld_word>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <find_volume+0x330>
 800d128:	230d      	movs	r3, #13
 800d12a:	e0a8      	b.n	800d27e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12e:	891b      	ldrh	r3, [r3, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <find_volume+0x33c>
 800d134:	230d      	movs	r3, #13
 800d136:	e0a2      	b.n	800d27e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13a:	3330      	adds	r3, #48	@ 0x30
 800d13c:	332c      	adds	r3, #44	@ 0x2c
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe fb9c 	bl	800b87c <ld_dword>
 800d144:	4602      	mov	r2, r0
 800d146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d148:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	647b      	str	r3, [r7, #68]	@ 0x44
 800d152:	e01f      	b.n	800d194 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d156:	891b      	ldrh	r3, [r3, #8]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d101      	bne.n	800d160 <find_volume+0x364>
 800d15c:	230d      	movs	r3, #13
 800d15e:	e08e      	b.n	800d27e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d162:	6a1a      	ldr	r2, [r3, #32]
 800d164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d166:	441a      	add	r2, r3
 800d168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d16c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d170:	2b02      	cmp	r3, #2
 800d172:	d103      	bne.n	800d17c <find_volume+0x380>
 800d174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d176:	695b      	ldr	r3, [r3, #20]
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	e00a      	b.n	800d192 <find_volume+0x396>
 800d17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d17e:	695a      	ldr	r2, [r3, #20]
 800d180:	4613      	mov	r3, r2
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	4413      	add	r3, r2
 800d186:	085a      	lsrs	r2, r3, #1
 800d188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	f003 0301 	and.w	r3, r3, #1
 800d190:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d192:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d196:	699a      	ldr	r2, [r3, #24]
 800d198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d19a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d19e:	0a5b      	lsrs	r3, r3, #9
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d201      	bcs.n	800d1a8 <find_volume+0x3ac>
 800d1a4:	230d      	movs	r3, #13
 800d1a6:	e06a      	b.n	800d27e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ae:	611a      	str	r2, [r3, #16]
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b2:	691a      	ldr	r2, [r3, #16]
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ba:	2280      	movs	r2, #128	@ 0x80
 800d1bc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d1be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d149      	bne.n	800d25a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c8:	3330      	adds	r3, #48	@ 0x30
 800d1ca:	3330      	adds	r3, #48	@ 0x30
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fe fb3d 	bl	800b84c <ld_word>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d140      	bne.n	800d25a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d1d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1da:	3301      	adds	r3, #1
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d1e0:	f7fe fde4 	bl	800bdac <move_window>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d137      	bne.n	800d25a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f2:	3330      	adds	r3, #48	@ 0x30
 800d1f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fb27 	bl	800b84c <ld_word>
 800d1fe:	4603      	mov	r3, r0
 800d200:	461a      	mov	r2, r3
 800d202:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d206:	429a      	cmp	r2, r3
 800d208:	d127      	bne.n	800d25a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20c:	3330      	adds	r3, #48	@ 0x30
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fb34 	bl	800b87c <ld_dword>
 800d214:	4603      	mov	r3, r0
 800d216:	4a1c      	ldr	r2, [pc, #112]	@ (800d288 <find_volume+0x48c>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d11e      	bne.n	800d25a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21e:	3330      	adds	r3, #48	@ 0x30
 800d220:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d224:	4618      	mov	r0, r3
 800d226:	f7fe fb29 	bl	800b87c <ld_dword>
 800d22a:	4603      	mov	r3, r0
 800d22c:	4a17      	ldr	r2, [pc, #92]	@ (800d28c <find_volume+0x490>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d113      	bne.n	800d25a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	3330      	adds	r3, #48	@ 0x30
 800d236:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fe fb1e 	bl	800b87c <ld_dword>
 800d240:	4602      	mov	r2, r0
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d248:	3330      	adds	r3, #48	@ 0x30
 800d24a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fb14 	bl	800b87c <ld_dword>
 800d254:	4602      	mov	r2, r0
 800d256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d258:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d260:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d262:	4b0b      	ldr	r3, [pc, #44]	@ (800d290 <find_volume+0x494>)
 800d264:	881b      	ldrh	r3, [r3, #0]
 800d266:	3301      	adds	r3, #1
 800d268:	b29a      	uxth	r2, r3
 800d26a:	4b09      	ldr	r3, [pc, #36]	@ (800d290 <find_volume+0x494>)
 800d26c:	801a      	strh	r2, [r3, #0]
 800d26e:	4b08      	ldr	r3, [pc, #32]	@ (800d290 <find_volume+0x494>)
 800d270:	881a      	ldrh	r2, [r3, #0]
 800d272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d274:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d276:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d278:	f7fe fd30 	bl	800bcdc <clear_lock>
#endif
	return FR_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3758      	adds	r7, #88	@ 0x58
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	41615252 	.word	0x41615252
 800d28c:	61417272 	.word	0x61417272
 800d290:	20014b0c 	.word	0x20014b0c

0800d294 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d29e:	2309      	movs	r3, #9
 800d2a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d01c      	beq.n	800d2e2 <validate+0x4e>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d018      	beq.n	800d2e2 <validate+0x4e>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d013      	beq.n	800d2e2 <validate+0x4e>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	889a      	ldrh	r2, [r3, #4]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	88db      	ldrh	r3, [r3, #6]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d10c      	bne.n	800d2e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fe fa1c 	bl	800b70c <disk_status>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <validate+0x4e>
			res = FR_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <validate+0x5a>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	e000      	b.n	800d2f0 <validate+0x5c>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	6013      	str	r3, [r2, #0]
	return res;
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
	...

0800d300 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b088      	sub	sp, #32
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	4613      	mov	r3, r2
 800d30c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d312:	f107 0310 	add.w	r3, r7, #16
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff fcd5 	bl	800ccc6 <get_ldnumber>
 800d31c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	2b00      	cmp	r3, #0
 800d322:	da01      	bge.n	800d328 <f_mount+0x28>
 800d324:	230b      	movs	r3, #11
 800d326:	e02b      	b.n	800d380 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d328:	4a17      	ldr	r2, [pc, #92]	@ (800d388 <f_mount+0x88>)
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d330:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d005      	beq.n	800d344 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d338:	69b8      	ldr	r0, [r7, #24]
 800d33a:	f7fe fccf 	bl	800bcdc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	2200      	movs	r2, #0
 800d342:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	490d      	ldr	r1, [pc, #52]	@ (800d388 <f_mount+0x88>)
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <f_mount+0x66>
 800d360:	79fb      	ldrb	r3, [r7, #7]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d001      	beq.n	800d36a <f_mount+0x6a>
 800d366:	2300      	movs	r3, #0
 800d368:	e00a      	b.n	800d380 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d36a:	f107 010c 	add.w	r1, r7, #12
 800d36e:	f107 0308 	add.w	r3, r7, #8
 800d372:	2200      	movs	r2, #0
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff fd41 	bl	800cdfc <find_volume>
 800d37a:	4603      	mov	r3, r0
 800d37c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3720      	adds	r7, #32
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	20014b08 	.word	0x20014b08

0800d38c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b098      	sub	sp, #96	@ 0x60
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <f_open+0x18>
 800d3a0:	2309      	movs	r3, #9
 800d3a2:	e1a9      	b.n	800d6f8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d3aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d3ac:	79fa      	ldrb	r2, [r7, #7]
 800d3ae:	f107 0110 	add.w	r1, r7, #16
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff fd20 	bl	800cdfc <find_volume>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f040 818d 	bne.w	800d6e6 <f_open+0x35a>
		dj.obj.fs = fs;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	f107 0314 	add.w	r3, r7, #20
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7ff fc03 	bl	800cbe4 <follow_path>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d3e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d118      	bne.n	800d41e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d3ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d3f0:	b25b      	sxtb	r3, r3
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	da03      	bge.n	800d3fe <f_open+0x72>
				res = FR_INVALID_NAME;
 800d3f6:	2306      	movs	r3, #6
 800d3f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d3fc:	e00f      	b.n	800d41e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	2b01      	cmp	r3, #1
 800d402:	bf8c      	ite	hi
 800d404:	2301      	movhi	r3, #1
 800d406:	2300      	movls	r3, #0
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	461a      	mov	r2, r3
 800d40c:	f107 0314 	add.w	r3, r7, #20
 800d410:	4611      	mov	r1, r2
 800d412:	4618      	mov	r0, r3
 800d414:	f7fe fb1a 	bl	800ba4c <chk_lock>
 800d418:	4603      	mov	r3, r0
 800d41a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d41e:	79fb      	ldrb	r3, [r7, #7]
 800d420:	f003 031c 	and.w	r3, r3, #28
 800d424:	2b00      	cmp	r3, #0
 800d426:	d07f      	beq.n	800d528 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d428:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d017      	beq.n	800d460 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d430:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d434:	2b04      	cmp	r3, #4
 800d436:	d10e      	bne.n	800d456 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d438:	f7fe fb64 	bl	800bb04 <enq_lock>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d006      	beq.n	800d450 <f_open+0xc4>
 800d442:	f107 0314 	add.w	r3, r7, #20
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff faa5 	bl	800c996 <dir_register>
 800d44c:	4603      	mov	r3, r0
 800d44e:	e000      	b.n	800d452 <f_open+0xc6>
 800d450:	2312      	movs	r3, #18
 800d452:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	f043 0308 	orr.w	r3, r3, #8
 800d45c:	71fb      	strb	r3, [r7, #7]
 800d45e:	e010      	b.n	800d482 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d460:	7ebb      	ldrb	r3, [r7, #26]
 800d462:	f003 0311 	and.w	r3, r3, #17
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <f_open+0xe6>
					res = FR_DENIED;
 800d46a:	2307      	movs	r3, #7
 800d46c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d470:	e007      	b.n	800d482 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d472:	79fb      	ldrb	r3, [r7, #7]
 800d474:	f003 0304 	and.w	r3, r3, #4
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d002      	beq.n	800d482 <f_open+0xf6>
 800d47c:	2308      	movs	r3, #8
 800d47e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d482:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d486:	2b00      	cmp	r3, #0
 800d488:	d168      	bne.n	800d55c <f_open+0x1d0>
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	f003 0308 	and.w	r3, r3, #8
 800d490:	2b00      	cmp	r3, #0
 800d492:	d063      	beq.n	800d55c <f_open+0x1d0>
				dw = GET_FATTIME();
 800d494:	f7fa fd38 	bl	8007f08 <get_fattime>
 800d498:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d49c:	330e      	adds	r3, #14
 800d49e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe fa29 	bl	800b8f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4a8:	3316      	adds	r3, #22
 800d4aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe fa23 	bl	800b8f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4b4:	330b      	adds	r3, #11
 800d4b6:	2220      	movs	r2, #32
 800d4b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4be:	4611      	mov	r1, r2
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff f977 	bl	800c7b4 <ld_clust>
 800d4c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff f98f 	bl	800c7f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d6:	331c      	adds	r3, #28
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fa0c 	bl	800b8f8 <st_dword>
					fs->wflag = 1;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d4e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d037      	beq.n	800d55c <f_open+0x1d0>
						dw = fs->winsect;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d4f2:	f107 0314 	add.w	r3, r7, #20
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fea2 	bl	800c244 <remove_chain>
 800d500:	4603      	mov	r3, r0
 800d502:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d506:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d126      	bne.n	800d55c <f_open+0x1d0>
							res = move_window(fs, dw);
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fc4a 	bl	800bdac <move_window>
 800d518:	4603      	mov	r3, r0
 800d51a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d522:	3a01      	subs	r2, #1
 800d524:	60da      	str	r2, [r3, #12]
 800d526:	e019      	b.n	800d55c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d528:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d115      	bne.n	800d55c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d530:	7ebb      	ldrb	r3, [r7, #26]
 800d532:	f003 0310 	and.w	r3, r3, #16
 800d536:	2b00      	cmp	r3, #0
 800d538:	d003      	beq.n	800d542 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d53a:	2304      	movs	r3, #4
 800d53c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d540:	e00c      	b.n	800d55c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d542:	79fb      	ldrb	r3, [r7, #7]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d007      	beq.n	800d55c <f_open+0x1d0>
 800d54c:	7ebb      	ldrb	r3, [r7, #26]
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <f_open+0x1d0>
						res = FR_DENIED;
 800d556:	2307      	movs	r3, #7
 800d558:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d55c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d560:	2b00      	cmp	r3, #0
 800d562:	d126      	bne.n	800d5b2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d564:	79fb      	ldrb	r3, [r7, #7]
 800d566:	f003 0308 	and.w	r3, r3, #8
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d574:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d57e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	2b01      	cmp	r3, #1
 800d588:	bf8c      	ite	hi
 800d58a:	2301      	movhi	r3, #1
 800d58c:	2300      	movls	r3, #0
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	461a      	mov	r2, r3
 800d592:	f107 0314 	add.w	r3, r7, #20
 800d596:	4611      	mov	r1, r2
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fe fad5 	bl	800bb48 <inc_lock>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d102      	bne.n	800d5b2 <f_open+0x226>
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f040 8095 	bne.w	800d6e6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff f8f6 	bl	800c7b4 <ld_clust>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d0:	331c      	adds	r3, #28
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe f952 	bl	800b87c <ld_dword>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d5e4:	693a      	ldr	r2, [r7, #16]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	88da      	ldrh	r2, [r3, #6]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	79fa      	ldrb	r2, [r7, #7]
 800d5f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3330      	adds	r3, #48	@ 0x30
 800d60e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d612:	2100      	movs	r1, #0
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe f9bc 	bl	800b992 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	f003 0320 	and.w	r3, r3, #32
 800d620:	2b00      	cmp	r3, #0
 800d622:	d060      	beq.n	800d6e6 <f_open+0x35a>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d05c      	beq.n	800d6e6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	68da      	ldr	r2, [r3, #12]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	895b      	ldrh	r3, [r3, #10]
 800d638:	025b      	lsls	r3, r3, #9
 800d63a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	657b      	str	r3, [r7, #84]	@ 0x54
 800d648:	e016      	b.n	800d678 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fc67 	bl	800bf22 <get_fat>
 800d654:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d802      	bhi.n	800d662 <f_open+0x2d6>
 800d65c:	2302      	movs	r3, #2
 800d65e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d668:	d102      	bne.n	800d670 <f_open+0x2e4>
 800d66a:	2301      	movs	r3, #1
 800d66c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d670:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	657b      	str	r3, [r7, #84]	@ 0x54
 800d678:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d103      	bne.n	800d688 <f_open+0x2fc>
 800d680:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d684:	429a      	cmp	r2, r3
 800d686:	d8e0      	bhi.n	800d64a <f_open+0x2be>
				}
				fp->clust = clst;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d68c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d68e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d692:	2b00      	cmp	r3, #0
 800d694:	d127      	bne.n	800d6e6 <f_open+0x35a>
 800d696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d022      	beq.n	800d6e6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fe fc1d 	bl	800bee4 <clust2sect>
 800d6aa:	6478      	str	r0, [r7, #68]	@ 0x44
 800d6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d103      	bne.n	800d6ba <f_open+0x32e>
						res = FR_INT_ERR;
 800d6b2:	2302      	movs	r3, #2
 800d6b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d6b8:	e015      	b.n	800d6e6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6bc:	0a5a      	lsrs	r2, r3, #9
 800d6be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6c0:	441a      	add	r2, r3
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	7858      	ldrb	r0, [r3, #1]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6a1a      	ldr	r2, [r3, #32]
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	f7fe f85b 	bl	800b790 <disk_read>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d002      	beq.n	800d6e6 <f_open+0x35a>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d6e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <f_open+0x368>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d6f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3760      	adds	r7, #96	@ 0x60
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08e      	sub	sp, #56	@ 0x38
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
 800d70c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f107 0214 	add.w	r2, r7, #20
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f7ff fdb7 	bl	800d294 <validate>
 800d726:	4603      	mov	r3, r0
 800d728:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d72c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d730:	2b00      	cmp	r3, #0
 800d732:	d107      	bne.n	800d744 <f_read+0x44>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	7d5b      	ldrb	r3, [r3, #21]
 800d738:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d73c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d740:	2b00      	cmp	r3, #0
 800d742:	d002      	beq.n	800d74a <f_read+0x4a>
 800d744:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d748:	e115      	b.n	800d976 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	7d1b      	ldrb	r3, [r3, #20]
 800d74e:	f003 0301 	and.w	r3, r3, #1
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <f_read+0x5a>
 800d756:	2307      	movs	r3, #7
 800d758:	e10d      	b.n	800d976 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	68da      	ldr	r2, [r3, #12]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	6a3b      	ldr	r3, [r7, #32]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	f240 80fe 	bls.w	800d96c <f_read+0x26c>
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d774:	e0fa      	b.n	800d96c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f040 80c6 	bne.w	800d910 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	699b      	ldr	r3, [r3, #24]
 800d788:	0a5b      	lsrs	r3, r3, #9
 800d78a:	697a      	ldr	r2, [r7, #20]
 800d78c:	8952      	ldrh	r2, [r2, #10]
 800d78e:	3a01      	subs	r2, #1
 800d790:	4013      	ands	r3, r2
 800d792:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d12f      	bne.n	800d7fa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	699b      	ldr	r3, [r3, #24]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d103      	bne.n	800d7aa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7a8:	e013      	b.n	800d7d2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d007      	beq.n	800d7c2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	699b      	ldr	r3, [r3, #24]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7fe fe40 	bl	800c43e <clmt_clust>
 800d7be:	6338      	str	r0, [r7, #48]	@ 0x30
 800d7c0:	e007      	b.n	800d7d2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	69db      	ldr	r3, [r3, #28]
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	f7fe fba9 	bl	800bf22 <get_fat>
 800d7d0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d804      	bhi.n	800d7e2 <f_read+0xe2>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2202      	movs	r2, #2
 800d7dc:	755a      	strb	r2, [r3, #21]
 800d7de:	2302      	movs	r3, #2
 800d7e0:	e0c9      	b.n	800d976 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e8:	d104      	bne.n	800d7f4 <f_read+0xf4>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	755a      	strb	r2, [r3, #21]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e0c0      	b.n	800d976 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7f8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d7fa:	697a      	ldr	r2, [r7, #20]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	69db      	ldr	r3, [r3, #28]
 800d800:	4619      	mov	r1, r3
 800d802:	4610      	mov	r0, r2
 800d804:	f7fe fb6e 	bl	800bee4 <clust2sect>
 800d808:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d104      	bne.n	800d81a <f_read+0x11a>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2202      	movs	r2, #2
 800d814:	755a      	strb	r2, [r3, #21]
 800d816:	2302      	movs	r3, #2
 800d818:	e0ad      	b.n	800d976 <f_read+0x276>
			sect += csect;
 800d81a:	69ba      	ldr	r2, [r7, #24]
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	4413      	add	r3, r2
 800d820:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	0a5b      	lsrs	r3, r3, #9
 800d826:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d039      	beq.n	800d8a2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d82e:	69fa      	ldr	r2, [r7, #28]
 800d830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d832:	4413      	add	r3, r2
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	8952      	ldrh	r2, [r2, #10]
 800d838:	4293      	cmp	r3, r2
 800d83a:	d905      	bls.n	800d848 <f_read+0x148>
					cc = fs->csize - csect;
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	895b      	ldrh	r3, [r3, #10]
 800d840:	461a      	mov	r2, r3
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	7858      	ldrb	r0, [r3, #1]
 800d84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d852:	f7fd ff9d 	bl	800b790 <disk_read>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d004      	beq.n	800d866 <f_read+0x166>
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2201      	movs	r2, #1
 800d860:	755a      	strb	r2, [r3, #21]
 800d862:	2301      	movs	r3, #1
 800d864:	e087      	b.n	800d976 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	7d1b      	ldrb	r3, [r3, #20]
 800d86a:	b25b      	sxtb	r3, r3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	da14      	bge.n	800d89a <f_read+0x19a>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6a1a      	ldr	r2, [r3, #32]
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d90d      	bls.n	800d89a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6a1a      	ldr	r2, [r3, #32]
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	025b      	lsls	r3, r3, #9
 800d888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d88a:	18d0      	adds	r0, r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3330      	adds	r3, #48	@ 0x30
 800d890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d894:	4619      	mov	r1, r3
 800d896:	f7fe f85b 	bl	800b950 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d89c:	025b      	lsls	r3, r3, #9
 800d89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d8a0:	e050      	b.n	800d944 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6a1b      	ldr	r3, [r3, #32]
 800d8a6:	69ba      	ldr	r2, [r7, #24]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d02e      	beq.n	800d90a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	7d1b      	ldrb	r3, [r3, #20]
 800d8b0:	b25b      	sxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	da18      	bge.n	800d8e8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	7858      	ldrb	r0, [r3, #1]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6a1a      	ldr	r2, [r3, #32]
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	f7fd ff83 	bl	800b7d0 <disk_write>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d004      	beq.n	800d8da <f_read+0x1da>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	755a      	strb	r2, [r3, #21]
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e04d      	b.n	800d976 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	7d1b      	ldrb	r3, [r3, #20]
 800d8de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	7858      	ldrb	r0, [r3, #1]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	f7fd ff4b 	bl	800b790 <disk_read>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d004      	beq.n	800d90a <f_read+0x20a>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2201      	movs	r2, #1
 800d904:	755a      	strb	r2, [r3, #21]
 800d906:	2301      	movs	r3, #1
 800d908:	e035      	b.n	800d976 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	699b      	ldr	r3, [r3, #24]
 800d914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d918:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d91e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	429a      	cmp	r2, r3
 800d924:	d901      	bls.n	800d92a <f_read+0x22a>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d938:	4413      	add	r3, r2
 800d93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d93c:	4619      	mov	r1, r3
 800d93e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d940:	f7fe f806 	bl	800b950 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	4413      	add	r3, r2
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	699a      	ldr	r2, [r3, #24]
 800d950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d952:	441a      	add	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	619a      	str	r2, [r3, #24]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	441a      	add	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f47f af01 	bne.w	800d776 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3738      	adds	r7, #56	@ 0x38
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d97e:	b580      	push	{r7, lr}
 800d980:	b08c      	sub	sp, #48	@ 0x30
 800d982:	af00      	add	r7, sp, #0
 800d984:	60f8      	str	r0, [r7, #12]
 800d986:	60b9      	str	r1, [r7, #8]
 800d988:	607a      	str	r2, [r7, #4]
 800d98a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2200      	movs	r2, #0
 800d994:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f107 0210 	add.w	r2, r7, #16
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff fc78 	bl	800d294 <validate>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d9aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d107      	bne.n	800d9c2 <f_write+0x44>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	7d5b      	ldrb	r3, [r3, #21]
 800d9b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d9ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <f_write+0x4a>
 800d9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9c6:	e14b      	b.n	800dc60 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	7d1b      	ldrb	r3, [r3, #20]
 800d9cc:	f003 0302 	and.w	r3, r3, #2
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <f_write+0x5a>
 800d9d4:	2307      	movs	r3, #7
 800d9d6:	e143      	b.n	800dc60 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	699a      	ldr	r2, [r3, #24]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	441a      	add	r2, r3
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	699b      	ldr	r3, [r3, #24]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	f080 812d 	bcs.w	800dc44 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	43db      	mvns	r3, r3
 800d9f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d9f2:	e127      	b.n	800dc44 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f040 80e3 	bne.w	800dbc8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	699b      	ldr	r3, [r3, #24]
 800da06:	0a5b      	lsrs	r3, r3, #9
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	8952      	ldrh	r2, [r2, #10]
 800da0c:	3a01      	subs	r2, #1
 800da0e:	4013      	ands	r3, r2
 800da10:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d143      	bne.n	800daa0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10c      	bne.n	800da3a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800da26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d11a      	bne.n	800da62 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2100      	movs	r1, #0
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe fc6c 	bl	800c30e <create_chain>
 800da36:	62b8      	str	r0, [r7, #40]	@ 0x28
 800da38:	e013      	b.n	800da62 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d007      	beq.n	800da52 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	4619      	mov	r1, r3
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f7fe fcf8 	bl	800c43e <clmt_clust>
 800da4e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800da50:	e007      	b.n	800da62 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	4619      	mov	r1, r3
 800da5a:	4610      	mov	r0, r2
 800da5c:	f7fe fc57 	bl	800c30e <create_chain>
 800da60:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800da62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 80f2 	beq.w	800dc4e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d104      	bne.n	800da7a <f_write+0xfc>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2202      	movs	r2, #2
 800da74:	755a      	strb	r2, [r3, #21]
 800da76:	2302      	movs	r3, #2
 800da78:	e0f2      	b.n	800dc60 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da80:	d104      	bne.n	800da8c <f_write+0x10e>
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2201      	movs	r2, #1
 800da86:	755a      	strb	r2, [r3, #21]
 800da88:	2301      	movs	r3, #1
 800da8a:	e0e9      	b.n	800dc60 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da90:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d102      	bne.n	800daa0 <f_write+0x122>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da9e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	7d1b      	ldrb	r3, [r3, #20]
 800daa4:	b25b      	sxtb	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	da18      	bge.n	800dadc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	7858      	ldrb	r0, [r3, #1]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	6a1a      	ldr	r2, [r3, #32]
 800dab8:	2301      	movs	r3, #1
 800daba:	f7fd fe89 	bl	800b7d0 <disk_write>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d004      	beq.n	800dace <f_write+0x150>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	755a      	strb	r2, [r3, #21]
 800daca:	2301      	movs	r3, #1
 800dacc:	e0c8      	b.n	800dc60 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	7d1b      	ldrb	r3, [r3, #20]
 800dad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	69db      	ldr	r3, [r3, #28]
 800dae2:	4619      	mov	r1, r3
 800dae4:	4610      	mov	r0, r2
 800dae6:	f7fe f9fd 	bl	800bee4 <clust2sect>
 800daea:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d104      	bne.n	800dafc <f_write+0x17e>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2202      	movs	r2, #2
 800daf6:	755a      	strb	r2, [r3, #21]
 800daf8:	2302      	movs	r3, #2
 800dafa:	e0b1      	b.n	800dc60 <f_write+0x2e2>
			sect += csect;
 800dafc:	697a      	ldr	r2, [r7, #20]
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	4413      	add	r3, r2
 800db02:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	0a5b      	lsrs	r3, r3, #9
 800db08:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d03c      	beq.n	800db8a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800db10:	69ba      	ldr	r2, [r7, #24]
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	4413      	add	r3, r2
 800db16:	693a      	ldr	r2, [r7, #16]
 800db18:	8952      	ldrh	r2, [r2, #10]
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d905      	bls.n	800db2a <f_write+0x1ac>
					cc = fs->csize - csect;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	895b      	ldrh	r3, [r3, #10]
 800db22:	461a      	mov	r2, r3
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	7858      	ldrb	r0, [r3, #1]
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	697a      	ldr	r2, [r7, #20]
 800db32:	69f9      	ldr	r1, [r7, #28]
 800db34:	f7fd fe4c 	bl	800b7d0 <disk_write>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d004      	beq.n	800db48 <f_write+0x1ca>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2201      	movs	r2, #1
 800db42:	755a      	strb	r2, [r3, #21]
 800db44:	2301      	movs	r3, #1
 800db46:	e08b      	b.n	800dc60 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6a1a      	ldr	r2, [r3, #32]
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	6a3a      	ldr	r2, [r7, #32]
 800db52:	429a      	cmp	r2, r3
 800db54:	d915      	bls.n	800db82 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6a1a      	ldr	r2, [r3, #32]
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	025b      	lsls	r3, r3, #9
 800db66:	69fa      	ldr	r2, [r7, #28]
 800db68:	4413      	add	r3, r2
 800db6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db6e:	4619      	mov	r1, r3
 800db70:	f7fd feee 	bl	800b950 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	7d1b      	ldrb	r3, [r3, #20]
 800db78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	025b      	lsls	r3, r3, #9
 800db86:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800db88:	e03f      	b.n	800dc0a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	429a      	cmp	r2, r3
 800db92:	d016      	beq.n	800dbc2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	699a      	ldr	r2, [r3, #24]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d210      	bcs.n	800dbc2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	7858      	ldrb	r0, [r3, #1]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbaa:	2301      	movs	r3, #1
 800dbac:	697a      	ldr	r2, [r7, #20]
 800dbae:	f7fd fdef 	bl	800b790 <disk_read>
 800dbb2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d004      	beq.n	800dbc2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	755a      	strb	r2, [r3, #21]
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e04e      	b.n	800dc60 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	697a      	ldr	r2, [r7, #20]
 800dbc6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	699b      	ldr	r3, [r3, #24]
 800dbcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dbd4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dbd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d901      	bls.n	800dbe2 <f_write+0x264>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbf0:	4413      	add	r3, r2
 800dbf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbf4:	69f9      	ldr	r1, [r7, #28]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd feaa 	bl	800b950 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	7d1b      	ldrb	r3, [r3, #20]
 800dc00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dc0a:	69fa      	ldr	r2, [r7, #28]
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0e:	4413      	add	r3, r2
 800dc10:	61fb      	str	r3, [r7, #28]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	699a      	ldr	r2, [r3, #24]
 800dc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc18:	441a      	add	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	619a      	str	r2, [r3, #24]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	68da      	ldr	r2, [r3, #12]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	699b      	ldr	r3, [r3, #24]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	bf38      	it	cc
 800dc2a:	461a      	movcc	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	60da      	str	r2, [r3, #12]
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc36:	441a      	add	r2, r3
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f47f aed4 	bne.w	800d9f4 <f_write+0x76>
 800dc4c:	e000      	b.n	800dc50 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc4e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	7d1b      	ldrb	r3, [r3, #20]
 800dc54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3730      	adds	r7, #48	@ 0x30
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f107 0208 	add.w	r2, r7, #8
 800dc76:	4611      	mov	r1, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7ff fb0b 	bl	800d294 <validate>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d168      	bne.n	800dd5a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7d1b      	ldrb	r3, [r3, #20]
 800dc8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d062      	beq.n	800dd5a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	7d1b      	ldrb	r3, [r3, #20]
 800dc98:	b25b      	sxtb	r3, r3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	da15      	bge.n	800dcca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	7858      	ldrb	r0, [r3, #1]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6a1a      	ldr	r2, [r3, #32]
 800dcac:	2301      	movs	r3, #1
 800dcae:	f7fd fd8f 	bl	800b7d0 <disk_write>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d001      	beq.n	800dcbc <f_sync+0x54>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e04f      	b.n	800dd5c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	7d1b      	ldrb	r3, [r3, #20]
 800dcc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dcca:	f7fa f91d 	bl	8007f08 <get_fattime>
 800dcce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4610      	mov	r0, r2
 800dcda:	f7fe f867 	bl	800bdac <move_window>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dce2:	7dfb      	ldrb	r3, [r7, #23]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d138      	bne.n	800dd5a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	330b      	adds	r3, #11
 800dcf2:	781a      	ldrb	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	330b      	adds	r3, #11
 800dcf8:	f042 0220 	orr.w	r2, r2, #32
 800dcfc:	b2d2      	uxtb	r2, r2
 800dcfe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6818      	ldr	r0, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	68f9      	ldr	r1, [r7, #12]
 800dd0c:	f7fe fd71 	bl	800c7f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f103 021c 	add.w	r2, r3, #28
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f7fd fdeb 	bl	800b8f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3316      	adds	r3, #22
 800dd26:	6939      	ldr	r1, [r7, #16]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fd fde5 	bl	800b8f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3312      	adds	r3, #18
 800dd32:	2100      	movs	r1, #0
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fd fdc4 	bl	800b8c2 <st_word>
					fs->wflag = 1;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fe f860 	bl	800be08 <sync_fs>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7d1b      	ldrb	r3, [r3, #20]
 800dd50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3718      	adds	r7, #24
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff ff7b 	bl	800dc68 <f_sync>
 800dd72:	4603      	mov	r3, r0
 800dd74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d118      	bne.n	800ddae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f107 0208 	add.w	r2, r7, #8
 800dd82:	4611      	mov	r1, r2
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7ff fa85 	bl	800d294 <validate>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd8e:	7bfb      	ldrb	r3, [r7, #15]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d10c      	bne.n	800ddae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	691b      	ldr	r3, [r3, #16]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fd ff63 	bl	800bc64 <dec_lock>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d102      	bne.n	800ddae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b090      	sub	sp, #64	@ 0x40
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f107 0208 	add.w	r2, r7, #8
 800ddc8:	4611      	mov	r1, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7ff fa62 	bl	800d294 <validate>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ddd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d103      	bne.n	800dde6 <f_lseek+0x2e>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	7d5b      	ldrb	r3, [r3, #21]
 800dde2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dde6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d002      	beq.n	800ddf4 <f_lseek+0x3c>
 800ddee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ddf2:	e1e6      	b.n	800e1c2 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f000 80d1 	beq.w	800dfa0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de04:	d15a      	bne.n	800debc <f_lseek+0x104>
			tbl = fp->cltbl;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	1d1a      	adds	r2, r3, #4
 800de10:	627a      	str	r2, [r7, #36]	@ 0x24
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	617b      	str	r3, [r7, #20]
 800de16:	2302      	movs	r3, #2
 800de18:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800de20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de22:	2b00      	cmp	r3, #0
 800de24:	d03a      	beq.n	800de9c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800de26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de28:	613b      	str	r3, [r7, #16]
 800de2a:	2300      	movs	r3, #0
 800de2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de30:	3302      	adds	r3, #2
 800de32:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800de34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de36:	60fb      	str	r3, [r7, #12]
 800de38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3a:	3301      	adds	r3, #1
 800de3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe f86d 	bl	800bf22 <get_fat>
 800de48:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800de4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d804      	bhi.n	800de5a <f_lseek+0xa2>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2202      	movs	r2, #2
 800de54:	755a      	strb	r2, [r3, #21]
 800de56:	2302      	movs	r3, #2
 800de58:	e1b3      	b.n	800e1c2 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de60:	d104      	bne.n	800de6c <f_lseek+0xb4>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2201      	movs	r2, #1
 800de66:	755a      	strb	r2, [r3, #21]
 800de68:	2301      	movs	r3, #1
 800de6a:	e1aa      	b.n	800e1c2 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	3301      	adds	r3, #1
 800de70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de72:	429a      	cmp	r2, r3
 800de74:	d0de      	beq.n	800de34 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800de76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d809      	bhi.n	800de92 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800de7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de80:	1d1a      	adds	r2, r3, #4
 800de82:	627a      	str	r2, [r7, #36]	@ 0x24
 800de84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8a:	1d1a      	adds	r2, r3, #4
 800de8c:	627a      	str	r2, [r7, #36]	@ 0x24
 800de8e:	693a      	ldr	r2, [r7, #16]
 800de90:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	695b      	ldr	r3, [r3, #20]
 800de96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de98:	429a      	cmp	r2, r3
 800de9a:	d3c4      	bcc.n	800de26 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dea2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d803      	bhi.n	800deb4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800deac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	e184      	b.n	800e1be <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800deb4:	2311      	movs	r3, #17
 800deb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800deba:	e180      	b.n	800e1be <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d902      	bls.n	800decc <f_lseek+0x114>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 8172 	beq.w	800e1be <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	3b01      	subs	r3, #1
 800dede:	4619      	mov	r1, r3
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f7fe faac 	bl	800c43e <clmt_clust>
 800dee6:	4602      	mov	r2, r0
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	69db      	ldr	r3, [r3, #28]
 800def2:	4619      	mov	r1, r3
 800def4:	4610      	mov	r0, r2
 800def6:	f7fd fff5 	bl	800bee4 <clust2sect>
 800defa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d104      	bne.n	800df0c <f_lseek+0x154>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2202      	movs	r2, #2
 800df06:	755a      	strb	r2, [r3, #21]
 800df08:	2302      	movs	r3, #2
 800df0a:	e15a      	b.n	800e1c2 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	3b01      	subs	r3, #1
 800df10:	0a5b      	lsrs	r3, r3, #9
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	8952      	ldrh	r2, [r2, #10]
 800df16:	3a01      	subs	r2, #1
 800df18:	4013      	ands	r3, r2
 800df1a:	69ba      	ldr	r2, [r7, #24]
 800df1c:	4413      	add	r3, r2
 800df1e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	699b      	ldr	r3, [r3, #24]
 800df24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 8148 	beq.w	800e1be <f_lseek+0x406>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	69ba      	ldr	r2, [r7, #24]
 800df34:	429a      	cmp	r2, r3
 800df36:	f000 8142 	beq.w	800e1be <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	7d1b      	ldrb	r3, [r3, #20]
 800df3e:	b25b      	sxtb	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	da18      	bge.n	800df76 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	7858      	ldrb	r0, [r3, #1]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a1a      	ldr	r2, [r3, #32]
 800df52:	2301      	movs	r3, #1
 800df54:	f7fd fc3c 	bl	800b7d0 <disk_write>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d004      	beq.n	800df68 <f_lseek+0x1b0>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2201      	movs	r2, #1
 800df62:	755a      	strb	r2, [r3, #21]
 800df64:	2301      	movs	r3, #1
 800df66:	e12c      	b.n	800e1c2 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	7d1b      	ldrb	r3, [r3, #20]
 800df6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df70:	b2da      	uxtb	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	7858      	ldrb	r0, [r3, #1]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df80:	2301      	movs	r3, #1
 800df82:	69ba      	ldr	r2, [r7, #24]
 800df84:	f7fd fc04 	bl	800b790 <disk_read>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d004      	beq.n	800df98 <f_lseek+0x1e0>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2201      	movs	r2, #1
 800df92:	755a      	strb	r2, [r3, #21]
 800df94:	2301      	movs	r3, #1
 800df96:	e114      	b.n	800e1c2 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	69ba      	ldr	r2, [r7, #24]
 800df9c:	621a      	str	r2, [r3, #32]
 800df9e:	e10e      	b.n	800e1be <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d908      	bls.n	800dfbc <f_lseek+0x204>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	7d1b      	ldrb	r3, [r3, #20]
 800dfae:	f003 0302 	and.w	r3, r3, #2
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d102      	bne.n	800dfbc <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfca:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 80a7 	beq.w	800e122 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	895b      	ldrh	r3, [r3, #10]
 800dfd8:	025b      	lsls	r3, r3, #9
 800dfda:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dfdc:	6a3b      	ldr	r3, [r7, #32]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d01b      	beq.n	800e01a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	1e5a      	subs	r2, r3, #1
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	1e59      	subs	r1, r3, #1
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d30f      	bcc.n	800e01a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	1e5a      	subs	r2, r3, #1
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	425b      	negs	r3, r3
 800e002:	401a      	ands	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	69db      	ldr	r3, [r3, #28]
 800e016:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e018:	e022      	b.n	800e060 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e022:	2b00      	cmp	r3, #0
 800e024:	d119      	bne.n	800e05a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2100      	movs	r1, #0
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe f96f 	bl	800c30e <create_chain>
 800e030:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e034:	2b01      	cmp	r3, #1
 800e036:	d104      	bne.n	800e042 <f_lseek+0x28a>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2202      	movs	r2, #2
 800e03c:	755a      	strb	r2, [r3, #21]
 800e03e:	2302      	movs	r3, #2
 800e040:	e0bf      	b.n	800e1c2 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e048:	d104      	bne.n	800e054 <f_lseek+0x29c>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	755a      	strb	r2, [r3, #21]
 800e050:	2301      	movs	r3, #1
 800e052:	e0b6      	b.n	800e1c2 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e058:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e05e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e062:	2b00      	cmp	r3, #0
 800e064:	d05d      	beq.n	800e122 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e066:	e03a      	b.n	800e0de <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e068:	683a      	ldr	r2, [r7, #0]
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	603b      	str	r3, [r7, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699a      	ldr	r2, [r3, #24]
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	441a      	add	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	7d1b      	ldrb	r3, [r3, #20]
 800e080:	f003 0302 	and.w	r3, r3, #2
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00b      	beq.n	800e0a0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe f93e 	bl	800c30e <create_chain>
 800e092:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e096:	2b00      	cmp	r3, #0
 800e098:	d108      	bne.n	800e0ac <f_lseek+0x2f4>
							ofs = 0; break;
 800e09a:	2300      	movs	r3, #0
 800e09c:	603b      	str	r3, [r7, #0]
 800e09e:	e022      	b.n	800e0e6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fd ff3c 	bl	800bf22 <get_fat>
 800e0aa:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b2:	d104      	bne.n	800e0be <f_lseek+0x306>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	755a      	strb	r2, [r3, #21]
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e081      	b.n	800e1c2 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d904      	bls.n	800e0ce <f_lseek+0x316>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	695b      	ldr	r3, [r3, #20]
 800e0c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d304      	bcc.n	800e0d8 <f_lseek+0x320>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2202      	movs	r2, #2
 800e0d2:	755a      	strb	r2, [r3, #21]
 800e0d4:	2302      	movs	r3, #2
 800e0d6:	e074      	b.n	800e1c2 <f_lseek+0x40a>
					fp->clust = clst;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0dc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e0de:	683a      	ldr	r2, [r7, #0]
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d8c0      	bhi.n	800e068 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	699a      	ldr	r2, [r3, #24]
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	441a      	add	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d012      	beq.n	800e122 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e100:	4618      	mov	r0, r3
 800e102:	f7fd feef 	bl	800bee4 <clust2sect>
 800e106:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d104      	bne.n	800e118 <f_lseek+0x360>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2202      	movs	r2, #2
 800e112:	755a      	strb	r2, [r3, #21]
 800e114:	2302      	movs	r3, #2
 800e116:	e054      	b.n	800e1c2 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	0a5b      	lsrs	r3, r3, #9
 800e11c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e11e:	4413      	add	r3, r2
 800e120:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	699a      	ldr	r2, [r3, #24]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d90a      	bls.n	800e144 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	699a      	ldr	r2, [r3, #24]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	7d1b      	ldrb	r3, [r3, #20]
 800e13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d036      	beq.n	800e1be <f_lseek+0x406>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a1b      	ldr	r3, [r3, #32]
 800e154:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e156:	429a      	cmp	r2, r3
 800e158:	d031      	beq.n	800e1be <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	7d1b      	ldrb	r3, [r3, #20]
 800e15e:	b25b      	sxtb	r3, r3
 800e160:	2b00      	cmp	r3, #0
 800e162:	da18      	bge.n	800e196 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	7858      	ldrb	r0, [r3, #1]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a1a      	ldr	r2, [r3, #32]
 800e172:	2301      	movs	r3, #1
 800e174:	f7fd fb2c 	bl	800b7d0 <disk_write>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d004      	beq.n	800e188 <f_lseek+0x3d0>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	755a      	strb	r2, [r3, #21]
 800e184:	2301      	movs	r3, #1
 800e186:	e01c      	b.n	800e1c2 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	7d1b      	ldrb	r3, [r3, #20]
 800e18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e190:	b2da      	uxtb	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	7858      	ldrb	r0, [r3, #1]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1a4:	f7fd faf4 	bl	800b790 <disk_read>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d004      	beq.n	800e1b8 <f_lseek+0x400>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	755a      	strb	r2, [r3, #21]
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e004      	b.n	800e1c2 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1bc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e1be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3740      	adds	r7, #64	@ 0x40
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b086      	sub	sp, #24
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
 800e1d2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d101      	bne.n	800e1de <f_opendir+0x14>
 800e1da:	2309      	movs	r3, #9
 800e1dc:	e064      	b.n	800e2a8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e1e2:	f107 010c 	add.w	r1, r7, #12
 800e1e6:	463b      	mov	r3, r7
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe fe06 	bl	800cdfc <find_volume>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d14f      	bne.n	800e29a <f_opendir+0xd0>
		obj->fs = fs;
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f7fe fced 	bl	800cbe4 <follow_path>
 800e20a:	4603      	mov	r3, r0
 800e20c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d13d      	bne.n	800e290 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e21a:	b25b      	sxtb	r3, r3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	db12      	blt.n	800e246 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	799b      	ldrb	r3, [r3, #6]
 800e224:	f003 0310 	and.w	r3, r3, #16
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00a      	beq.n	800e242 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	4619      	mov	r1, r3
 800e234:	4610      	mov	r0, r2
 800e236:	f7fe fabd 	bl	800c7b4 <ld_clust>
 800e23a:	4602      	mov	r2, r0
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	609a      	str	r2, [r3, #8]
 800e240:	e001      	b.n	800e246 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e242:	2305      	movs	r3, #5
 800e244:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e246:	7dfb      	ldrb	r3, [r7, #23]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d121      	bne.n	800e290 <f_opendir+0xc6>
				obj->id = fs->id;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	88da      	ldrh	r2, [r3, #6]
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e254:	2100      	movs	r1, #0
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7fe f925 	bl	800c4a6 <dir_sdi>
 800e25c:	4603      	mov	r3, r0
 800e25e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e260:	7dfb      	ldrb	r3, [r7, #23]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d114      	bne.n	800e290 <f_opendir+0xc6>
					if (obj->sclust) {
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00d      	beq.n	800e28a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e26e:	2100      	movs	r1, #0
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7fd fc69 	bl	800bb48 <inc_lock>
 800e276:	4602      	mov	r2, r0
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	691b      	ldr	r3, [r3, #16]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d105      	bne.n	800e290 <f_opendir+0xc6>
 800e284:	2312      	movs	r3, #18
 800e286:	75fb      	strb	r3, [r7, #23]
 800e288:	e002      	b.n	800e290 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	2200      	movs	r2, #0
 800e28e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e290:	7dfb      	ldrb	r3, [r7, #23]
 800e292:	2b04      	cmp	r3, #4
 800e294:	d101      	bne.n	800e29a <f_opendir+0xd0>
 800e296:	2305      	movs	r3, #5
 800e298:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <f_opendir+0xdc>
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f107 0208 	add.w	r2, r7, #8
 800e2be:	4611      	mov	r1, r2
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fe ffe7 	bl	800d294 <validate>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e2ca:	7bfb      	ldrb	r3, [r7, #15]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d110      	bne.n	800e2f2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	691b      	ldr	r3, [r3, #16]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d006      	beq.n	800e2e6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fd fcc1 	bl	800bc64 <dec_lock>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e2e6:	7bfb      	ldrb	r3, [r7, #15]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d102      	bne.n	800e2f2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f107 0208 	add.w	r2, r7, #8
 800e30c:	4611      	mov	r1, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe ffc0 	bl	800d294 <validate>
 800e314:	4603      	mov	r3, r0
 800e316:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e318:	7bfb      	ldrb	r3, [r7, #15]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d126      	bne.n	800e36c <f_readdir+0x70>
		if (!fno) {
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d106      	bne.n	800e332 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e324:	2100      	movs	r1, #0
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7fe f8bd 	bl	800c4a6 <dir_sdi>
 800e32c:	4603      	mov	r3, r0
 800e32e:	73fb      	strb	r3, [r7, #15]
 800e330:	e01c      	b.n	800e36c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e332:	2100      	movs	r1, #0
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7fe fa7c 	bl	800c832 <dir_read>
 800e33a:	4603      	mov	r3, r0
 800e33c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
 800e340:	2b04      	cmp	r3, #4
 800e342:	d101      	bne.n	800e348 <f_readdir+0x4c>
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e348:	7bfb      	ldrb	r3, [r7, #15]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10e      	bne.n	800e36c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7fe fb52 	bl	800c9fa <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e356:	2100      	movs	r1, #0
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7fe f91f 	bl	800c59c <dir_next>
 800e35e:	4603      	mov	r3, r0
 800e360:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	2b04      	cmp	r3, #4
 800e366:	d101      	bne.n	800e36c <f_readdir+0x70>
 800e368:	2300      	movs	r3, #0
 800e36a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
	...

0800e378 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e378:	b480      	push	{r7}
 800e37a:	b087      	sub	sp, #28
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e386:	2301      	movs	r3, #1
 800e388:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e38e:	4b1f      	ldr	r3, [pc, #124]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e390:	7a5b      	ldrb	r3, [r3, #9]
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d131      	bne.n	800e3fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e398:	4b1c      	ldr	r3, [pc, #112]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e39a:	7a5b      	ldrb	r3, [r3, #9]
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e3a6:	4b19      	ldr	r3, [pc, #100]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e3a8:	7a5b      	ldrb	r3, [r3, #9]
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	4a17      	ldr	r2, [pc, #92]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e3b6:	4b15      	ldr	r3, [pc, #84]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e3b8:	7a5b      	ldrb	r3, [r3, #9]
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4b13      	ldr	r3, [pc, #76]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e3c0:	4413      	add	r3, r2
 800e3c2:	79fa      	ldrb	r2, [r7, #7]
 800e3c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e3c6:	4b11      	ldr	r3, [pc, #68]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e3c8:	7a5b      	ldrb	r3, [r3, #9]
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	1c5a      	adds	r2, r3, #1
 800e3ce:	b2d1      	uxtb	r1, r2
 800e3d0:	4a0e      	ldr	r2, [pc, #56]	@ (800e40c <FATFS_LinkDriverEx+0x94>)
 800e3d2:	7251      	strb	r1, [r2, #9]
 800e3d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e3d6:	7dbb      	ldrb	r3, [r7, #22]
 800e3d8:	3330      	adds	r3, #48	@ 0x30
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	223a      	movs	r2, #58	@ 0x3a
 800e3e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	3302      	adds	r3, #2
 800e3ec:	222f      	movs	r2, #47	@ 0x2f
 800e3ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	3303      	adds	r3, #3
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	371c      	adds	r7, #28
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	20014b30 	.word	0x20014b30

0800e410 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e41a:	2200      	movs	r2, #0
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f7ff ffaa 	bl	800e378 <FATFS_LinkDriverEx>
 800e424:	4603      	mov	r3, r0
}
 800e426:	4618      	mov	r0, r3
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <_vsniprintf_r>:
 800e42e:	b530      	push	{r4, r5, lr}
 800e430:	4614      	mov	r4, r2
 800e432:	2c00      	cmp	r4, #0
 800e434:	b09b      	sub	sp, #108	@ 0x6c
 800e436:	4605      	mov	r5, r0
 800e438:	461a      	mov	r2, r3
 800e43a:	da05      	bge.n	800e448 <_vsniprintf_r+0x1a>
 800e43c:	238b      	movs	r3, #139	@ 0x8b
 800e43e:	6003      	str	r3, [r0, #0]
 800e440:	f04f 30ff 	mov.w	r0, #4294967295
 800e444:	b01b      	add	sp, #108	@ 0x6c
 800e446:	bd30      	pop	{r4, r5, pc}
 800e448:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e44c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e450:	bf14      	ite	ne
 800e452:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e456:	4623      	moveq	r3, r4
 800e458:	9302      	str	r3, [sp, #8]
 800e45a:	9305      	str	r3, [sp, #20]
 800e45c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e460:	9100      	str	r1, [sp, #0]
 800e462:	9104      	str	r1, [sp, #16]
 800e464:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e468:	4669      	mov	r1, sp
 800e46a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e46c:	f000 f9d8 	bl	800e820 <_svfiprintf_r>
 800e470:	1c43      	adds	r3, r0, #1
 800e472:	bfbc      	itt	lt
 800e474:	238b      	movlt	r3, #139	@ 0x8b
 800e476:	602b      	strlt	r3, [r5, #0]
 800e478:	2c00      	cmp	r4, #0
 800e47a:	d0e3      	beq.n	800e444 <_vsniprintf_r+0x16>
 800e47c:	9b00      	ldr	r3, [sp, #0]
 800e47e:	2200      	movs	r2, #0
 800e480:	701a      	strb	r2, [r3, #0]
 800e482:	e7df      	b.n	800e444 <_vsniprintf_r+0x16>

0800e484 <vsniprintf>:
 800e484:	b507      	push	{r0, r1, r2, lr}
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	4613      	mov	r3, r2
 800e48a:	460a      	mov	r2, r1
 800e48c:	4601      	mov	r1, r0
 800e48e:	4803      	ldr	r0, [pc, #12]	@ (800e49c <vsniprintf+0x18>)
 800e490:	6800      	ldr	r0, [r0, #0]
 800e492:	f7ff ffcc 	bl	800e42e <_vsniprintf_r>
 800e496:	b003      	add	sp, #12
 800e498:	f85d fb04 	ldr.w	pc, [sp], #4
 800e49c:	20000064 	.word	0x20000064

0800e4a0 <memset>:
 800e4a0:	4402      	add	r2, r0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d100      	bne.n	800e4aa <memset+0xa>
 800e4a8:	4770      	bx	lr
 800e4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e4ae:	e7f9      	b.n	800e4a4 <memset+0x4>

0800e4b0 <strncpy>:
 800e4b0:	b510      	push	{r4, lr}
 800e4b2:	3901      	subs	r1, #1
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	b132      	cbz	r2, 800e4c6 <strncpy+0x16>
 800e4b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e4bc:	f803 4b01 	strb.w	r4, [r3], #1
 800e4c0:	3a01      	subs	r2, #1
 800e4c2:	2c00      	cmp	r4, #0
 800e4c4:	d1f7      	bne.n	800e4b6 <strncpy+0x6>
 800e4c6:	441a      	add	r2, r3
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d100      	bne.n	800e4d0 <strncpy+0x20>
 800e4ce:	bd10      	pop	{r4, pc}
 800e4d0:	f803 1b01 	strb.w	r1, [r3], #1
 800e4d4:	e7f9      	b.n	800e4ca <strncpy+0x1a>

0800e4d6 <strstr>:
 800e4d6:	780a      	ldrb	r2, [r1, #0]
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	b96a      	cbnz	r2, 800e4f8 <strstr+0x22>
 800e4dc:	bd70      	pop	{r4, r5, r6, pc}
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d109      	bne.n	800e4f6 <strstr+0x20>
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d0f6      	beq.n	800e4dc <strstr+0x6>
 800e4ee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e4f2:	429e      	cmp	r6, r3
 800e4f4:	d0f7      	beq.n	800e4e6 <strstr+0x10>
 800e4f6:	3001      	adds	r0, #1
 800e4f8:	7803      	ldrb	r3, [r0, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1ef      	bne.n	800e4de <strstr+0x8>
 800e4fe:	4618      	mov	r0, r3
 800e500:	e7ec      	b.n	800e4dc <strstr+0x6>
	...

0800e504 <__errno>:
 800e504:	4b01      	ldr	r3, [pc, #4]	@ (800e50c <__errno+0x8>)
 800e506:	6818      	ldr	r0, [r3, #0]
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	20000064 	.word	0x20000064

0800e510 <__libc_init_array>:
 800e510:	b570      	push	{r4, r5, r6, lr}
 800e512:	4d0d      	ldr	r5, [pc, #52]	@ (800e548 <__libc_init_array+0x38>)
 800e514:	4c0d      	ldr	r4, [pc, #52]	@ (800e54c <__libc_init_array+0x3c>)
 800e516:	1b64      	subs	r4, r4, r5
 800e518:	10a4      	asrs	r4, r4, #2
 800e51a:	2600      	movs	r6, #0
 800e51c:	42a6      	cmp	r6, r4
 800e51e:	d109      	bne.n	800e534 <__libc_init_array+0x24>
 800e520:	4d0b      	ldr	r5, [pc, #44]	@ (800e550 <__libc_init_array+0x40>)
 800e522:	4c0c      	ldr	r4, [pc, #48]	@ (800e554 <__libc_init_array+0x44>)
 800e524:	f000 fc66 	bl	800edf4 <_init>
 800e528:	1b64      	subs	r4, r4, r5
 800e52a:	10a4      	asrs	r4, r4, #2
 800e52c:	2600      	movs	r6, #0
 800e52e:	42a6      	cmp	r6, r4
 800e530:	d105      	bne.n	800e53e <__libc_init_array+0x2e>
 800e532:	bd70      	pop	{r4, r5, r6, pc}
 800e534:	f855 3b04 	ldr.w	r3, [r5], #4
 800e538:	4798      	blx	r3
 800e53a:	3601      	adds	r6, #1
 800e53c:	e7ee      	b.n	800e51c <__libc_init_array+0xc>
 800e53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e542:	4798      	blx	r3
 800e544:	3601      	adds	r6, #1
 800e546:	e7f2      	b.n	800e52e <__libc_init_array+0x1e>
 800e548:	0800f514 	.word	0x0800f514
 800e54c:	0800f514 	.word	0x0800f514
 800e550:	0800f514 	.word	0x0800f514
 800e554:	0800f518 	.word	0x0800f518

0800e558 <__retarget_lock_acquire_recursive>:
 800e558:	4770      	bx	lr

0800e55a <__retarget_lock_release_recursive>:
 800e55a:	4770      	bx	lr

0800e55c <memcpy>:
 800e55c:	440a      	add	r2, r1
 800e55e:	4291      	cmp	r1, r2
 800e560:	f100 33ff 	add.w	r3, r0, #4294967295
 800e564:	d100      	bne.n	800e568 <memcpy+0xc>
 800e566:	4770      	bx	lr
 800e568:	b510      	push	{r4, lr}
 800e56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e572:	4291      	cmp	r1, r2
 800e574:	d1f9      	bne.n	800e56a <memcpy+0xe>
 800e576:	bd10      	pop	{r4, pc}

0800e578 <_free_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	4605      	mov	r5, r0
 800e57c:	2900      	cmp	r1, #0
 800e57e:	d041      	beq.n	800e604 <_free_r+0x8c>
 800e580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e584:	1f0c      	subs	r4, r1, #4
 800e586:	2b00      	cmp	r3, #0
 800e588:	bfb8      	it	lt
 800e58a:	18e4      	addlt	r4, r4, r3
 800e58c:	f000 f8e0 	bl	800e750 <__malloc_lock>
 800e590:	4a1d      	ldr	r2, [pc, #116]	@ (800e608 <_free_r+0x90>)
 800e592:	6813      	ldr	r3, [r2, #0]
 800e594:	b933      	cbnz	r3, 800e5a4 <_free_r+0x2c>
 800e596:	6063      	str	r3, [r4, #4]
 800e598:	6014      	str	r4, [r2, #0]
 800e59a:	4628      	mov	r0, r5
 800e59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5a0:	f000 b8dc 	b.w	800e75c <__malloc_unlock>
 800e5a4:	42a3      	cmp	r3, r4
 800e5a6:	d908      	bls.n	800e5ba <_free_r+0x42>
 800e5a8:	6820      	ldr	r0, [r4, #0]
 800e5aa:	1821      	adds	r1, r4, r0
 800e5ac:	428b      	cmp	r3, r1
 800e5ae:	bf01      	itttt	eq
 800e5b0:	6819      	ldreq	r1, [r3, #0]
 800e5b2:	685b      	ldreq	r3, [r3, #4]
 800e5b4:	1809      	addeq	r1, r1, r0
 800e5b6:	6021      	streq	r1, [r4, #0]
 800e5b8:	e7ed      	b.n	800e596 <_free_r+0x1e>
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	b10b      	cbz	r3, 800e5c4 <_free_r+0x4c>
 800e5c0:	42a3      	cmp	r3, r4
 800e5c2:	d9fa      	bls.n	800e5ba <_free_r+0x42>
 800e5c4:	6811      	ldr	r1, [r2, #0]
 800e5c6:	1850      	adds	r0, r2, r1
 800e5c8:	42a0      	cmp	r0, r4
 800e5ca:	d10b      	bne.n	800e5e4 <_free_r+0x6c>
 800e5cc:	6820      	ldr	r0, [r4, #0]
 800e5ce:	4401      	add	r1, r0
 800e5d0:	1850      	adds	r0, r2, r1
 800e5d2:	4283      	cmp	r3, r0
 800e5d4:	6011      	str	r1, [r2, #0]
 800e5d6:	d1e0      	bne.n	800e59a <_free_r+0x22>
 800e5d8:	6818      	ldr	r0, [r3, #0]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	6053      	str	r3, [r2, #4]
 800e5de:	4408      	add	r0, r1
 800e5e0:	6010      	str	r0, [r2, #0]
 800e5e2:	e7da      	b.n	800e59a <_free_r+0x22>
 800e5e4:	d902      	bls.n	800e5ec <_free_r+0x74>
 800e5e6:	230c      	movs	r3, #12
 800e5e8:	602b      	str	r3, [r5, #0]
 800e5ea:	e7d6      	b.n	800e59a <_free_r+0x22>
 800e5ec:	6820      	ldr	r0, [r4, #0]
 800e5ee:	1821      	adds	r1, r4, r0
 800e5f0:	428b      	cmp	r3, r1
 800e5f2:	bf04      	itt	eq
 800e5f4:	6819      	ldreq	r1, [r3, #0]
 800e5f6:	685b      	ldreq	r3, [r3, #4]
 800e5f8:	6063      	str	r3, [r4, #4]
 800e5fa:	bf04      	itt	eq
 800e5fc:	1809      	addeq	r1, r1, r0
 800e5fe:	6021      	streq	r1, [r4, #0]
 800e600:	6054      	str	r4, [r2, #4]
 800e602:	e7ca      	b.n	800e59a <_free_r+0x22>
 800e604:	bd38      	pop	{r3, r4, r5, pc}
 800e606:	bf00      	nop
 800e608:	20014c80 	.word	0x20014c80

0800e60c <sbrk_aligned>:
 800e60c:	b570      	push	{r4, r5, r6, lr}
 800e60e:	4e0f      	ldr	r6, [pc, #60]	@ (800e64c <sbrk_aligned+0x40>)
 800e610:	460c      	mov	r4, r1
 800e612:	6831      	ldr	r1, [r6, #0]
 800e614:	4605      	mov	r5, r0
 800e616:	b911      	cbnz	r1, 800e61e <sbrk_aligned+0x12>
 800e618:	f000 fba6 	bl	800ed68 <_sbrk_r>
 800e61c:	6030      	str	r0, [r6, #0]
 800e61e:	4621      	mov	r1, r4
 800e620:	4628      	mov	r0, r5
 800e622:	f000 fba1 	bl	800ed68 <_sbrk_r>
 800e626:	1c43      	adds	r3, r0, #1
 800e628:	d103      	bne.n	800e632 <sbrk_aligned+0x26>
 800e62a:	f04f 34ff 	mov.w	r4, #4294967295
 800e62e:	4620      	mov	r0, r4
 800e630:	bd70      	pop	{r4, r5, r6, pc}
 800e632:	1cc4      	adds	r4, r0, #3
 800e634:	f024 0403 	bic.w	r4, r4, #3
 800e638:	42a0      	cmp	r0, r4
 800e63a:	d0f8      	beq.n	800e62e <sbrk_aligned+0x22>
 800e63c:	1a21      	subs	r1, r4, r0
 800e63e:	4628      	mov	r0, r5
 800e640:	f000 fb92 	bl	800ed68 <_sbrk_r>
 800e644:	3001      	adds	r0, #1
 800e646:	d1f2      	bne.n	800e62e <sbrk_aligned+0x22>
 800e648:	e7ef      	b.n	800e62a <sbrk_aligned+0x1e>
 800e64a:	bf00      	nop
 800e64c:	20014c7c 	.word	0x20014c7c

0800e650 <_malloc_r>:
 800e650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e654:	1ccd      	adds	r5, r1, #3
 800e656:	f025 0503 	bic.w	r5, r5, #3
 800e65a:	3508      	adds	r5, #8
 800e65c:	2d0c      	cmp	r5, #12
 800e65e:	bf38      	it	cc
 800e660:	250c      	movcc	r5, #12
 800e662:	2d00      	cmp	r5, #0
 800e664:	4606      	mov	r6, r0
 800e666:	db01      	blt.n	800e66c <_malloc_r+0x1c>
 800e668:	42a9      	cmp	r1, r5
 800e66a:	d904      	bls.n	800e676 <_malloc_r+0x26>
 800e66c:	230c      	movs	r3, #12
 800e66e:	6033      	str	r3, [r6, #0]
 800e670:	2000      	movs	r0, #0
 800e672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e74c <_malloc_r+0xfc>
 800e67a:	f000 f869 	bl	800e750 <__malloc_lock>
 800e67e:	f8d8 3000 	ldr.w	r3, [r8]
 800e682:	461c      	mov	r4, r3
 800e684:	bb44      	cbnz	r4, 800e6d8 <_malloc_r+0x88>
 800e686:	4629      	mov	r1, r5
 800e688:	4630      	mov	r0, r6
 800e68a:	f7ff ffbf 	bl	800e60c <sbrk_aligned>
 800e68e:	1c43      	adds	r3, r0, #1
 800e690:	4604      	mov	r4, r0
 800e692:	d158      	bne.n	800e746 <_malloc_r+0xf6>
 800e694:	f8d8 4000 	ldr.w	r4, [r8]
 800e698:	4627      	mov	r7, r4
 800e69a:	2f00      	cmp	r7, #0
 800e69c:	d143      	bne.n	800e726 <_malloc_r+0xd6>
 800e69e:	2c00      	cmp	r4, #0
 800e6a0:	d04b      	beq.n	800e73a <_malloc_r+0xea>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	4639      	mov	r1, r7
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	eb04 0903 	add.w	r9, r4, r3
 800e6ac:	f000 fb5c 	bl	800ed68 <_sbrk_r>
 800e6b0:	4581      	cmp	r9, r0
 800e6b2:	d142      	bne.n	800e73a <_malloc_r+0xea>
 800e6b4:	6821      	ldr	r1, [r4, #0]
 800e6b6:	1a6d      	subs	r5, r5, r1
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f7ff ffa6 	bl	800e60c <sbrk_aligned>
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	d03a      	beq.n	800e73a <_malloc_r+0xea>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	442b      	add	r3, r5
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ce:	685a      	ldr	r2, [r3, #4]
 800e6d0:	bb62      	cbnz	r2, 800e72c <_malloc_r+0xdc>
 800e6d2:	f8c8 7000 	str.w	r7, [r8]
 800e6d6:	e00f      	b.n	800e6f8 <_malloc_r+0xa8>
 800e6d8:	6822      	ldr	r2, [r4, #0]
 800e6da:	1b52      	subs	r2, r2, r5
 800e6dc:	d420      	bmi.n	800e720 <_malloc_r+0xd0>
 800e6de:	2a0b      	cmp	r2, #11
 800e6e0:	d917      	bls.n	800e712 <_malloc_r+0xc2>
 800e6e2:	1961      	adds	r1, r4, r5
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	6025      	str	r5, [r4, #0]
 800e6e8:	bf18      	it	ne
 800e6ea:	6059      	strne	r1, [r3, #4]
 800e6ec:	6863      	ldr	r3, [r4, #4]
 800e6ee:	bf08      	it	eq
 800e6f0:	f8c8 1000 	streq.w	r1, [r8]
 800e6f4:	5162      	str	r2, [r4, r5]
 800e6f6:	604b      	str	r3, [r1, #4]
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f000 f82f 	bl	800e75c <__malloc_unlock>
 800e6fe:	f104 000b 	add.w	r0, r4, #11
 800e702:	1d23      	adds	r3, r4, #4
 800e704:	f020 0007 	bic.w	r0, r0, #7
 800e708:	1ac2      	subs	r2, r0, r3
 800e70a:	bf1c      	itt	ne
 800e70c:	1a1b      	subne	r3, r3, r0
 800e70e:	50a3      	strne	r3, [r4, r2]
 800e710:	e7af      	b.n	800e672 <_malloc_r+0x22>
 800e712:	6862      	ldr	r2, [r4, #4]
 800e714:	42a3      	cmp	r3, r4
 800e716:	bf0c      	ite	eq
 800e718:	f8c8 2000 	streq.w	r2, [r8]
 800e71c:	605a      	strne	r2, [r3, #4]
 800e71e:	e7eb      	b.n	800e6f8 <_malloc_r+0xa8>
 800e720:	4623      	mov	r3, r4
 800e722:	6864      	ldr	r4, [r4, #4]
 800e724:	e7ae      	b.n	800e684 <_malloc_r+0x34>
 800e726:	463c      	mov	r4, r7
 800e728:	687f      	ldr	r7, [r7, #4]
 800e72a:	e7b6      	b.n	800e69a <_malloc_r+0x4a>
 800e72c:	461a      	mov	r2, r3
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	42a3      	cmp	r3, r4
 800e732:	d1fb      	bne.n	800e72c <_malloc_r+0xdc>
 800e734:	2300      	movs	r3, #0
 800e736:	6053      	str	r3, [r2, #4]
 800e738:	e7de      	b.n	800e6f8 <_malloc_r+0xa8>
 800e73a:	230c      	movs	r3, #12
 800e73c:	6033      	str	r3, [r6, #0]
 800e73e:	4630      	mov	r0, r6
 800e740:	f000 f80c 	bl	800e75c <__malloc_unlock>
 800e744:	e794      	b.n	800e670 <_malloc_r+0x20>
 800e746:	6005      	str	r5, [r0, #0]
 800e748:	e7d6      	b.n	800e6f8 <_malloc_r+0xa8>
 800e74a:	bf00      	nop
 800e74c:	20014c80 	.word	0x20014c80

0800e750 <__malloc_lock>:
 800e750:	4801      	ldr	r0, [pc, #4]	@ (800e758 <__malloc_lock+0x8>)
 800e752:	f7ff bf01 	b.w	800e558 <__retarget_lock_acquire_recursive>
 800e756:	bf00      	nop
 800e758:	20014c78 	.word	0x20014c78

0800e75c <__malloc_unlock>:
 800e75c:	4801      	ldr	r0, [pc, #4]	@ (800e764 <__malloc_unlock+0x8>)
 800e75e:	f7ff befc 	b.w	800e55a <__retarget_lock_release_recursive>
 800e762:	bf00      	nop
 800e764:	20014c78 	.word	0x20014c78

0800e768 <__ssputs_r>:
 800e768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e76c:	688e      	ldr	r6, [r1, #8]
 800e76e:	461f      	mov	r7, r3
 800e770:	42be      	cmp	r6, r7
 800e772:	680b      	ldr	r3, [r1, #0]
 800e774:	4682      	mov	sl, r0
 800e776:	460c      	mov	r4, r1
 800e778:	4690      	mov	r8, r2
 800e77a:	d82d      	bhi.n	800e7d8 <__ssputs_r+0x70>
 800e77c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e784:	d026      	beq.n	800e7d4 <__ssputs_r+0x6c>
 800e786:	6965      	ldr	r5, [r4, #20]
 800e788:	6909      	ldr	r1, [r1, #16]
 800e78a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e78e:	eba3 0901 	sub.w	r9, r3, r1
 800e792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e796:	1c7b      	adds	r3, r7, #1
 800e798:	444b      	add	r3, r9
 800e79a:	106d      	asrs	r5, r5, #1
 800e79c:	429d      	cmp	r5, r3
 800e79e:	bf38      	it	cc
 800e7a0:	461d      	movcc	r5, r3
 800e7a2:	0553      	lsls	r3, r2, #21
 800e7a4:	d527      	bpl.n	800e7f6 <__ssputs_r+0x8e>
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f7ff ff52 	bl	800e650 <_malloc_r>
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	b360      	cbz	r0, 800e80a <__ssputs_r+0xa2>
 800e7b0:	6921      	ldr	r1, [r4, #16]
 800e7b2:	464a      	mov	r2, r9
 800e7b4:	f7ff fed2 	bl	800e55c <memcpy>
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c2:	81a3      	strh	r3, [r4, #12]
 800e7c4:	6126      	str	r6, [r4, #16]
 800e7c6:	6165      	str	r5, [r4, #20]
 800e7c8:	444e      	add	r6, r9
 800e7ca:	eba5 0509 	sub.w	r5, r5, r9
 800e7ce:	6026      	str	r6, [r4, #0]
 800e7d0:	60a5      	str	r5, [r4, #8]
 800e7d2:	463e      	mov	r6, r7
 800e7d4:	42be      	cmp	r6, r7
 800e7d6:	d900      	bls.n	800e7da <__ssputs_r+0x72>
 800e7d8:	463e      	mov	r6, r7
 800e7da:	6820      	ldr	r0, [r4, #0]
 800e7dc:	4632      	mov	r2, r6
 800e7de:	4641      	mov	r1, r8
 800e7e0:	f000 faa8 	bl	800ed34 <memmove>
 800e7e4:	68a3      	ldr	r3, [r4, #8]
 800e7e6:	1b9b      	subs	r3, r3, r6
 800e7e8:	60a3      	str	r3, [r4, #8]
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	4433      	add	r3, r6
 800e7ee:	6023      	str	r3, [r4, #0]
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f6:	462a      	mov	r2, r5
 800e7f8:	f000 fac6 	bl	800ed88 <_realloc_r>
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	2800      	cmp	r0, #0
 800e800:	d1e0      	bne.n	800e7c4 <__ssputs_r+0x5c>
 800e802:	6921      	ldr	r1, [r4, #16]
 800e804:	4650      	mov	r0, sl
 800e806:	f7ff feb7 	bl	800e578 <_free_r>
 800e80a:	230c      	movs	r3, #12
 800e80c:	f8ca 3000 	str.w	r3, [sl]
 800e810:	89a3      	ldrh	r3, [r4, #12]
 800e812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e816:	81a3      	strh	r3, [r4, #12]
 800e818:	f04f 30ff 	mov.w	r0, #4294967295
 800e81c:	e7e9      	b.n	800e7f2 <__ssputs_r+0x8a>
	...

0800e820 <_svfiprintf_r>:
 800e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	4698      	mov	r8, r3
 800e826:	898b      	ldrh	r3, [r1, #12]
 800e828:	061b      	lsls	r3, r3, #24
 800e82a:	b09d      	sub	sp, #116	@ 0x74
 800e82c:	4607      	mov	r7, r0
 800e82e:	460d      	mov	r5, r1
 800e830:	4614      	mov	r4, r2
 800e832:	d510      	bpl.n	800e856 <_svfiprintf_r+0x36>
 800e834:	690b      	ldr	r3, [r1, #16]
 800e836:	b973      	cbnz	r3, 800e856 <_svfiprintf_r+0x36>
 800e838:	2140      	movs	r1, #64	@ 0x40
 800e83a:	f7ff ff09 	bl	800e650 <_malloc_r>
 800e83e:	6028      	str	r0, [r5, #0]
 800e840:	6128      	str	r0, [r5, #16]
 800e842:	b930      	cbnz	r0, 800e852 <_svfiprintf_r+0x32>
 800e844:	230c      	movs	r3, #12
 800e846:	603b      	str	r3, [r7, #0]
 800e848:	f04f 30ff 	mov.w	r0, #4294967295
 800e84c:	b01d      	add	sp, #116	@ 0x74
 800e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e852:	2340      	movs	r3, #64	@ 0x40
 800e854:	616b      	str	r3, [r5, #20]
 800e856:	2300      	movs	r3, #0
 800e858:	9309      	str	r3, [sp, #36]	@ 0x24
 800e85a:	2320      	movs	r3, #32
 800e85c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e860:	f8cd 800c 	str.w	r8, [sp, #12]
 800e864:	2330      	movs	r3, #48	@ 0x30
 800e866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea04 <_svfiprintf_r+0x1e4>
 800e86a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e86e:	f04f 0901 	mov.w	r9, #1
 800e872:	4623      	mov	r3, r4
 800e874:	469a      	mov	sl, r3
 800e876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e87a:	b10a      	cbz	r2, 800e880 <_svfiprintf_r+0x60>
 800e87c:	2a25      	cmp	r2, #37	@ 0x25
 800e87e:	d1f9      	bne.n	800e874 <_svfiprintf_r+0x54>
 800e880:	ebba 0b04 	subs.w	fp, sl, r4
 800e884:	d00b      	beq.n	800e89e <_svfiprintf_r+0x7e>
 800e886:	465b      	mov	r3, fp
 800e888:	4622      	mov	r2, r4
 800e88a:	4629      	mov	r1, r5
 800e88c:	4638      	mov	r0, r7
 800e88e:	f7ff ff6b 	bl	800e768 <__ssputs_r>
 800e892:	3001      	adds	r0, #1
 800e894:	f000 80a7 	beq.w	800e9e6 <_svfiprintf_r+0x1c6>
 800e898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e89a:	445a      	add	r2, fp
 800e89c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e89e:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 809f 	beq.w	800e9e6 <_svfiprintf_r+0x1c6>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b2:	f10a 0a01 	add.w	sl, sl, #1
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	9307      	str	r3, [sp, #28]
 800e8ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8be:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8c0:	4654      	mov	r4, sl
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c8:	484e      	ldr	r0, [pc, #312]	@ (800ea04 <_svfiprintf_r+0x1e4>)
 800e8ca:	f7f1 fc89 	bl	80001e0 <memchr>
 800e8ce:	9a04      	ldr	r2, [sp, #16]
 800e8d0:	b9d8      	cbnz	r0, 800e90a <_svfiprintf_r+0xea>
 800e8d2:	06d0      	lsls	r0, r2, #27
 800e8d4:	bf44      	itt	mi
 800e8d6:	2320      	movmi	r3, #32
 800e8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8dc:	0711      	lsls	r1, r2, #28
 800e8de:	bf44      	itt	mi
 800e8e0:	232b      	movmi	r3, #43	@ 0x2b
 800e8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8ec:	d015      	beq.n	800e91a <_svfiprintf_r+0xfa>
 800e8ee:	9a07      	ldr	r2, [sp, #28]
 800e8f0:	4654      	mov	r4, sl
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	f04f 0c0a 	mov.w	ip, #10
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8fe:	3b30      	subs	r3, #48	@ 0x30
 800e900:	2b09      	cmp	r3, #9
 800e902:	d94b      	bls.n	800e99c <_svfiprintf_r+0x17c>
 800e904:	b1b0      	cbz	r0, 800e934 <_svfiprintf_r+0x114>
 800e906:	9207      	str	r2, [sp, #28]
 800e908:	e014      	b.n	800e934 <_svfiprintf_r+0x114>
 800e90a:	eba0 0308 	sub.w	r3, r0, r8
 800e90e:	fa09 f303 	lsl.w	r3, r9, r3
 800e912:	4313      	orrs	r3, r2
 800e914:	9304      	str	r3, [sp, #16]
 800e916:	46a2      	mov	sl, r4
 800e918:	e7d2      	b.n	800e8c0 <_svfiprintf_r+0xa0>
 800e91a:	9b03      	ldr	r3, [sp, #12]
 800e91c:	1d19      	adds	r1, r3, #4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	9103      	str	r1, [sp, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	bfbb      	ittet	lt
 800e926:	425b      	neglt	r3, r3
 800e928:	f042 0202 	orrlt.w	r2, r2, #2
 800e92c:	9307      	strge	r3, [sp, #28]
 800e92e:	9307      	strlt	r3, [sp, #28]
 800e930:	bfb8      	it	lt
 800e932:	9204      	strlt	r2, [sp, #16]
 800e934:	7823      	ldrb	r3, [r4, #0]
 800e936:	2b2e      	cmp	r3, #46	@ 0x2e
 800e938:	d10a      	bne.n	800e950 <_svfiprintf_r+0x130>
 800e93a:	7863      	ldrb	r3, [r4, #1]
 800e93c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e93e:	d132      	bne.n	800e9a6 <_svfiprintf_r+0x186>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	1d1a      	adds	r2, r3, #4
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	9203      	str	r2, [sp, #12]
 800e948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e94c:	3402      	adds	r4, #2
 800e94e:	9305      	str	r3, [sp, #20]
 800e950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea14 <_svfiprintf_r+0x1f4>
 800e954:	7821      	ldrb	r1, [r4, #0]
 800e956:	2203      	movs	r2, #3
 800e958:	4650      	mov	r0, sl
 800e95a:	f7f1 fc41 	bl	80001e0 <memchr>
 800e95e:	b138      	cbz	r0, 800e970 <_svfiprintf_r+0x150>
 800e960:	9b04      	ldr	r3, [sp, #16]
 800e962:	eba0 000a 	sub.w	r0, r0, sl
 800e966:	2240      	movs	r2, #64	@ 0x40
 800e968:	4082      	lsls	r2, r0
 800e96a:	4313      	orrs	r3, r2
 800e96c:	3401      	adds	r4, #1
 800e96e:	9304      	str	r3, [sp, #16]
 800e970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e974:	4824      	ldr	r0, [pc, #144]	@ (800ea08 <_svfiprintf_r+0x1e8>)
 800e976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e97a:	2206      	movs	r2, #6
 800e97c:	f7f1 fc30 	bl	80001e0 <memchr>
 800e980:	2800      	cmp	r0, #0
 800e982:	d036      	beq.n	800e9f2 <_svfiprintf_r+0x1d2>
 800e984:	4b21      	ldr	r3, [pc, #132]	@ (800ea0c <_svfiprintf_r+0x1ec>)
 800e986:	bb1b      	cbnz	r3, 800e9d0 <_svfiprintf_r+0x1b0>
 800e988:	9b03      	ldr	r3, [sp, #12]
 800e98a:	3307      	adds	r3, #7
 800e98c:	f023 0307 	bic.w	r3, r3, #7
 800e990:	3308      	adds	r3, #8
 800e992:	9303      	str	r3, [sp, #12]
 800e994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e996:	4433      	add	r3, r6
 800e998:	9309      	str	r3, [sp, #36]	@ 0x24
 800e99a:	e76a      	b.n	800e872 <_svfiprintf_r+0x52>
 800e99c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	2001      	movs	r0, #1
 800e9a4:	e7a8      	b.n	800e8f8 <_svfiprintf_r+0xd8>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	3401      	adds	r4, #1
 800e9aa:	9305      	str	r3, [sp, #20]
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	f04f 0c0a 	mov.w	ip, #10
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9b8:	3a30      	subs	r2, #48	@ 0x30
 800e9ba:	2a09      	cmp	r2, #9
 800e9bc:	d903      	bls.n	800e9c6 <_svfiprintf_r+0x1a6>
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d0c6      	beq.n	800e950 <_svfiprintf_r+0x130>
 800e9c2:	9105      	str	r1, [sp, #20]
 800e9c4:	e7c4      	b.n	800e950 <_svfiprintf_r+0x130>
 800e9c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e7f0      	b.n	800e9b2 <_svfiprintf_r+0x192>
 800e9d0:	ab03      	add	r3, sp, #12
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	462a      	mov	r2, r5
 800e9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800ea10 <_svfiprintf_r+0x1f0>)
 800e9d8:	a904      	add	r1, sp, #16
 800e9da:	4638      	mov	r0, r7
 800e9dc:	f3af 8000 	nop.w
 800e9e0:	1c42      	adds	r2, r0, #1
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	d1d6      	bne.n	800e994 <_svfiprintf_r+0x174>
 800e9e6:	89ab      	ldrh	r3, [r5, #12]
 800e9e8:	065b      	lsls	r3, r3, #25
 800e9ea:	f53f af2d 	bmi.w	800e848 <_svfiprintf_r+0x28>
 800e9ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9f0:	e72c      	b.n	800e84c <_svfiprintf_r+0x2c>
 800e9f2:	ab03      	add	r3, sp, #12
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	4b05      	ldr	r3, [pc, #20]	@ (800ea10 <_svfiprintf_r+0x1f0>)
 800e9fa:	a904      	add	r1, sp, #16
 800e9fc:	4638      	mov	r0, r7
 800e9fe:	f000 f879 	bl	800eaf4 <_printf_i>
 800ea02:	e7ed      	b.n	800e9e0 <_svfiprintf_r+0x1c0>
 800ea04:	0800f4d8 	.word	0x0800f4d8
 800ea08:	0800f4e2 	.word	0x0800f4e2
 800ea0c:	00000000 	.word	0x00000000
 800ea10:	0800e769 	.word	0x0800e769
 800ea14:	0800f4de 	.word	0x0800f4de

0800ea18 <_printf_common>:
 800ea18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea1c:	4616      	mov	r6, r2
 800ea1e:	4698      	mov	r8, r3
 800ea20:	688a      	ldr	r2, [r1, #8]
 800ea22:	690b      	ldr	r3, [r1, #16]
 800ea24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	bfb8      	it	lt
 800ea2c:	4613      	movlt	r3, r2
 800ea2e:	6033      	str	r3, [r6, #0]
 800ea30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea34:	4607      	mov	r7, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	b10a      	cbz	r2, 800ea3e <_printf_common+0x26>
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	6033      	str	r3, [r6, #0]
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	0699      	lsls	r1, r3, #26
 800ea42:	bf42      	ittt	mi
 800ea44:	6833      	ldrmi	r3, [r6, #0]
 800ea46:	3302      	addmi	r3, #2
 800ea48:	6033      	strmi	r3, [r6, #0]
 800ea4a:	6825      	ldr	r5, [r4, #0]
 800ea4c:	f015 0506 	ands.w	r5, r5, #6
 800ea50:	d106      	bne.n	800ea60 <_printf_common+0x48>
 800ea52:	f104 0a19 	add.w	sl, r4, #25
 800ea56:	68e3      	ldr	r3, [r4, #12]
 800ea58:	6832      	ldr	r2, [r6, #0]
 800ea5a:	1a9b      	subs	r3, r3, r2
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	dc26      	bgt.n	800eaae <_printf_common+0x96>
 800ea60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea64:	6822      	ldr	r2, [r4, #0]
 800ea66:	3b00      	subs	r3, #0
 800ea68:	bf18      	it	ne
 800ea6a:	2301      	movne	r3, #1
 800ea6c:	0692      	lsls	r2, r2, #26
 800ea6e:	d42b      	bmi.n	800eac8 <_printf_common+0xb0>
 800ea70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea74:	4641      	mov	r1, r8
 800ea76:	4638      	mov	r0, r7
 800ea78:	47c8      	blx	r9
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	d01e      	beq.n	800eabc <_printf_common+0xa4>
 800ea7e:	6823      	ldr	r3, [r4, #0]
 800ea80:	6922      	ldr	r2, [r4, #16]
 800ea82:	f003 0306 	and.w	r3, r3, #6
 800ea86:	2b04      	cmp	r3, #4
 800ea88:	bf02      	ittt	eq
 800ea8a:	68e5      	ldreq	r5, [r4, #12]
 800ea8c:	6833      	ldreq	r3, [r6, #0]
 800ea8e:	1aed      	subeq	r5, r5, r3
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	bf0c      	ite	eq
 800ea94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea98:	2500      	movne	r5, #0
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	bfc4      	itt	gt
 800ea9e:	1a9b      	subgt	r3, r3, r2
 800eaa0:	18ed      	addgt	r5, r5, r3
 800eaa2:	2600      	movs	r6, #0
 800eaa4:	341a      	adds	r4, #26
 800eaa6:	42b5      	cmp	r5, r6
 800eaa8:	d11a      	bne.n	800eae0 <_printf_common+0xc8>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e008      	b.n	800eac0 <_printf_common+0xa8>
 800eaae:	2301      	movs	r3, #1
 800eab0:	4652      	mov	r2, sl
 800eab2:	4641      	mov	r1, r8
 800eab4:	4638      	mov	r0, r7
 800eab6:	47c8      	blx	r9
 800eab8:	3001      	adds	r0, #1
 800eaba:	d103      	bne.n	800eac4 <_printf_common+0xac>
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295
 800eac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac4:	3501      	adds	r5, #1
 800eac6:	e7c6      	b.n	800ea56 <_printf_common+0x3e>
 800eac8:	18e1      	adds	r1, r4, r3
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	2030      	movs	r0, #48	@ 0x30
 800eace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ead2:	4422      	add	r2, r4
 800ead4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ead8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eadc:	3302      	adds	r3, #2
 800eade:	e7c7      	b.n	800ea70 <_printf_common+0x58>
 800eae0:	2301      	movs	r3, #1
 800eae2:	4622      	mov	r2, r4
 800eae4:	4641      	mov	r1, r8
 800eae6:	4638      	mov	r0, r7
 800eae8:	47c8      	blx	r9
 800eaea:	3001      	adds	r0, #1
 800eaec:	d0e6      	beq.n	800eabc <_printf_common+0xa4>
 800eaee:	3601      	adds	r6, #1
 800eaf0:	e7d9      	b.n	800eaa6 <_printf_common+0x8e>
	...

0800eaf4 <_printf_i>:
 800eaf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf8:	7e0f      	ldrb	r7, [r1, #24]
 800eafa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eafc:	2f78      	cmp	r7, #120	@ 0x78
 800eafe:	4691      	mov	r9, r2
 800eb00:	4680      	mov	r8, r0
 800eb02:	460c      	mov	r4, r1
 800eb04:	469a      	mov	sl, r3
 800eb06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb0a:	d807      	bhi.n	800eb1c <_printf_i+0x28>
 800eb0c:	2f62      	cmp	r7, #98	@ 0x62
 800eb0e:	d80a      	bhi.n	800eb26 <_printf_i+0x32>
 800eb10:	2f00      	cmp	r7, #0
 800eb12:	f000 80d2 	beq.w	800ecba <_printf_i+0x1c6>
 800eb16:	2f58      	cmp	r7, #88	@ 0x58
 800eb18:	f000 80b9 	beq.w	800ec8e <_printf_i+0x19a>
 800eb1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb24:	e03a      	b.n	800eb9c <_printf_i+0xa8>
 800eb26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb2a:	2b15      	cmp	r3, #21
 800eb2c:	d8f6      	bhi.n	800eb1c <_printf_i+0x28>
 800eb2e:	a101      	add	r1, pc, #4	@ (adr r1, 800eb34 <_printf_i+0x40>)
 800eb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb34:	0800eb8d 	.word	0x0800eb8d
 800eb38:	0800eba1 	.word	0x0800eba1
 800eb3c:	0800eb1d 	.word	0x0800eb1d
 800eb40:	0800eb1d 	.word	0x0800eb1d
 800eb44:	0800eb1d 	.word	0x0800eb1d
 800eb48:	0800eb1d 	.word	0x0800eb1d
 800eb4c:	0800eba1 	.word	0x0800eba1
 800eb50:	0800eb1d 	.word	0x0800eb1d
 800eb54:	0800eb1d 	.word	0x0800eb1d
 800eb58:	0800eb1d 	.word	0x0800eb1d
 800eb5c:	0800eb1d 	.word	0x0800eb1d
 800eb60:	0800eca1 	.word	0x0800eca1
 800eb64:	0800ebcb 	.word	0x0800ebcb
 800eb68:	0800ec5b 	.word	0x0800ec5b
 800eb6c:	0800eb1d 	.word	0x0800eb1d
 800eb70:	0800eb1d 	.word	0x0800eb1d
 800eb74:	0800ecc3 	.word	0x0800ecc3
 800eb78:	0800eb1d 	.word	0x0800eb1d
 800eb7c:	0800ebcb 	.word	0x0800ebcb
 800eb80:	0800eb1d 	.word	0x0800eb1d
 800eb84:	0800eb1d 	.word	0x0800eb1d
 800eb88:	0800ec63 	.word	0x0800ec63
 800eb8c:	6833      	ldr	r3, [r6, #0]
 800eb8e:	1d1a      	adds	r2, r3, #4
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6032      	str	r2, [r6, #0]
 800eb94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e09d      	b.n	800ecdc <_printf_i+0x1e8>
 800eba0:	6833      	ldr	r3, [r6, #0]
 800eba2:	6820      	ldr	r0, [r4, #0]
 800eba4:	1d19      	adds	r1, r3, #4
 800eba6:	6031      	str	r1, [r6, #0]
 800eba8:	0606      	lsls	r6, r0, #24
 800ebaa:	d501      	bpl.n	800ebb0 <_printf_i+0xbc>
 800ebac:	681d      	ldr	r5, [r3, #0]
 800ebae:	e003      	b.n	800ebb8 <_printf_i+0xc4>
 800ebb0:	0645      	lsls	r5, r0, #25
 800ebb2:	d5fb      	bpl.n	800ebac <_printf_i+0xb8>
 800ebb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebb8:	2d00      	cmp	r5, #0
 800ebba:	da03      	bge.n	800ebc4 <_printf_i+0xd0>
 800ebbc:	232d      	movs	r3, #45	@ 0x2d
 800ebbe:	426d      	negs	r5, r5
 800ebc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebc4:	4859      	ldr	r0, [pc, #356]	@ (800ed2c <_printf_i+0x238>)
 800ebc6:	230a      	movs	r3, #10
 800ebc8:	e011      	b.n	800ebee <_printf_i+0xfa>
 800ebca:	6821      	ldr	r1, [r4, #0]
 800ebcc:	6833      	ldr	r3, [r6, #0]
 800ebce:	0608      	lsls	r0, r1, #24
 800ebd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebd4:	d402      	bmi.n	800ebdc <_printf_i+0xe8>
 800ebd6:	0649      	lsls	r1, r1, #25
 800ebd8:	bf48      	it	mi
 800ebda:	b2ad      	uxthmi	r5, r5
 800ebdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebde:	4853      	ldr	r0, [pc, #332]	@ (800ed2c <_printf_i+0x238>)
 800ebe0:	6033      	str	r3, [r6, #0]
 800ebe2:	bf14      	ite	ne
 800ebe4:	230a      	movne	r3, #10
 800ebe6:	2308      	moveq	r3, #8
 800ebe8:	2100      	movs	r1, #0
 800ebea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebee:	6866      	ldr	r6, [r4, #4]
 800ebf0:	60a6      	str	r6, [r4, #8]
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	bfa2      	ittt	ge
 800ebf6:	6821      	ldrge	r1, [r4, #0]
 800ebf8:	f021 0104 	bicge.w	r1, r1, #4
 800ebfc:	6021      	strge	r1, [r4, #0]
 800ebfe:	b90d      	cbnz	r5, 800ec04 <_printf_i+0x110>
 800ec00:	2e00      	cmp	r6, #0
 800ec02:	d04b      	beq.n	800ec9c <_printf_i+0x1a8>
 800ec04:	4616      	mov	r6, r2
 800ec06:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec0a:	fb03 5711 	mls	r7, r3, r1, r5
 800ec0e:	5dc7      	ldrb	r7, [r0, r7]
 800ec10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec14:	462f      	mov	r7, r5
 800ec16:	42bb      	cmp	r3, r7
 800ec18:	460d      	mov	r5, r1
 800ec1a:	d9f4      	bls.n	800ec06 <_printf_i+0x112>
 800ec1c:	2b08      	cmp	r3, #8
 800ec1e:	d10b      	bne.n	800ec38 <_printf_i+0x144>
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	07df      	lsls	r7, r3, #31
 800ec24:	d508      	bpl.n	800ec38 <_printf_i+0x144>
 800ec26:	6923      	ldr	r3, [r4, #16]
 800ec28:	6861      	ldr	r1, [r4, #4]
 800ec2a:	4299      	cmp	r1, r3
 800ec2c:	bfde      	ittt	le
 800ec2e:	2330      	movle	r3, #48	@ 0x30
 800ec30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec38:	1b92      	subs	r2, r2, r6
 800ec3a:	6122      	str	r2, [r4, #16]
 800ec3c:	f8cd a000 	str.w	sl, [sp]
 800ec40:	464b      	mov	r3, r9
 800ec42:	aa03      	add	r2, sp, #12
 800ec44:	4621      	mov	r1, r4
 800ec46:	4640      	mov	r0, r8
 800ec48:	f7ff fee6 	bl	800ea18 <_printf_common>
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d14a      	bne.n	800ece6 <_printf_i+0x1f2>
 800ec50:	f04f 30ff 	mov.w	r0, #4294967295
 800ec54:	b004      	add	sp, #16
 800ec56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	f043 0320 	orr.w	r3, r3, #32
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	4833      	ldr	r0, [pc, #204]	@ (800ed30 <_printf_i+0x23c>)
 800ec64:	2778      	movs	r7, #120	@ 0x78
 800ec66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec6a:	6823      	ldr	r3, [r4, #0]
 800ec6c:	6831      	ldr	r1, [r6, #0]
 800ec6e:	061f      	lsls	r7, r3, #24
 800ec70:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec74:	d402      	bmi.n	800ec7c <_printf_i+0x188>
 800ec76:	065f      	lsls	r7, r3, #25
 800ec78:	bf48      	it	mi
 800ec7a:	b2ad      	uxthmi	r5, r5
 800ec7c:	6031      	str	r1, [r6, #0]
 800ec7e:	07d9      	lsls	r1, r3, #31
 800ec80:	bf44      	itt	mi
 800ec82:	f043 0320 	orrmi.w	r3, r3, #32
 800ec86:	6023      	strmi	r3, [r4, #0]
 800ec88:	b11d      	cbz	r5, 800ec92 <_printf_i+0x19e>
 800ec8a:	2310      	movs	r3, #16
 800ec8c:	e7ac      	b.n	800ebe8 <_printf_i+0xf4>
 800ec8e:	4827      	ldr	r0, [pc, #156]	@ (800ed2c <_printf_i+0x238>)
 800ec90:	e7e9      	b.n	800ec66 <_printf_i+0x172>
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	f023 0320 	bic.w	r3, r3, #32
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	e7f6      	b.n	800ec8a <_printf_i+0x196>
 800ec9c:	4616      	mov	r6, r2
 800ec9e:	e7bd      	b.n	800ec1c <_printf_i+0x128>
 800eca0:	6833      	ldr	r3, [r6, #0]
 800eca2:	6825      	ldr	r5, [r4, #0]
 800eca4:	6961      	ldr	r1, [r4, #20]
 800eca6:	1d18      	adds	r0, r3, #4
 800eca8:	6030      	str	r0, [r6, #0]
 800ecaa:	062e      	lsls	r6, r5, #24
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	d501      	bpl.n	800ecb4 <_printf_i+0x1c0>
 800ecb0:	6019      	str	r1, [r3, #0]
 800ecb2:	e002      	b.n	800ecba <_printf_i+0x1c6>
 800ecb4:	0668      	lsls	r0, r5, #25
 800ecb6:	d5fb      	bpl.n	800ecb0 <_printf_i+0x1bc>
 800ecb8:	8019      	strh	r1, [r3, #0]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	6123      	str	r3, [r4, #16]
 800ecbe:	4616      	mov	r6, r2
 800ecc0:	e7bc      	b.n	800ec3c <_printf_i+0x148>
 800ecc2:	6833      	ldr	r3, [r6, #0]
 800ecc4:	1d1a      	adds	r2, r3, #4
 800ecc6:	6032      	str	r2, [r6, #0]
 800ecc8:	681e      	ldr	r6, [r3, #0]
 800ecca:	6862      	ldr	r2, [r4, #4]
 800eccc:	2100      	movs	r1, #0
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f7f1 fa86 	bl	80001e0 <memchr>
 800ecd4:	b108      	cbz	r0, 800ecda <_printf_i+0x1e6>
 800ecd6:	1b80      	subs	r0, r0, r6
 800ecd8:	6060      	str	r0, [r4, #4]
 800ecda:	6863      	ldr	r3, [r4, #4]
 800ecdc:	6123      	str	r3, [r4, #16]
 800ecde:	2300      	movs	r3, #0
 800ece0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece4:	e7aa      	b.n	800ec3c <_printf_i+0x148>
 800ece6:	6923      	ldr	r3, [r4, #16]
 800ece8:	4632      	mov	r2, r6
 800ecea:	4649      	mov	r1, r9
 800ecec:	4640      	mov	r0, r8
 800ecee:	47d0      	blx	sl
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d0ad      	beq.n	800ec50 <_printf_i+0x15c>
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	079b      	lsls	r3, r3, #30
 800ecf8:	d413      	bmi.n	800ed22 <_printf_i+0x22e>
 800ecfa:	68e0      	ldr	r0, [r4, #12]
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	4298      	cmp	r0, r3
 800ed00:	bfb8      	it	lt
 800ed02:	4618      	movlt	r0, r3
 800ed04:	e7a6      	b.n	800ec54 <_printf_i+0x160>
 800ed06:	2301      	movs	r3, #1
 800ed08:	4632      	mov	r2, r6
 800ed0a:	4649      	mov	r1, r9
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	47d0      	blx	sl
 800ed10:	3001      	adds	r0, #1
 800ed12:	d09d      	beq.n	800ec50 <_printf_i+0x15c>
 800ed14:	3501      	adds	r5, #1
 800ed16:	68e3      	ldr	r3, [r4, #12]
 800ed18:	9903      	ldr	r1, [sp, #12]
 800ed1a:	1a5b      	subs	r3, r3, r1
 800ed1c:	42ab      	cmp	r3, r5
 800ed1e:	dcf2      	bgt.n	800ed06 <_printf_i+0x212>
 800ed20:	e7eb      	b.n	800ecfa <_printf_i+0x206>
 800ed22:	2500      	movs	r5, #0
 800ed24:	f104 0619 	add.w	r6, r4, #25
 800ed28:	e7f5      	b.n	800ed16 <_printf_i+0x222>
 800ed2a:	bf00      	nop
 800ed2c:	0800f4e9 	.word	0x0800f4e9
 800ed30:	0800f4fa 	.word	0x0800f4fa

0800ed34 <memmove>:
 800ed34:	4288      	cmp	r0, r1
 800ed36:	b510      	push	{r4, lr}
 800ed38:	eb01 0402 	add.w	r4, r1, r2
 800ed3c:	d902      	bls.n	800ed44 <memmove+0x10>
 800ed3e:	4284      	cmp	r4, r0
 800ed40:	4623      	mov	r3, r4
 800ed42:	d807      	bhi.n	800ed54 <memmove+0x20>
 800ed44:	1e43      	subs	r3, r0, #1
 800ed46:	42a1      	cmp	r1, r4
 800ed48:	d008      	beq.n	800ed5c <memmove+0x28>
 800ed4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed52:	e7f8      	b.n	800ed46 <memmove+0x12>
 800ed54:	4402      	add	r2, r0
 800ed56:	4601      	mov	r1, r0
 800ed58:	428a      	cmp	r2, r1
 800ed5a:	d100      	bne.n	800ed5e <memmove+0x2a>
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed66:	e7f7      	b.n	800ed58 <memmove+0x24>

0800ed68 <_sbrk_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d06      	ldr	r5, [pc, #24]	@ (800ed84 <_sbrk_r+0x1c>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	602b      	str	r3, [r5, #0]
 800ed74:	f7f3 fbec 	bl	8002550 <_sbrk>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_sbrk_r+0x1a>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_sbrk_r+0x1a>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	20014c74 	.word	0x20014c74

0800ed88 <_realloc_r>:
 800ed88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8c:	4680      	mov	r8, r0
 800ed8e:	4615      	mov	r5, r2
 800ed90:	460c      	mov	r4, r1
 800ed92:	b921      	cbnz	r1, 800ed9e <_realloc_r+0x16>
 800ed94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed98:	4611      	mov	r1, r2
 800ed9a:	f7ff bc59 	b.w	800e650 <_malloc_r>
 800ed9e:	b92a      	cbnz	r2, 800edac <_realloc_r+0x24>
 800eda0:	f7ff fbea 	bl	800e578 <_free_r>
 800eda4:	2400      	movs	r4, #0
 800eda6:	4620      	mov	r0, r4
 800eda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edac:	f000 f81a 	bl	800ede4 <_malloc_usable_size_r>
 800edb0:	4285      	cmp	r5, r0
 800edb2:	4606      	mov	r6, r0
 800edb4:	d802      	bhi.n	800edbc <_realloc_r+0x34>
 800edb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800edba:	d8f4      	bhi.n	800eda6 <_realloc_r+0x1e>
 800edbc:	4629      	mov	r1, r5
 800edbe:	4640      	mov	r0, r8
 800edc0:	f7ff fc46 	bl	800e650 <_malloc_r>
 800edc4:	4607      	mov	r7, r0
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d0ec      	beq.n	800eda4 <_realloc_r+0x1c>
 800edca:	42b5      	cmp	r5, r6
 800edcc:	462a      	mov	r2, r5
 800edce:	4621      	mov	r1, r4
 800edd0:	bf28      	it	cs
 800edd2:	4632      	movcs	r2, r6
 800edd4:	f7ff fbc2 	bl	800e55c <memcpy>
 800edd8:	4621      	mov	r1, r4
 800edda:	4640      	mov	r0, r8
 800eddc:	f7ff fbcc 	bl	800e578 <_free_r>
 800ede0:	463c      	mov	r4, r7
 800ede2:	e7e0      	b.n	800eda6 <_realloc_r+0x1e>

0800ede4 <_malloc_usable_size_r>:
 800ede4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ede8:	1f18      	subs	r0, r3, #4
 800edea:	2b00      	cmp	r3, #0
 800edec:	bfbc      	itt	lt
 800edee:	580b      	ldrlt	r3, [r1, r0]
 800edf0:	18c0      	addlt	r0, r0, r3
 800edf2:	4770      	bx	lr

0800edf4 <_init>:
 800edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf6:	bf00      	nop
 800edf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edfa:	bc08      	pop	{r3}
 800edfc:	469e      	mov	lr, r3
 800edfe:	4770      	bx	lr

0800ee00 <_fini>:
 800ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee02:	bf00      	nop
 800ee04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee06:	bc08      	pop	{r3}
 800ee08:	469e      	mov	lr, r3
 800ee0a:	4770      	bx	lr
